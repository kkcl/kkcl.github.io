{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar1.jpg","path":"img/avatar1.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/comment_bg.png","path":"img/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/post_loadding.svg","path":"img/post_loadding.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar2.jpg","path":"img/avatar2.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar3.jpg","path":"img/avatar3.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar4.jpg","path":"img/avatar4.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1}],"Cache":[{"_id":"source/google33ea6e69d32e20f7.html","hash":"422e223a4acc2bbb17b8fef05ec23e0df52a4860","modified":1585446739000},{"_id":"source/robots.txt","hash":"9dfc2b2b719f2dc8955992d034c029828e1da449","modified":1585446739000},{"_id":"themes/Butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1585446739000},{"_id":"themes/Butterfly/README.md","hash":"42e0f638fae9acf70683a86d366d4c038d74d9ac","modified":1585446739000},{"_id":"themes/Butterfly/README_CN.md","hash":"d2fb081a13748d9740b22b987fb63af673da64ff","modified":1585446739000},{"_id":"themes/Butterfly/package.json","hash":"8ea3f0abaa2b34d9c01ca4d58de073e682eecf54","modified":1585446739000},{"_id":"source/_posts/2019-11-19-推荐系统.md","hash":"a0575db3e5ac5faac6c948527fd0a6aff958e1e9","modified":1585446739000},{"_id":"source/_posts/2019-11-19-聚类方法.md","hash":"460878c87651535b85193fc84de5664a8e37d678","modified":1585446739000},{"_id":"source/_posts/2019-11-22-leetcode153-154-Find-Minimum-in-Rotated-Sorted-Array-III.md","hash":"c88b521b363cfa48e3a5ea51a7d78f4ac1ed8818","modified":1585446739000},{"_id":"source/_posts/2019-11-29-leetcode-881-Boats-to-Save-People.md","hash":"864376cf6b2ca1f03718a75ac4e0490d897da907","modified":1585446739000},{"_id":"source/_posts/BigdataBench-deploy.md","hash":"d11a9850b8ea125636830b7395af1b6e702e7efd","modified":1585446739000},{"_id":"source/_posts/Linux 命令 学习.md","hash":"758ad47b49d7708797395e985a9291c0f3c3f6e3","modified":1585446739000},{"_id":"source/_posts/apt-get install 失败.md","hash":"6f2216083d07cd229a1e61273870a2cdd602a29d","modified":1585446739000},{"_id":"source/_posts/ceph部署文档.md","hash":"be92dcb48ba249cee992fbe41fd65400e4f70a99","modified":1585446739000},{"_id":"source/_posts/make学习.md","hash":"d182716897b8cb9bf5cdebd04e58b6d65ecd9c01","modified":1585446739000},{"_id":"source/_posts/tee命令解析.md","hash":"d487da30326e1157083b8247846f846b72f54ba9","modified":1585446739000},{"_id":"source/_posts/ping 问题.md","hash":"8619e90fa450987aca5000acb041e603bf578b71","modified":1585446739000},{"_id":"source/_posts/使用YCSB 评测redis性能.md","hash":"46bcda3bd74345db0c47bdf3fe3f2a58bd934e3b","modified":1585446739000},{"_id":"source/_posts/使用shell脚本遍历redis数据库中的所有kv对.md","hash":"d187dc3675c508ae39da720adbd992d014719c47","modified":1585446739000},{"_id":"source/_posts/图计算常用算法.md","hash":"4f7564051e9dc90d5529f05ca69419d77b36d5b5","modified":1585446739000},{"_id":"source/categories/index.md","hash":"a85c12c3acbec871f8e1c316cd583c03deb2c651","modified":1585446739000},{"_id":"source/tags/index.md","hash":"345a829e1bf4be6929babea173bc466410126f7a","modified":1585446739000},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE.md","hash":"6f7e5583ca1a141cd847a117715454175adfb61f","modified":1585446739000},{"_id":"themes/Butterfly/languages/default.yml","hash":"ad6ac020ca7ba7b365f79c0358819f9a157f056e","modified":1585446739000},{"_id":"themes/Butterfly/languages/en.yml","hash":"b2b37b01e46456a4e8bc3bf1bddb0ee0b436f3e8","modified":1585446739000},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"b82574439d6f26607531c485ba4b479f57e9c5e2","modified":1585446739000},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"d1ff35c627f5d2c389058a26037101429e771487","modified":1585446739000},{"_id":"themes/Butterfly/layout/archive.pug","hash":"4d6209e8c781c9e283e1ac8c6f741c1ff68e0658","modified":1585446739000},{"_id":"themes/Butterfly/layout/category.pug","hash":"faf9aac87070c097e8e04eabcf341c6d04b568db","modified":1585446739000},{"_id":"themes/Butterfly/layout/flink.pug","hash":"6da8b1a80d0b39c2806af43dca232fdb0c390d94","modified":1585446739000},{"_id":"themes/Butterfly/layout/page.pug","hash":"1a55c2cc41d9bedf4a69400714455e8d62a58fff","modified":1585446739000},{"_id":"themes/Butterfly/layout/post.pug","hash":"36107d04ff2becc3a15f2fbc9aa462ee267af476","modified":1585446739000},{"_id":"themes/Butterfly/layout/index.pug","hash":"e002f2969f8dd528c63bbd5c38859de2303f6946","modified":1585446739000},{"_id":"themes/Butterfly/_config.yml","hash":"8cb217b983997d08ff6d33f9a51f13ce0aa839b4","modified":1585793588738},{"_id":"themes/Butterfly/layout/tag.pug","hash":"b3b446581961a838a47f17d9d3e3c81d0baff18e","modified":1585446739000},{"_id":"themes/Butterfly/scripts/gallery-tag.js","hash":"b9e7fe3e36336bec0e9dad7243456ac98ba63984","modified":1585446739000},{"_id":"themes/Butterfly/scripts/highlight.js","hash":"06ec7e41456e4870bdfa5f49da2aa75478377ee5","modified":1585446739000},{"_id":"themes/Butterfly/scripts/hide_post.js","hash":"15046d3b80cd0d981dbd4caccd53972f184e98e3","modified":1585446739000},{"_id":"themes/Butterfly/scripts/list_archives.js","hash":"c47505eb2a3fc150e2cdb17c19bf9268b9fd0315","modified":1585446739000},{"_id":"themes/Butterfly/scripts/note.js","hash":"03d608278de2dc9c6b2af69e8d36c77c0272e2bf","modified":1585446739000},{"_id":"themes/Butterfly/scripts/photo.js","hash":"a4218bbf7d0510159f6250caa0e52f223d976c35","modified":1585446739000},{"_id":"themes/Butterfly/scripts/post-lazyload.js","hash":"f1b61cb25880e41db6a7ed58fbabc7affc2577ed","modified":1585446739000},{"_id":"themes/Butterfly/scripts/random_cover.js","hash":"81d1d2ebc4b5022d701182a98383969715f7ca53","modified":1585446739000},{"_id":"themes/Butterfly/scripts/replace-config.js","hash":"4acb5a4519e1b5a29c23c83d1f70c1e298931e30","modified":1585446739000},{"_id":"themes/Butterfly/scripts/related_post.js","hash":"552e163db1b77e23edafea5719f90d4d7fb5b312","modified":1585446739000},{"_id":"themes/Butterfly/scripts/url_check.js","hash":"f3b533517dc5fc6d49dd34103f1ad91dcd6d0e87","modified":1585446739000},{"_id":"source/_posts/Redis源码阅读——SDS/2019-03-22-Redis源码阅读——SDS.md","hash":"896b2ba1f1277bae7c1ffe35bb644e99f772b161","modified":1585446739000},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"a9dff120169c4bc46d12116de792011a948938d9","modified":1585446739000},{"_id":"source/_posts/Redis源码阅读——SDS/sds.png","hash":"8ca71f0c564d44bbe5c792a3fc5bbb53b49f22c5","modified":1585446739000},{"_id":"source/_posts/BigdataBench-deploy/runcc.png","hash":"92edff3c535d6744e38fd0b933a5474d768b5ecc","modified":1585446739000},{"_id":"source/_posts/Redis源码阅读——SDS/memset.png","hash":"728c1559807187a4badabbfa2ed7cee503648e16","modified":1585446739000},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585446739000},{"_id":"themes/Butterfly/source/img/avatar1.jpg","hash":"97bdf60231df482479d58ad0edb9587b60f4e7ac","modified":1585446739000},{"_id":"themes/Butterfly/source/img/comment_bg.png","hash":"1adfc4ee925fb4f922c24d7774e7c46d940fe31b","modified":1585446739000},{"_id":"themes/Butterfly/source/img/favicon.png","hash":"9ad0834cb90e0a8ff8ee739e51d8109aceb7cf68","modified":1585446739000},{"_id":"themes/Butterfly/source/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1585446739000},{"_id":"themes/Butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1585446739000},{"_id":"themes/Butterfly/source/css/index.styl","hash":"d97cf99572b5285ebc7152fe72678bf92f01ac67","modified":1585446739000},{"_id":"themes/Butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1585446739000},{"_id":"themes/Butterfly/source/css/var.styl","hash":"d0600350afae26a7617059b138c41bb716542a11","modified":1585446739000},{"_id":"themes/Butterfly/source/js/main.js","hash":"d2f8926f343791c05d48a3d64e01ec896a6d97e2","modified":1585446739000},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"cc26adb3c22983ae23e0b314e0fe3b73dd61432d","modified":1585446739000},{"_id":"themes/Butterfly/source/js/utils.js","hash":"693e23855afde9c4ccc55244bac1a37bbe78972c","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"126a7d7520002f47add8bf5d20b95a3d3e97b99a","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/config.pug","hash":"b87a0681c6675d2b48188de0c3ddc45bfaef6a00","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"2c099f1321bf5c8c8d6b4815a2f9e4f7e36dcd79","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"a0431d26d1ba88e21bf60287056fee772194fd9e","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/index-js.pug","hash":"889d10fd65c61257cc2fc652f5e4c21bb5585a53","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/header.pug","hash":"3c1ea11fb1cde7f3beda8aeddf04b076c0827a9f","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"0d91b54e916e3cd6fdc33cb42936d17e2a6a7bb4","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/menu_item.pug","hash":"92527e432748c978aca4127db93421d263b7a4b8","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar.pug","hash":"37a77ae955d5c3851b1eeb507fedf78781795d51","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/nav.pug","hash":"ca0394edad88a8b7436670c04271df4cdafe1fd0","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/page_tag.pug","hash":"77806405a67ce97801f5b74adaa4c62f96b05572","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"9962414e7d40c8758b0db121cfc8c1f38c5726ce","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/recent-posts.pug","hash":"e185d6147f44305e3103d8ca78189b52bb6e17d5","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/reward.pug","hash":"f0594d919091ad1f9b88389cba3cee5eabca23f7","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"eacab5f86935969fbbb93955371db56f04a83843","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"b076fa6fd08dbcfd743a4f5982f89ad84791573a","modified":1585446739000},{"_id":"themes/Butterfly/source/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1585446739000},{"_id":"themes/Butterfly/source/img/avatar2.jpg","hash":"8ee21186ac6c945554ac87222427790b8e94e88d","modified":1585446739000},{"_id":"themes/Butterfly/source/img/avatar3.jpg","hash":"d617811dfcf61a5001c2d0fc3332724c78b7252b","modified":1585446739000},{"_id":"themes/Butterfly/source/img/avatar.png","hash":"77f00530b5f24207d00f3e92f9821cc1d4eb3d40","modified":1585446739000},{"_id":"themes/Butterfly/source/img/avatar4.jpg","hash":"8b53ff96c432156b0890135dcdb6e1986a256fb6","modified":1585446739000},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"ca66630f0f20fcd99ce88dd6807cc22212b3e10a","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"2ef6b0953d2681cf2c004ffe0650549e123e8ca7","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"efceb8105830544cef5e4afad3243326b3118fc1","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"610822c1ab60f93e7ae50a2c2e616841a57e80a7","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"a086ae149c740345d2a345c30cd5becf2edf857c","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"02b9b63d9c4e7e7948f745948e32f965b1bc287b","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"d80a6c8b3173aab6d986cf98cf901841c524239d","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/category.styl","hash":"43665a1e053e838673b683780650822dd7a9a749","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"f578d48c380d4b005f409d10cd671d0bf86f46c2","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/flink.styl","hash":"75c46f41be2d29c1de8e76d0fe2b0e14ae63ab8e","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"4131ce6cd96344caff006ffd4c084df2dbb868f3","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"43ec56fdf168a191100b2d8c0f44bfd2af66e8b1","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/mobile-sidebar.styl","hash":"b691ed975e3408a63be9dbe378b0a686f7286788","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/note.styl","hash":"0137e10a1d2cef31f5099c8bc2b68f9a4ce5708f","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/page.styl","hash":"a786e16dcf7c3661e5715004e8c4898854ca4ae5","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"4f8b75b02c9db40c3ecbdbf67712bd155f034fbe","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"42fb06d38683f124b231964211bd0713d4b94420","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"cfd36d53386c99c465f4add125524a6d3b4f6cfb","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/readmode.styl","hash":"d2609c084c68f14c0cb1f966767f12227faed2c6","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"e7edcb1824b4a7b5f3079f96496465be7cb8758f","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"e1f1f104155681a0d630688e40b3ecd4461852a5","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"4feb9cc8bea6a9521fbb4cdeaaa71d31cb112e4c","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_layout/z-darkmode.styl","hash":"5f2231f3392444ae8b32bb58a60eb53db8de9670","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1585446739000},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/comments/disqus.pug","hash":"37357152952f1d8f7f9eac390baaae29647e8b69","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/comments/disqusjs.pug","hash":"bf03abb46095a521742dbd8959102c9dfd3839b9","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/comments/gitalk.pug","hash":"a1d31fc54686736d1416cf8b23888f93d9edd3f3","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/comments/valine.pug","hash":"c9bd1dbde21e179678e056236fe93700b2c64bc6","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/comments/index.pug","hash":"821ede50b6fa27cfd9b7f20172baf9a34bb5d5a8","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"141aaad9a9f59fb1e2afd59fc52d4e04e6ee2bfc","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/head/dns_prefetch.pug","hash":"54f091a1736e6186707a5ead25bf98fcd55e9661","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"eaef93932742a1f3d27746943cba0edc6f5aff8f","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/head/darkmode.pug","hash":"6e45c4dd45ed8037948639e30947886aff186f8b","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/mixins/UI.pug","hash":"3b2ae03259fe632441fd86a163ad65838d6c202e","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"a521e0b4760bc77c293a115603d84e4863544982","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/search/local-search.pug","hash":"bc3d9694f3f3f3d4d95e8ccadbf6e27a61093c6d","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/share/share-js.pug","hash":"8ab8fc87104dfe1de8107ec984b35c821813e310","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"47892d5cec13b047bd38d1101574d47836bf67e9","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"32d5e234dda73e613f907bd26e255b9213d1d74d","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"4abbd02c7dcb2c0a42062d6c18d87faa60988914","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"7d4201dfe3a096c2470c2f1f4ded7b02e3250a40","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"dbfbc1d1f063a9121a8b67ed57db26fccd50b087","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"749329a39e44bafbf0ea3a3f07cbe558899cefe7","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"e912c7925ca8e57f0cd7b0ea0cc43656177122ef","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"284f10318cd7e048fcf6fad70c38c562520244b8","modified":1585446739000},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"1f550ae2b824a00f71b09e13bce07f0ba05f4d35","modified":1585446739000},{"_id":"public/baidu_urls.txt","hash":"38d97a8c4202d72667df94fe036e64233bd4a8b0","modified":1585793624804},{"_id":"public/sitemap.xml","hash":"d19e47a3674dcce9beaf2deeffc486fa06e736a5","modified":1585793624816},{"_id":"public/baidusitemap.xml","hash":"59111517d1c3d1bc3e9332ff392b8316dc808a8b","modified":1585793624816},{"_id":"public/search.xml","hash":"dbb2b3c0fcf6c8f317c6b222578eda068949f6a9","modified":1585793624816},{"_id":"public/leancloud_counter_security_urls.json","hash":"d7fdd3428f2101a4cffa95d8e21e93260533a538","modified":1585793624816},{"_id":"public/google33ea6e69d32e20f7.html","hash":"7201d4c56ea72b8017497ee52194b544ed813a8c","modified":1585793624833},{"_id":"public/tags/index.html","hash":"1e3cccbd50f1fbfc3de28f0589a650c8a92bd0e3","modified":1585793624833},{"_id":"public/categories/index.html","hash":"82b17f160062a1cdc7b8ea55c44e0b64f205c3f0","modified":1585793624833},{"_id":"public/2019-11-29-leetcode-881-Boats-to-Save-People.html","hash":"db7040307cf8985fb10100a0e5f0063d538e067a","modified":1585793624833},{"_id":"public/2019-11-19-推荐系统.html","hash":"5e9fe75f8fae2171fa0cc4ceabd8d84f04a8260b","modified":1585793624833},{"_id":"public/2019-11-22-leetcode153-154-Find-Minimum-in-Rotated-Sorted-Array-III.html","hash":"6baccb87600aa4a707c0be31bf4c08b34acecfc1","modified":1585793624833},{"_id":"public/2019-11-19-聚类方法.html","hash":"09dbd6da4059f9ac471054e1d5922078e0881f27","modified":1585793624833},{"_id":"public/Redis源码阅读——SDS/2019-03-22-Redis源码阅读——SDS.html","hash":"55bb21994fc16711d25de3d1e9dca110c92327fe","modified":1585793624833},{"_id":"public/ping 问题.html","hash":"d4ed4d2a9ec43a355b8fde1adb5e779db4c8bf7e","modified":1585793624833},{"_id":"public/使用shell脚本遍历redis数据库中的所有kv对.html","hash":"5409056d913ecbb21a33fbdc0bb9985bce6ed7a3","modified":1585793624834},{"_id":"public/使用YCSB 评测redis性能.html","hash":"5d3e1a3f13f365cdfab665013c91e048674a7837","modified":1585793624834},{"_id":"public/apt-get install 失败.html","hash":"d8c3dcad9c02de4be6682280cec998f641486241","modified":1585793624834},{"_id":"public/make学习.html","hash":"d0abf293403acf23331f6b7f071e0c3ae8ac1e42","modified":1585793624834},{"_id":"public/Linux 命令 学习.html","hash":"96549923988271769aa656aab9a1e7e67c724f5f","modified":1585793624834},{"_id":"public/tee命令解析.html","hash":"5a4d7711a3e4162110bae4b24dd380626f4903e5","modified":1585793624834},{"_id":"public/BigdataBench-deploy.html","hash":"a980ec8a39bebb7e8e3f7299ff6cd1059b1a7831","modified":1585793624834},{"_id":"public/图计算常用算法.html","hash":"d92699093c3ef5852dec604e0b84c7327f888aac","modified":1585793624834},{"_id":"public/ceph部署文档.html","hash":"38cac8f97625de2dac98c50606ec9be29a53acd3","modified":1585793624834},{"_id":"public/categories/题解/index.html","hash":"57afd079c05236efc5f89812e2b7fba81dd829cd","modified":1585793624834},{"_id":"public/categories/数据挖掘/index.html","hash":"c74ae4fd4213c80d0f4b02140d66fb2947e384c1","modified":1585793624834},{"_id":"public/categories/deploy/index.html","hash":"131f8cd8664ef1c0ba6975d2ca456193370e57a3","modified":1585793624834},{"_id":"public/categories/Linux/index.html","hash":"ef71df1b807b94f934438de7fb4cc8f435a05b87","modified":1585793624834},{"_id":"public/categories/编程语言/index.html","hash":"9805898b07ac658b74d46d23349f0c0224356099","modified":1585793624835},{"_id":"public/categories/algorithm/index.html","hash":"6e6a84ef791cbad907952736d2ea656ebaff27d1","modified":1585793624835},{"_id":"public/categories/源码阅读/index.html","hash":"e9ac348885eaa8fe6d4522878eb9e0fd311dda88","modified":1585793624835},{"_id":"public/archives/index.html","hash":"a222e8e38d0024b317de09074f7daf452bb15d11","modified":1585793624835},{"_id":"public/archives/page/2/index.html","hash":"ae948f98664921f5125b02a612d8e750ed45297c","modified":1585793624835},{"_id":"public/archives/2018/index.html","hash":"052296c1c8bea95b49d835398566c5a51e1e019b","modified":1585793624835},{"_id":"public/archives/2018/04/index.html","hash":"02d1116f18ec823da159f974ac8abe580a4a0996","modified":1585793624835},{"_id":"public/archives/2018/06/index.html","hash":"2a3e72416c5d7fb6ed096740689ad401a7e4b21e","modified":1585793624835},{"_id":"public/archives/2018/07/index.html","hash":"91e5ddc1881140c1c334fdf99842fcd509e71727","modified":1585793624835},{"_id":"public/archives/2018/10/index.html","hash":"5e94cccb3baa170a5a0625206c9dadde49be6890","modified":1585793624835},{"_id":"public/archives/2019/index.html","hash":"a6e41d118feeefda86203191193aa3cab0d861cf","modified":1585793624835},{"_id":"public/archives/2019/03/index.html","hash":"1a2746ae09ca9958baf81d3314703a04e16bee75","modified":1585793624835},{"_id":"public/archives/2019/11/index.html","hash":"f83887bd70112858a535c8a2dab5a31b0bf3b6b5","modified":1585793624835},{"_id":"public/tags/聚类/index.html","hash":"9172871906c83ffeab545a47756dd376e3c68320","modified":1585793624835},{"_id":"public/tags/K-Means/index.html","hash":"631d17ab74c2d7248a295c1e196a878a68d114b6","modified":1585793624836},{"_id":"public/tags/国科大/index.html","hash":"60353acffdfb54c1eef3392db7521597a402d3ae","modified":1585793624836},{"_id":"public/tags/课程/index.html","hash":"2fa2f1b62a554a861d7eb24ea20d927131bd5765","modified":1585793624836},{"_id":"public/tags/leetcode/index.html","hash":"a40e46a89b02dc04ace33b70f9535037c04f225f","modified":1585793624836},{"_id":"public/tags/数组/index.html","hash":"c51c7420eb5d326afa11a519d56540878964c64b","modified":1585793624836},{"_id":"public/tags/最小值/index.html","hash":"44d64a83ae5fcd2f3c74adc7d01475add375ca93","modified":1585793624836},{"_id":"public/tags/分治/index.html","hash":"a0f3e7e31f65f0738fbad25c0fa0e31397abc6e8","modified":1585793624836},{"_id":"public/tags/二分查找/index.html","hash":"9e2d421f7009c8978f2138214f49f38ac90fb2bc","modified":1585793624836},{"_id":"public/tags/余弦相似度/index.html","hash":"6a0d604a82f5c17862e2e21ddabc9e6104aa3982","modified":1585793624836},{"_id":"public/tags/推荐/index.html","hash":"ef6373880bfa23af38821c4aeda65a7a0a62c92d","modified":1585793624836},{"_id":"public/tags/bigdatabench/index.html","hash":"c7479c90ee53a082c5a6eaeb442c7aeda097c0b3","modified":1585793624836},{"_id":"public/tags/贪心/index.html","hash":"96ee9689a6ffaaf40cb0775a58d9efa769fb44bf","modified":1585793624836},{"_id":"public/tags/ceph/index.html","hash":"0d391055c9fe2f7aa022d79cc9f2beafcba5f4c2","modified":1585793624836},{"_id":"public/tags/Linux/index.html","hash":"f4948bcb90b596c34f8776481445f78053f79363","modified":1585793624836},{"_id":"public/tags/command/index.html","hash":"26f029b99108e561e2e4c9ddd9b074c70790a438","modified":1585793624836},{"_id":"public/tags/运维/index.html","hash":"dc32c4531028ef377aebbef8a7d7742024d4ee9e","modified":1585793624836},{"_id":"public/tags/make/index.html","hash":"2a5c2a29d4a7dacccdc68faba927dbef4eb5d765","modified":1585793624836},{"_id":"public/tags/网络问题/index.html","hash":"83391938fdf1c53864c4a0221ccff7ce537fb75e","modified":1585793624837},{"_id":"public/tags/redis/index.html","hash":"3c8ab0476320c4e807589d832cc11ad61ced76c5","modified":1585793624837},{"_id":"public/tags/benchmark/index.html","hash":"95ca40c1b515a2e57df90e7ff1997695d4efcc60","modified":1585793624837},{"_id":"public/tags/shell/index.html","hash":"37632e264231a256c5d6bfaa390253129f5035dc","modified":1585793624837},{"_id":"public/tags/graph/index.html","hash":"e6fd6b23da2d740e7527571d1adee2f2f7a83636","modified":1585793624837},{"_id":"public/tags/源码阅读/index.html","hash":"67464087c604c829e674cc1850e1fbcd261ffdd0","modified":1585793624837},{"_id":"public/index.html","hash":"5b79c7ce91035d145f8e3f34276dde4156ff391c","modified":1585793624837},{"_id":"public/page/2/index.html","hash":"4a09a6ae0b189d04d5faca5a456fcf98031c07b5","modified":1585793624843},{"_id":"public/robots.txt","hash":"9dfc2b2b719f2dc8955992d034c029828e1da449","modified":1585793624843},{"_id":"public/img/404.jpg","hash":"a9dff120169c4bc46d12116de792011a948938d9","modified":1585793624843},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585793624844},{"_id":"public/img/favicon.png","hash":"9ad0834cb90e0a8ff8ee739e51d8109aceb7cf68","modified":1585793624844},{"_id":"public/img/avatar1.jpg","hash":"97bdf60231df482479d58ad0edb9587b60f4e7ac","modified":1585793624844},{"_id":"public/img/comment_bg.png","hash":"1adfc4ee925fb4f922c24d7774e7c46d940fe31b","modified":1585793624844},{"_id":"public/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1585793624844},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1585793624844},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1585793624844},{"_id":"public/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1585793624844},{"_id":"public/BigdataBench-deploy/runcc.png","hash":"92edff3c535d6744e38fd0b933a5474d768b5ecc","modified":1585793624844},{"_id":"public/img/avatar3.jpg","hash":"d617811dfcf61a5001c2d0fc3332724c78b7252b","modified":1585793625770},{"_id":"public/img/avatar2.jpg","hash":"8ee21186ac6c945554ac87222427790b8e94e88d","modified":1585793625772},{"_id":"public/img/avatar.png","hash":"77f00530b5f24207d00f3e92f9821cc1d4eb3d40","modified":1585793625772},{"_id":"public/img/avatar4.jpg","hash":"8b53ff96c432156b0890135dcdb6e1986a256fb6","modified":1585793625772},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1585793625772},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585793625778},{"_id":"public/js/utils.js","hash":"693e23855afde9c4ccc55244bac1a37bbe78972c","modified":1585793625778},{"_id":"public/css/index.css","hash":"efb74c9ea95bdaaee71e9dcbf8a8f16e922110c1","modified":1585793625778},{"_id":"public/js/main.js","hash":"d2f8926f343791c05d48a3d64e01ec896a6d97e2","modified":1585793625780},{"_id":"public/js/tw_cn.js","hash":"cc26adb3c22983ae23e0b314e0fe3b73dd61432d","modified":1585793625780}],"Category":[{"name":"数据挖掘","_id":"ck8i4ktw30005sghdqn0xmuq6"},{"name":"题解","_id":"ck8i4ktwb000asghduaj13rmq"},{"name":"deploy","_id":"ck8i4ktwk000jsghdf4aibcsn"},{"name":"Linux","_id":"ck8i4ktwy0010sghd2wmjmt9g"},{"name":"编程语言","_id":"ck8i4ktx3001asghdhl5iymoy"},{"name":"algorithm","_id":"ck8i4ktxc001osghdopzautb1"},{"name":"源码阅读","_id":"ck8i4kv2c0030sghdokzh2qwf"}],"Data":[],"Page":[{"_content":"google-site-verification: google33ea6e69d32e20f7.html","source":"google33ea6e69d32e20f7.html","raw":"google-site-verification: google33ea6e69d32e20f7.html","date":"2020-04-01T08:07:58.103Z","updated":"2020-03-29T01:52:19.000Z","path":"google33ea6e69d32e20f7.html","title":"","comments":1,"layout":"page","_id":"ck8i4kthg0000sghdlio0ba40","content":"google-site-verification: google33ea6e69d32e20f7.html","site":{"data":{}},"cover":"https://images.pexels.com/photos/417222/pexels-photo-417222.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":52,"excerpt":"","more":"google-site-verification: google33ea6e69d32e20f7.html"},{"title":"tags","date":"2019-03-10T12:15:52.000Z","type":"tags","top_img":"https://res.cloudinary.com/bravey/image/upload/v1582872964/wallroom-2560x1440-bg-55e56f8.png","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-10 20:15:52\ntype: \"tags\"\ntop_img: https://res.cloudinary.com/bravey/image/upload/v1582872964/wallroom-2560x1440-bg-55e56f8.png\n---\n\n","updated":"2020-03-29T01:52:19.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck8i4ktvx0002sghdddhs6eib","content":"","site":{"data":{}},"cover":"https://images.pexels.com/photos/1285625/pexels-photo-1285625.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":0,"excerpt":"","more":""},{"title":"categories","date":"2019-03-10T12:10:41.000Z","type":"categories","top_img":"https://res.cloudinary.com/bravey/image/upload/v1582872117/books-1204029_1920.jpg","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-10 20:10:41\ntype: \"categories\"\ntop_img: https://res.cloudinary.com/bravey/image/upload/v1582872117/books-1204029_1920.jpg\n---\n\n","updated":"2020-03-29T01:52:19.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck8i4ktw10004sghd3znh4aph","content":"","site":{"data":{}},"cover":"https://images.pexels.com/photos/1285625/pexels-photo-1285625.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":0,"excerpt":"","more":""}],"Post":[{"title":"聚类方法","date":"2019-11-19T07:44:49.000Z","copyright":true,"mathjax":true,"_content":"\n# 聚类方法\n\n聚类属于无监督学习，因为输入的数据是没有标签的，通过算法每个样本自动的划分到相应的簇中。\n\n## K-means\n\nk均值是一种基于形心的技术。给定一个包含n 个数据对象的数据库，以及要生成的簇的数目k，一个划分类的算法将数据对象组织为k 个划分（k≤n），其中每个划分代表一个簇。通常会采用一个划分准则（经常称为相似度函数，similarity function），例如距离dist(i,j)，以便在同一个簇中的对象是“相似的”，而不同簇中的对象是“相异的”。\n\nK-means把簇的形心定义为簇内点的均值，通过贪心的方法不断迭代形心的坐标，直到形心的坐标不再改变而结束迭代。\n\n<!--more-->\n\n### 步骤\n\n算法的步骤为：\n\n- 首先在数据集D中选择k个对象，每个对象代表一个簇的初试均值即形心。\n- 对剩下的对象，根据其与这个k个形心的欧式距离将其分配到距离最近的形心的簇。\n- 完成了分配后重新计算每个簇的均值中心点并更新。\n- 使用更新后的均值中心点，重新分配每一个对象。\n- 不断迭代，直到本轮的中心点与上一轮的相同，即本轮形成的簇与上一轮相同。\n\n### 伪代码\n\n伪代码为：\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/kmeans_code.jpg)\n\n\n\nK-means对离群点敏感，因为当一个离群点被分配到一个簇的时候，可能会严重扭曲簇的均值。\n\nk中心点算法是基于对象的，通过挑选实际的对象来代表簇，其余的对象被分配与其最为相似的代表对象所在的簇。\n\n## 参考\n\n《数据挖掘概念与技术》第3版 第十章聚类分析：基本概念和方法","source":"_posts/2019-11-19-聚类方法.md","raw":"---\ntitle: 聚类方法\ndate: 2019-11-19 15:44:49\ncategories: 数据挖掘\ntags:\n- 聚类\n- K-Means\n- 国科大\n- 课程\ncopyright: true\nmathjax: true\n---\n\n# 聚类方法\n\n聚类属于无监督学习，因为输入的数据是没有标签的，通过算法每个样本自动的划分到相应的簇中。\n\n## K-means\n\nk均值是一种基于形心的技术。给定一个包含n 个数据对象的数据库，以及要生成的簇的数目k，一个划分类的算法将数据对象组织为k 个划分（k≤n），其中每个划分代表一个簇。通常会采用一个划分准则（经常称为相似度函数，similarity function），例如距离dist(i,j)，以便在同一个簇中的对象是“相似的”，而不同簇中的对象是“相异的”。\n\nK-means把簇的形心定义为簇内点的均值，通过贪心的方法不断迭代形心的坐标，直到形心的坐标不再改变而结束迭代。\n\n<!--more-->\n\n### 步骤\n\n算法的步骤为：\n\n- 首先在数据集D中选择k个对象，每个对象代表一个簇的初试均值即形心。\n- 对剩下的对象，根据其与这个k个形心的欧式距离将其分配到距离最近的形心的簇。\n- 完成了分配后重新计算每个簇的均值中心点并更新。\n- 使用更新后的均值中心点，重新分配每一个对象。\n- 不断迭代，直到本轮的中心点与上一轮的相同，即本轮形成的簇与上一轮相同。\n\n### 伪代码\n\n伪代码为：\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/kmeans_code.jpg)\n\n\n\nK-means对离群点敏感，因为当一个离群点被分配到一个簇的时候，可能会严重扭曲簇的均值。\n\nk中心点算法是基于对象的，通过挑选实际的对象来代表簇，其余的对象被分配与其最为相似的代表对象所在的簇。\n\n## 参考\n\n《数据挖掘概念与技术》第3版 第十章聚类分析：基本概念和方法","slug":"2019-11-19-聚类方法","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktvt0001sghdylj29wb4","content":"<h1 id=\"聚类方法\"><a href=\"#聚类方法\" class=\"headerlink\" title=\"聚类方法\"></a>聚类方法</h1><p>聚类属于无监督学习，因为输入的数据是没有标签的，通过算法每个样本自动的划分到相应的簇中。</p>\n<h2 id=\"K-means\"><a href=\"#K-means\" class=\"headerlink\" title=\"K-means\"></a>K-means</h2><p>k均值是一种基于形心的技术。给定一个包含n 个数据对象的数据库，以及要生成的簇的数目k，一个划分类的算法将数据对象组织为k 个划分（k≤n），其中每个划分代表一个簇。通常会采用一个划分准则（经常称为相似度函数，similarity function），例如距离dist(i,j)，以便在同一个簇中的对象是“相似的”，而不同簇中的对象是“相异的”。</p>\n<p>K-means把簇的形心定义为簇内点的均值，通过贪心的方法不断迭代形心的坐标，直到形心的坐标不再改变而结束迭代。</p>\n<a id=\"more\"></a>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>算法的步骤为：</p>\n<ul>\n<li>首先在数据集D中选择k个对象，每个对象代表一个簇的初试均值即形心。</li>\n<li>对剩下的对象，根据其与这个k个形心的欧式距离将其分配到距离最近的形心的簇。</li>\n<li>完成了分配后重新计算每个簇的均值中心点并更新。</li>\n<li>使用更新后的均值中心点，重新分配每一个对象。</li>\n<li>不断迭代，直到本轮的中心点与上一轮的相同，即本轮形成的簇与上一轮相同。</li>\n</ul>\n<h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p>伪代码为：</p>\n<p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/kmeans_code.jpg\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/kmeans_code.jpg\" class=\"lazyload\"></a></p>\n<p>K-means对离群点敏感，因为当一个离群点被分配到一个簇的时候，可能会严重扭曲簇的均值。</p>\n<p>k中心点算法是基于对象的，通过挑选实际的对象来代表簇，其余的对象被分配与其最为相似的代表对象所在的簇。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>《数据挖掘概念与技术》第3版 第十章聚类分析：基本概念和方法</p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":575,"excerpt":"<h1 id=\"聚类方法\"><a href=\"#聚类方法\" class=\"headerlink\" title=\"聚类方法\"></a>聚类方法</h1><p>聚类属于无监督学习，因为输入的数据是没有标签的，通过算法每个样本自动的划分到相应的簇中。</p>\n<h2 id=\"K-means\"><a href=\"#K-means\" class=\"headerlink\" title=\"K-means\"></a>K-means</h2><p>k均值是一种基于形心的技术。给定一个包含n 个数据对象的数据库，以及要生成的簇的数目k，一个划分类的算法将数据对象组织为k 个划分（k≤n），其中每个划分代表一个簇。通常会采用一个划分准则（经常称为相似度函数，similarity function），例如距离dist(i,j)，以便在同一个簇中的对象是“相似的”，而不同簇中的对象是“相异的”。</p>\n<p>K-means把簇的形心定义为簇内点的均值，通过贪心的方法不断迭代形心的坐标，直到形心的坐标不再改变而结束迭代。</p>","more":"<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>算法的步骤为：</p>\n<ul>\n<li>首先在数据集D中选择k个对象，每个对象代表一个簇的初试均值即形心。</li>\n<li>对剩下的对象，根据其与这个k个形心的欧式距离将其分配到距离最近的形心的簇。</li>\n<li>完成了分配后重新计算每个簇的均值中心点并更新。</li>\n<li>使用更新后的均值中心点，重新分配每一个对象。</li>\n<li>不断迭代，直到本轮的中心点与上一轮的相同，即本轮形成的簇与上一轮相同。</li>\n</ul>\n<h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p>伪代码为：</p>\n<p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/kmeans_code.jpg\" alt=\"\"></p>\n<p>K-means对离群点敏感，因为当一个离群点被分配到一个簇的时候，可能会严重扭曲簇的均值。</p>\n<p>k中心点算法是基于对象的，通过挑选实际的对象来代表簇，其余的对象被分配与其最为相似的代表对象所在的簇。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>《数据挖掘概念与技术》第3版 第十章聚类分析：基本概念和方法</p>"},{"title":"leetcode153 154 Find Minimum in Rotated Sorted Array I/II","date":"2019-11-22T13:07:54.000Z","copyright":true,"_content":"\n# leetcode153 154. Find Minimum in Rotated Sorted Array I/II\n\n题目来源[leetcode153](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/) 和[leetcode154](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/) 要求在排序的旋转数组中寻找最小值。最小值可以很简单的遍历一次数组得到，时间复杂度为$O(n)$但是没有用到题目给的性质，所以会超时。\n\n<!--more-->\n\n## 解题思路\n\n### leetcode153 无重复元素\n\n先分析leetcode153中没有重复值的情况，采用二分查找的思路，设输入的数组长度为n表示为$A[n]$,经过观察可以发现pivot将A划分成了两个递增子数组L，R。使用指针p指向A的第一个元素A[0],指针q指向A的最后一个元素$A[n-1]$,使用指针m指向A的中间元素$A[\\frac{n}{2}]$。如果中间元素位于第一个递增数组L，则有关系：A[p]<A[m],A[m]>A[q],此时最小元素在m与q之间，将p移动到m，原来规模为n的问题变成规模为$q-m=\\frac{n}{2}$的子问题。如果中间元素位于第二个递增数组R，则有关系：A[p]>A[m],A[m]<A[q],此时最小元素在p与m之间，将q移动到m，原来规模为n的问题变成规模为$m-p=\\frac{n}{2}$的子问题。直到最后q=p+1时，问题规模下降到2的情况，得到答案最小的元素为q指针指向的元素。可以看到每一次迭代，都会将n规模的问题下降到$\\frac{n}{2}$规模。\n\n### leetcode154 有重复元素\n\n在有重复值的情况下，会出现$A[m]==A[p]$的情况，这个时候是无法判断到底左右两边谁为递增序列。如\n$$\n[2, 2, 2, 2, 1,1,1, 2]\n$$\n这时候的$A[m]==A[3]$与$A[p]==A[0]$是相等的都是2，所以只能把两边的最小值，递归的调用求解出来。\n\n## 复杂度\n\n### leetcode153 无重复元素\n\n可以画出递归图:\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574430318/blog/coding/leetcode_153_reduction_graph.jpg )\n\n用$T(n)​$表示对于一个长度为n的旋转数组进行查找最小值需要的次数，对于每一次迭代都有$T[n]=T[{\\lfloor\\frac{n}{2}\\rfloor]+C}​$,C是一个常数。所以有\n$$\n\\begin{split}\n\nT(n)&=T[{\\lfloor\\frac{n}{2}\\rfloor]+C}\\\\\n\n&=T[{\\lfloor\\frac{n}{2^2}\\rfloor]+2C}\\\\\n\n&=T[{\\lfloor\\frac{n}{2^3}\\rfloor]+3C}\\\\\n\n\\dots\\\\\n\n&=T[{\\lfloor\\frac{n}{2^k}\\rfloor]+kC}\\\\\n\n\\end{split}\n$$\n\n设在第k次迭代的时候长度下降到2，  此时有$\\frac{n}{2^k}=2$解出$k=\\log_2n-1$，所以有$T[n]=(\\log_2n-1)C=O(\\log_2n)$，所以算法的时间复杂度为$O(logn)$\n\n### leetcode154 有重复元素\n\n最坏的情况，当出现$A[m]==A[p]$的情况的时候有递推表达式：\n$$\n\\begin{split}\nT(n)&=2T[{\\lfloor\\frac{n}{2}\\rfloor]+C}\\\\\n&=2^2T[{\\lfloor\\frac{n}{2^2}\\rfloor]+C+2C}\\\\\n&=2^3T[{\\lfloor\\frac{n}{2^3}\\rfloor]+C+2C+2C}\\\\\n\\dots\\\\\n&=2^kT[{\\lfloor\\frac{n}{2^k}\\rfloor]+(2k-1)C}\\\\\n\\end{split} \n$$\n设当第k次的时候下降到n=1，因此有$\\frac{n}{2^k}=1$推出$k=\\log_2n$所以有$T(n)=n+(2\\log_2n-1)C=O(n)$,所以时间复杂度为O(n)。如果没有出现$A[m]==A[p]$的情况则和无重复值的情况一样，时间复杂度为$O(n)$\n\n## 代码\n\n使用迭代和循环两种方式实现。 循环的时候比较的选择？mid是该和左边还是右边比呢？我自己写的是和左边的比，但是我看leetcode的题解都是和右边的比。\n\n### leetcode153 无重复元素\n\n```c++\n/*leetcode#153\nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/*/\n#include<iostream>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<utility>\n#include <string>\n#include <stdio.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        int len = nums.size();\n        if(len==1 || nums[0]<nums[len-1]) return nums[0];//长度为1的时候或者不旋转的时候直接返回\n        // return dc_find(nums, 0, len-1);\n        return loop_find(nums, 0, len-1);\n    }\nprivate:\n\tint dc_find(vector<int>& nums, int lo, int hi){\n\t\tif((hi -lo)==1) return nums[hi];\n\t\tint ans = 0;\n\t\tint mid = lo + (hi -lo)/2;\n\t\tif(nums[mid]>nums[lo]) ans = dc_find(nums, mid, hi);\n\t\telse ans = dc_find(nums, lo, mid);\n\t\treturn ans;\n\t}\n\tint loop_find(vector<int>& nums, int lo, int hi){\n\t\tint ans = 0;\n\t\tint mid = 0;\n\t\twhile(lo<hi){\n\t\t\tif((hi-lo)==1) {\n\t\t\t\tans = nums[hi];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmid = lo + (hi -lo)/2;\n\t\t\tif(nums[mid]>nums[lo]) lo = mid ;\n\t\t\telse hi = mid ;\n\t\t}\n\t\treturn ans;\n\t}\n};\n\nint main(int argc, char const *argv[])\n{\n\t/* code */\n\tios::sync_with_stdio(false);\n\tstd::vector<int> vec = {3, 4, 5, 1, 2};\n\tSolution Sol;\n\tcout<<Sol.findMin(vec)<<endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### leetcode154 有重复元素\n\n```c++\n/*\nleetcode#154\nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/\n*/\n#include<iostream>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<utility>\n#include <string>\n#include <stdio.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        int len = nums.size();\n        if(len==1 || nums[0]<nums[len-1]) return nums[0];\n        return dc_find(nums, 0, len-1);\n    }\nprivate:\n\tint dc_find(vector<int>& nums, int lo, int hi){\n\t\tif((hi -lo)==1) return min(nums[lo], nums[hi]);// 与无重复值的情况不同\n\t\tint ans = 0;\n\t\tint mid = lo + (hi -lo)/2;\n\t\tif(nums[mid]>nums[lo]) ans = dc_find(nums, mid, hi);\n\t\telse if (nums[mid]==nums[lo]){\n\t\t\tans = min(dc_find(nums, lo, mid), dc_find(nums, mid, hi));\n\t\t}\n\t\telse ans = dc_find(nums, lo, mid);\n\t\treturn ans;\n\t}\n    \n};\n\nint main(int argc, char const *argv[])\n{\n\t/* code */\n\tios::sync_with_stdio(false);\n\tstd::vector<int> vec = {2, 2, 2, 1, 1 ,2 };\n\tSolution Sol;\n\tcout<<Sol.findMin(vec)<<endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n需要注意的是：`if((hi -lo)==1) return min(nums[lo], nums[hi]);` 递归的退出条件， 与无重复值的情况不同是可能出现只有两个值的时候最小值在左边的情况，所以需要比较最小值，而不是直接返回第二个。比如$[2,3,2]$ 的情况，划分为两个子问题$[2, 3] 与[3,2]$第一个子问题的时候最小值在第一个元素。","source":"_posts/2019-11-22-leetcode153-154-Find-Minimum-in-Rotated-Sorted-Array-III.md","raw":"---\ntitle: leetcode153 154 Find Minimum in Rotated Sorted Array I/II\ndate: 2019-11-22 21:07:54\ncategories: 题解\ntags:\n- leetcode\n- 数组\n- 最小值\n- 分治\n- 二分查找\ncopyright: true\n---\n\n# leetcode153 154. Find Minimum in Rotated Sorted Array I/II\n\n题目来源[leetcode153](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/) 和[leetcode154](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/) 要求在排序的旋转数组中寻找最小值。最小值可以很简单的遍历一次数组得到，时间复杂度为$O(n)$但是没有用到题目给的性质，所以会超时。\n\n<!--more-->\n\n## 解题思路\n\n### leetcode153 无重复元素\n\n先分析leetcode153中没有重复值的情况，采用二分查找的思路，设输入的数组长度为n表示为$A[n]$,经过观察可以发现pivot将A划分成了两个递增子数组L，R。使用指针p指向A的第一个元素A[0],指针q指向A的最后一个元素$A[n-1]$,使用指针m指向A的中间元素$A[\\frac{n}{2}]$。如果中间元素位于第一个递增数组L，则有关系：A[p]<A[m],A[m]>A[q],此时最小元素在m与q之间，将p移动到m，原来规模为n的问题变成规模为$q-m=\\frac{n}{2}$的子问题。如果中间元素位于第二个递增数组R，则有关系：A[p]>A[m],A[m]<A[q],此时最小元素在p与m之间，将q移动到m，原来规模为n的问题变成规模为$m-p=\\frac{n}{2}$的子问题。直到最后q=p+1时，问题规模下降到2的情况，得到答案最小的元素为q指针指向的元素。可以看到每一次迭代，都会将n规模的问题下降到$\\frac{n}{2}$规模。\n\n### leetcode154 有重复元素\n\n在有重复值的情况下，会出现$A[m]==A[p]$的情况，这个时候是无法判断到底左右两边谁为递增序列。如\n$$\n[2, 2, 2, 2, 1,1,1, 2]\n$$\n这时候的$A[m]==A[3]$与$A[p]==A[0]$是相等的都是2，所以只能把两边的最小值，递归的调用求解出来。\n\n## 复杂度\n\n### leetcode153 无重复元素\n\n可以画出递归图:\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574430318/blog/coding/leetcode_153_reduction_graph.jpg )\n\n用$T(n)​$表示对于一个长度为n的旋转数组进行查找最小值需要的次数，对于每一次迭代都有$T[n]=T[{\\lfloor\\frac{n}{2}\\rfloor]+C}​$,C是一个常数。所以有\n$$\n\\begin{split}\n\nT(n)&=T[{\\lfloor\\frac{n}{2}\\rfloor]+C}\\\\\n\n&=T[{\\lfloor\\frac{n}{2^2}\\rfloor]+2C}\\\\\n\n&=T[{\\lfloor\\frac{n}{2^3}\\rfloor]+3C}\\\\\n\n\\dots\\\\\n\n&=T[{\\lfloor\\frac{n}{2^k}\\rfloor]+kC}\\\\\n\n\\end{split}\n$$\n\n设在第k次迭代的时候长度下降到2，  此时有$\\frac{n}{2^k}=2$解出$k=\\log_2n-1$，所以有$T[n]=(\\log_2n-1)C=O(\\log_2n)$，所以算法的时间复杂度为$O(logn)$\n\n### leetcode154 有重复元素\n\n最坏的情况，当出现$A[m]==A[p]$的情况的时候有递推表达式：\n$$\n\\begin{split}\nT(n)&=2T[{\\lfloor\\frac{n}{2}\\rfloor]+C}\\\\\n&=2^2T[{\\lfloor\\frac{n}{2^2}\\rfloor]+C+2C}\\\\\n&=2^3T[{\\lfloor\\frac{n}{2^3}\\rfloor]+C+2C+2C}\\\\\n\\dots\\\\\n&=2^kT[{\\lfloor\\frac{n}{2^k}\\rfloor]+(2k-1)C}\\\\\n\\end{split} \n$$\n设当第k次的时候下降到n=1，因此有$\\frac{n}{2^k}=1$推出$k=\\log_2n$所以有$T(n)=n+(2\\log_2n-1)C=O(n)$,所以时间复杂度为O(n)。如果没有出现$A[m]==A[p]$的情况则和无重复值的情况一样，时间复杂度为$O(n)$\n\n## 代码\n\n使用迭代和循环两种方式实现。 循环的时候比较的选择？mid是该和左边还是右边比呢？我自己写的是和左边的比，但是我看leetcode的题解都是和右边的比。\n\n### leetcode153 无重复元素\n\n```c++\n/*leetcode#153\nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/*/\n#include<iostream>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<utility>\n#include <string>\n#include <stdio.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        int len = nums.size();\n        if(len==1 || nums[0]<nums[len-1]) return nums[0];//长度为1的时候或者不旋转的时候直接返回\n        // return dc_find(nums, 0, len-1);\n        return loop_find(nums, 0, len-1);\n    }\nprivate:\n\tint dc_find(vector<int>& nums, int lo, int hi){\n\t\tif((hi -lo)==1) return nums[hi];\n\t\tint ans = 0;\n\t\tint mid = lo + (hi -lo)/2;\n\t\tif(nums[mid]>nums[lo]) ans = dc_find(nums, mid, hi);\n\t\telse ans = dc_find(nums, lo, mid);\n\t\treturn ans;\n\t}\n\tint loop_find(vector<int>& nums, int lo, int hi){\n\t\tint ans = 0;\n\t\tint mid = 0;\n\t\twhile(lo<hi){\n\t\t\tif((hi-lo)==1) {\n\t\t\t\tans = nums[hi];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmid = lo + (hi -lo)/2;\n\t\t\tif(nums[mid]>nums[lo]) lo = mid ;\n\t\t\telse hi = mid ;\n\t\t}\n\t\treturn ans;\n\t}\n};\n\nint main(int argc, char const *argv[])\n{\n\t/* code */\n\tios::sync_with_stdio(false);\n\tstd::vector<int> vec = {3, 4, 5, 1, 2};\n\tSolution Sol;\n\tcout<<Sol.findMin(vec)<<endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### leetcode154 有重复元素\n\n```c++\n/*\nleetcode#154\nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/\n*/\n#include<iostream>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<utility>\n#include <string>\n#include <stdio.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        int len = nums.size();\n        if(len==1 || nums[0]<nums[len-1]) return nums[0];\n        return dc_find(nums, 0, len-1);\n    }\nprivate:\n\tint dc_find(vector<int>& nums, int lo, int hi){\n\t\tif((hi -lo)==1) return min(nums[lo], nums[hi]);// 与无重复值的情况不同\n\t\tint ans = 0;\n\t\tint mid = lo + (hi -lo)/2;\n\t\tif(nums[mid]>nums[lo]) ans = dc_find(nums, mid, hi);\n\t\telse if (nums[mid]==nums[lo]){\n\t\t\tans = min(dc_find(nums, lo, mid), dc_find(nums, mid, hi));\n\t\t}\n\t\telse ans = dc_find(nums, lo, mid);\n\t\treturn ans;\n\t}\n    \n};\n\nint main(int argc, char const *argv[])\n{\n\t/* code */\n\tios::sync_with_stdio(false);\n\tstd::vector<int> vec = {2, 2, 2, 1, 1 ,2 };\n\tSolution Sol;\n\tcout<<Sol.findMin(vec)<<endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n需要注意的是：`if((hi -lo)==1) return min(nums[lo], nums[hi]);` 递归的退出条件， 与无重复值的情况不同是可能出现只有两个值的时候最小值在左边的情况，所以需要比较最小值，而不是直接返回第二个。比如$[2,3,2]$ 的情况，划分为两个子问题$[2, 3] 与[3,2]$第一个子问题的时候最小值在第一个元素。","slug":"2019-11-22-leetcode153-154-Find-Minimum-in-Rotated-Sorted-Array-III","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktvz0003sghd1jigkjny","content":"<h1 id=\"leetcode153-154-Find-Minimum-in-Rotated-Sorted-Array-I-II\"><a href=\"#leetcode153-154-Find-Minimum-in-Rotated-Sorted-Array-I-II\" class=\"headerlink\" title=\"leetcode153 154. Find Minimum in Rotated Sorted Array I/II\"></a>leetcode153 154. Find Minimum in Rotated Sorted Array I/II</h1><p>题目来源<a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/\" target=\"_blank\" rel=\"noopener\">leetcode153</a> 和<a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/\" target=\"_blank\" rel=\"noopener\">leetcode154</a> 要求在排序的旋转数组中寻找最小值。最小值可以很简单的遍历一次数组得到，时间复杂度为$O(n)$但是没有用到题目给的性质，所以会超时。</p>\n<a id=\"more\"></a>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"leetcode153-无重复元素\"><a href=\"#leetcode153-无重复元素\" class=\"headerlink\" title=\"leetcode153 无重复元素\"></a>leetcode153 无重复元素</h3><p>先分析leetcode153中没有重复值的情况，采用二分查找的思路，设输入的数组长度为n表示为$A[n]$,经过观察可以发现pivot将A划分成了两个递增子数组L，R。使用指针p指向A的第一个元素A[0],指针q指向A的最后一个元素$A[n-1]$,使用指针m指向A的中间元素$A[\\frac{n}{2}]$。如果中间元素位于第一个递增数组L，则有关系：A[p]<a[m],a[m]>A[q],此时最小元素在m与q之间，将p移动到m，原来规模为n的问题变成规模为$q-m=\\frac{n}{2}$的子问题。如果中间元素位于第二个递增数组R，则有关系：A[p]&gt;A[m],A[m]&lt;A[q],此时最小元素在p与m之间，将q移动到m，原来规模为n的问题变成规模为$m-p=\\frac{n}{2}$的子问题。直到最后q=p+1时，问题规模下降到2的情况，得到答案最小的元素为q指针指向的元素。可以看到每一次迭代，都会将n规模的问题下降到$\\frac{n}{2}$规模。</a[m],a[m]></p>\n<h3 id=\"leetcode154-有重复元素\"><a href=\"#leetcode154-有重复元素\" class=\"headerlink\" title=\"leetcode154 有重复元素\"></a>leetcode154 有重复元素</h3><p>在有重复值的情况下，会出现$A[m]==A[p]$的情况，这个时候是无法判断到底左右两边谁为递增序列。如</p>\n<script type=\"math/tex; mode=display\">\n[2, 2, 2, 2, 1,1,1, 2]</script><p>这时候的$A[m]==A[3]$与$A[p]==A[0]$是相等的都是2，所以只能把两边的最小值，递归的调用求解出来。</p>\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><h3 id=\"leetcode153-无重复元素-1\"><a href=\"#leetcode153-无重复元素-1\" class=\"headerlink\" title=\"leetcode153 无重复元素\"></a>leetcode153 无重复元素</h3><p>可以画出递归图:</p>\n<p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1574430318/blog/coding/leetcode_153_reduction_graph.jpg\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1574430318/blog/coding/leetcode_153_reduction_graph.jpg\" class=\"lazyload\"></a></p>\n<p>用$T(n)​$表示对于一个长度为n的旋转数组进行查找最小值需要的次数，对于每一次迭代都有$T[n]=T[{\\lfloor\\frac{n}{2}\\rfloor]+C}​$,C是一个常数。所以有</p>\n<script type=\"math/tex; mode=display\">\n\\begin{split}\n\nT(n)&=T[{\\lfloor\\frac{n}{2}\\rfloor]+C}\\\\\n\n&=T[{\\lfloor\\frac{n}{2^2}\\rfloor]+2C}\\\\\n\n&=T[{\\lfloor\\frac{n}{2^3}\\rfloor]+3C}\\\\\n\n\\dots\\\\\n\n&=T[{\\lfloor\\frac{n}{2^k}\\rfloor]+kC}\\\\\n\n\\end{split}</script><p>设在第k次迭代的时候长度下降到2，  此时有$\\frac{n}{2^k}=2$解出$k=\\log_2n-1$，所以有$T[n]=(\\log_2n-1)C=O(\\log_2n)$，所以算法的时间复杂度为$O(logn)$</p>\n<h3 id=\"leetcode154-有重复元素-1\"><a href=\"#leetcode154-有重复元素-1\" class=\"headerlink\" title=\"leetcode154 有重复元素\"></a>leetcode154 有重复元素</h3><p>最坏的情况，当出现$A[m]==A[p]$的情况的时候有递推表达式：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{split}\nT(n)&=2T[{\\lfloor\\frac{n}{2}\\rfloor]+C}\\\\\n&=2^2T[{\\lfloor\\frac{n}{2^2}\\rfloor]+C+2C}\\\\\n&=2^3T[{\\lfloor\\frac{n}{2^3}\\rfloor]+C+2C+2C}\\\\\n\\dots\\\\\n&=2^kT[{\\lfloor\\frac{n}{2^k}\\rfloor]+(2k-1)C}\\\\\n\\end{split}</script><p>设当第k次的时候下降到n=1，因此有$\\frac{n}{2^k}=1$推出$k=\\log_2n$所以有$T(n)=n+(2\\log_2n-1)C=O(n)$,所以时间复杂度为O(n)。如果没有出现$A[m]==A[p]$的情况则和无重复值的情况一样，时间复杂度为$O(n)$</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>使用迭代和循环两种方式实现。 循环的时候比较的选择？mid是该和左边还是右边比呢？我自己写的是和左边的比，但是我看leetcode的题解都是和右边的比。</p>\n<h3 id=\"leetcode153-无重复元素-2\"><a href=\"#leetcode153-无重复元素-2\" class=\"headerlink\" title=\"leetcode153 无重复元素\"></a>leetcode153 无重复元素</h3><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c++</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*leetcode#153</span></span><br><span class=\"line\"><span class=\"comment\">https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">1</span> || nums[<span class=\"number\">0</span>]&lt;nums[len<span class=\"number\">-1</span>]) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];<span class=\"comment\">//长度为1的时候或者不旋转的时候直接返回</span></span><br><span class=\"line\">        <span class=\"comment\">// return dc_find(nums, 0, len-1);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> loop_find(nums, <span class=\"number\">0</span>, len<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dc_find</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((hi -lo)==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[hi];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = lo + (hi -lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nums[mid]&gt;nums[lo]) ans = dc_find(nums, mid, hi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ans = dc_find(nums, lo, mid);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">loop_find</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(lo&lt;hi)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((hi-lo)==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tans = nums[hi];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmid = lo + (hi -lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(nums[mid]&gt;nums[lo]) lo = mid ;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> hi = mid ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* code */</span></span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec = &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">\tSolution Sol;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;Sol.findMin(vec)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"leetcode154-有重复元素-2\"><a href=\"#leetcode154-有重复元素-2\" class=\"headerlink\" title=\"leetcode154 有重复元素\"></a>leetcode154 有重复元素</h3><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c++</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">leetcode#154</span></span><br><span class=\"line\"><span class=\"comment\">https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">1</span> || nums[<span class=\"number\">0</span>]&lt;nums[len<span class=\"number\">-1</span>]) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dc_find(nums, <span class=\"number\">0</span>, len<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dc_find</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((hi -lo)==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(nums[lo], nums[hi]);<span class=\"comment\">// 与无重复值的情况不同</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = lo + (hi -lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nums[mid]&gt;nums[lo]) ans = dc_find(nums, mid, hi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid]==nums[lo])&#123;</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">min</span>(dc_find(nums, lo, mid), dc_find(nums, mid, hi));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ans = dc_find(nums, lo, mid);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* code */</span></span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec = &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">\tSolution Sol;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;Sol.findMin(vec)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>需要注意的是：<code>if((hi -lo)==1) return min(nums[lo], nums[hi]);</code> 递归的退出条件， 与无重复值的情况不同是可能出现只有两个值的时候最小值在左边的情况，所以需要比较最小值，而不是直接返回第二个。比如$[2,3,2]$ 的情况，划分为两个子问题$[2, 3] 与[3,2]$第一个子问题的时候最小值在第一个元素。</p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/71104/utah-mountain-biking-bike-biking-71104.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":4138,"excerpt":"<h1 id=\"leetcode153-154-Find-Minimum-in-Rotated-Sorted-Array-I-II\"><a href=\"#leetcode153-154-Find-Minimum-in-Rotated-Sorted-Array-I-II\" class=\"headerlink\" title=\"leetcode153 154. Find Minimum in Rotated Sorted Array I/II\"></a>leetcode153 154. Find Minimum in Rotated Sorted Array I/II</h1><p>题目来源<a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/\" target=\"_blank\" rel=\"noopener\">leetcode153</a> 和<a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/\" target=\"_blank\" rel=\"noopener\">leetcode154</a> 要求在排序的旋转数组中寻找最小值。最小值可以很简单的遍历一次数组得到，时间复杂度为$O(n)$但是没有用到题目给的性质，所以会超时。</p>","more":"<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"leetcode153-无重复元素\"><a href=\"#leetcode153-无重复元素\" class=\"headerlink\" title=\"leetcode153 无重复元素\"></a>leetcode153 无重复元素</h3><p>先分析leetcode153中没有重复值的情况，采用二分查找的思路，设输入的数组长度为n表示为$A[n]$,经过观察可以发现pivot将A划分成了两个递增子数组L，R。使用指针p指向A的第一个元素A[0],指针q指向A的最后一个元素$A[n-1]$,使用指针m指向A的中间元素$A[\\frac{n}{2}]$。如果中间元素位于第一个递增数组L，则有关系：A[p]<a[m],a[m]>A[q],此时最小元素在m与q之间，将p移动到m，原来规模为n的问题变成规模为$q-m=\\frac{n}{2}$的子问题。如果中间元素位于第二个递增数组R，则有关系：A[p]&gt;A[m],A[m]&lt;A[q],此时最小元素在p与m之间，将q移动到m，原来规模为n的问题变成规模为$m-p=\\frac{n}{2}$的子问题。直到最后q=p+1时，问题规模下降到2的情况，得到答案最小的元素为q指针指向的元素。可以看到每一次迭代，都会将n规模的问题下降到$\\frac{n}{2}$规模。</a[m],a[m]></p>\n<h3 id=\"leetcode154-有重复元素\"><a href=\"#leetcode154-有重复元素\" class=\"headerlink\" title=\"leetcode154 有重复元素\"></a>leetcode154 有重复元素</h3><p>在有重复值的情况下，会出现$A[m]==A[p]$的情况，这个时候是无法判断到底左右两边谁为递增序列。如</p>\n<script type=\"math/tex; mode=display\">\n[2, 2, 2, 2, 1,1,1, 2]</script><p>这时候的$A[m]==A[3]$与$A[p]==A[0]$是相等的都是2，所以只能把两边的最小值，递归的调用求解出来。</p>\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><h3 id=\"leetcode153-无重复元素-1\"><a href=\"#leetcode153-无重复元素-1\" class=\"headerlink\" title=\"leetcode153 无重复元素\"></a>leetcode153 无重复元素</h3><p>可以画出递归图:</p>\n<p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1574430318/blog/coding/leetcode_153_reduction_graph.jpg\" alt=\"\"></p>\n<p>用$T(n)​$表示对于一个长度为n的旋转数组进行查找最小值需要的次数，对于每一次迭代都有$T[n]=T[{\\lfloor\\frac{n}{2}\\rfloor]+C}​$,C是一个常数。所以有</p>\n<script type=\"math/tex; mode=display\">\n\\begin{split}\n\nT(n)&=T[{\\lfloor\\frac{n}{2}\\rfloor]+C}\\\\\n\n&=T[{\\lfloor\\frac{n}{2^2}\\rfloor]+2C}\\\\\n\n&=T[{\\lfloor\\frac{n}{2^3}\\rfloor]+3C}\\\\\n\n\\dots\\\\\n\n&=T[{\\lfloor\\frac{n}{2^k}\\rfloor]+kC}\\\\\n\n\\end{split}</script><p>设在第k次迭代的时候长度下降到2，  此时有$\\frac{n}{2^k}=2$解出$k=\\log_2n-1$，所以有$T[n]=(\\log_2n-1)C=O(\\log_2n)$，所以算法的时间复杂度为$O(logn)$</p>\n<h3 id=\"leetcode154-有重复元素-1\"><a href=\"#leetcode154-有重复元素-1\" class=\"headerlink\" title=\"leetcode154 有重复元素\"></a>leetcode154 有重复元素</h3><p>最坏的情况，当出现$A[m]==A[p]$的情况的时候有递推表达式：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{split}\nT(n)&=2T[{\\lfloor\\frac{n}{2}\\rfloor]+C}\\\\\n&=2^2T[{\\lfloor\\frac{n}{2^2}\\rfloor]+C+2C}\\\\\n&=2^3T[{\\lfloor\\frac{n}{2^3}\\rfloor]+C+2C+2C}\\\\\n\\dots\\\\\n&=2^kT[{\\lfloor\\frac{n}{2^k}\\rfloor]+(2k-1)C}\\\\\n\\end{split}</script><p>设当第k次的时候下降到n=1，因此有$\\frac{n}{2^k}=1$推出$k=\\log_2n$所以有$T(n)=n+(2\\log_2n-1)C=O(n)$,所以时间复杂度为O(n)。如果没有出现$A[m]==A[p]$的情况则和无重复值的情况一样，时间复杂度为$O(n)$</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>使用迭代和循环两种方式实现。 循环的时候比较的选择？mid是该和左边还是右边比呢？我自己写的是和左边的比，但是我看leetcode的题解都是和右边的比。</p>\n<h3 id=\"leetcode153-无重复元素-2\"><a href=\"#leetcode153-无重复元素-2\" class=\"headerlink\" title=\"leetcode153 无重复元素\"></a>leetcode153 无重复元素</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*leetcode#153</span></span><br><span class=\"line\"><span class=\"comment\">https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">1</span> || nums[<span class=\"number\">0</span>]&lt;nums[len<span class=\"number\">-1</span>]) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];<span class=\"comment\">//长度为1的时候或者不旋转的时候直接返回</span></span><br><span class=\"line\">        <span class=\"comment\">// return dc_find(nums, 0, len-1);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> loop_find(nums, <span class=\"number\">0</span>, len<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dc_find</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((hi -lo)==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[hi];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = lo + (hi -lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nums[mid]&gt;nums[lo]) ans = dc_find(nums, mid, hi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ans = dc_find(nums, lo, mid);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">loop_find</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(lo&lt;hi)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((hi-lo)==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tans = nums[hi];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmid = lo + (hi -lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(nums[mid]&gt;nums[lo]) lo = mid ;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> hi = mid ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* code */</span></span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec = &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">\tSolution Sol;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;Sol.findMin(vec)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"leetcode154-有重复元素-2\"><a href=\"#leetcode154-有重复元素-2\" class=\"headerlink\" title=\"leetcode154 有重复元素\"></a>leetcode154 有重复元素</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">leetcode#154</span></span><br><span class=\"line\"><span class=\"comment\">https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">1</span> || nums[<span class=\"number\">0</span>]&lt;nums[len<span class=\"number\">-1</span>]) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dc_find(nums, <span class=\"number\">0</span>, len<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dc_find</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((hi -lo)==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(nums[lo], nums[hi]);<span class=\"comment\">// 与无重复值的情况不同</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = lo + (hi -lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nums[mid]&gt;nums[lo]) ans = dc_find(nums, mid, hi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid]==nums[lo])&#123;</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">min</span>(dc_find(nums, lo, mid), dc_find(nums, mid, hi));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ans = dc_find(nums, lo, mid);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* code */</span></span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec = &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span> ,<span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">\tSolution Sol;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;Sol.findMin(vec)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是：<code>if((hi -lo)==1) return min(nums[lo], nums[hi]);</code> 递归的退出条件， 与无重复值的情况不同是可能出现只有两个值的时候最小值在左边的情况，所以需要比较最小值，而不是直接返回第二个。比如$[2,3,2]$ 的情况，划分为两个子问题$[2, 3] 与[3,2]$第一个子问题的时候最小值在第一个元素。</p>"},{"title":"推荐系统","date":"2019-11-19T08:27:02.000Z","copyright":true,"mathjax":true,"_content":"\n# 推荐系统\n\n## 定义\n\n推荐的基本思路是根据历史数据比如用户以往的喜好或者相似用户的喜好来预测用户未来的喜好。基本假设是：（1）用户的喜好是会保持的并且随着时间而缓慢改变。（2）拥有相同品味的用户对与一个项目的打分也是相似的。因此可以根据以往的历史数据来进行推荐。\n\n与搜索的不同：搜索的数据不是根据用户的资料而定制的，给出的答案是与搜素查询语句相关联的结果。\n\n<!--more-->\n\n## 推荐算法\n\n### 基于内容的方法\n\n基于内容的方法基于这样一个事实：一个用户的兴趣应该和被推荐物品的描述想匹配。核心思路是找到用户资料与物品之间的相似度，推荐相似度高的物品。\n\n步骤为：\n\n- 描述将被推荐的物品I\n- 建立用户个人资料U来描述用户喜欢的物品\n- 比较物品和用户个人资料来决定推荐的物品\n\n用户个人资料与物品的描述可以根据关键词进行向量化。使用例如TF-IDF的方法将物品与个人资料向量话后，就可以计算两者的相似度了。\n\n#### 余弦相似度\n\n使用预先相似度计算这两个向量的相似度。对与两个n维向量X和Y其余弦相似度为：\n$$\nsim(X,Y)=\\dfrac{X\\cdot Y}{||X||\\times ||Y||}\n$$\n分子是点乘，$||X||=\\sqrt {x_1^2+x_2^2+\\dots+x_n^2}$ 是向量的欧几里得范数，也就是向量的长度。\n\n### 协同过滤算法\n\n协同过滤Collaborative Filtering有两中假设\n\n- 基于用户的协同过滤：假设之前对各物品打分相似的用户对于一个新的物品的打分也是相似的\n- 基于物品的协同过滤：假设两个物品的用户打分是相似的，那么一个新用户对二者的打分也是相似的。\n\n算法的步骤是：\n\n- 对所有的用户或物品根据他们与当前的用户或物品的相似度来进行赋权。\n- 选择相邻的用户或者物品的一个自己作为推荐\n- 对于一个用户对一个具体的物品的打分，使用相邻的用户对该物品（或者与该物品相似物品）的打分来预测。\n- 推荐拥有最高预测打分值的物品。\n\n用户/物品之间的相似度可以用余弦相似度或者皮尔森相关系数。\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/correlation_coefficient.jpg)\n\n最终的打分的预测更新为：\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/update_rating.jpg)\n\n用户u对物品i的打分有原来的该用户的平均打分$\\bar r_u$与和该用户最相似的用户一起决定。\n\n## 例子\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_1.jpg)\n\n为了预测Jane对Aladdin的打分，第一步首先计算每个用户对电影的平均打分。第二步计算其他4个用户与Jane 的相似度，使用的是余弦相似度并且其他用户对Aladdin的打分不算进去，因此用的是除了Aladdin外的3部电影来计算的。计算出来选择与Jane最相似的2个用户Joe、Jorge。\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_2.jpg)\n\n根据前面两部计算的结果计算Jane对Aladdin的打分。\n\n## 推荐系统的评测\n\n主要使用精确率，召回率，F1-Score3个指标来进行评价。\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/presicion_recall.jpg)\n\nF1-Score的计算方式为：\n$$\nF1-Score = \\dfrac{2Precison\\times Recall}{Precision+Recall}\n$$\n精确率表示所有相关的物品中被推荐出来的比例，召回率表示所有推荐的物品中实际相关的比例，F1-Score则是二者的总体评价。","source":"_posts/2019-11-19-推荐系统.md","raw":"---\ntitle: 推荐系统\ndate: 2019-11-19 16:27:02\ncategories: 数据挖掘\ntags:\n- 国科大\n- 课程\n- 余弦相似度\n- 推荐\ncopyright: true\nmathjax: true\n---\n\n# 推荐系统\n\n## 定义\n\n推荐的基本思路是根据历史数据比如用户以往的喜好或者相似用户的喜好来预测用户未来的喜好。基本假设是：（1）用户的喜好是会保持的并且随着时间而缓慢改变。（2）拥有相同品味的用户对与一个项目的打分也是相似的。因此可以根据以往的历史数据来进行推荐。\n\n与搜索的不同：搜索的数据不是根据用户的资料而定制的，给出的答案是与搜素查询语句相关联的结果。\n\n<!--more-->\n\n## 推荐算法\n\n### 基于内容的方法\n\n基于内容的方法基于这样一个事实：一个用户的兴趣应该和被推荐物品的描述想匹配。核心思路是找到用户资料与物品之间的相似度，推荐相似度高的物品。\n\n步骤为：\n\n- 描述将被推荐的物品I\n- 建立用户个人资料U来描述用户喜欢的物品\n- 比较物品和用户个人资料来决定推荐的物品\n\n用户个人资料与物品的描述可以根据关键词进行向量化。使用例如TF-IDF的方法将物品与个人资料向量话后，就可以计算两者的相似度了。\n\n#### 余弦相似度\n\n使用预先相似度计算这两个向量的相似度。对与两个n维向量X和Y其余弦相似度为：\n$$\nsim(X,Y)=\\dfrac{X\\cdot Y}{||X||\\times ||Y||}\n$$\n分子是点乘，$||X||=\\sqrt {x_1^2+x_2^2+\\dots+x_n^2}$ 是向量的欧几里得范数，也就是向量的长度。\n\n### 协同过滤算法\n\n协同过滤Collaborative Filtering有两中假设\n\n- 基于用户的协同过滤：假设之前对各物品打分相似的用户对于一个新的物品的打分也是相似的\n- 基于物品的协同过滤：假设两个物品的用户打分是相似的，那么一个新用户对二者的打分也是相似的。\n\n算法的步骤是：\n\n- 对所有的用户或物品根据他们与当前的用户或物品的相似度来进行赋权。\n- 选择相邻的用户或者物品的一个自己作为推荐\n- 对于一个用户对一个具体的物品的打分，使用相邻的用户对该物品（或者与该物品相似物品）的打分来预测。\n- 推荐拥有最高预测打分值的物品。\n\n用户/物品之间的相似度可以用余弦相似度或者皮尔森相关系数。\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/correlation_coefficient.jpg)\n\n最终的打分的预测更新为：\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/update_rating.jpg)\n\n用户u对物品i的打分有原来的该用户的平均打分$\\bar r_u$与和该用户最相似的用户一起决定。\n\n## 例子\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_1.jpg)\n\n为了预测Jane对Aladdin的打分，第一步首先计算每个用户对电影的平均打分。第二步计算其他4个用户与Jane 的相似度，使用的是余弦相似度并且其他用户对Aladdin的打分不算进去，因此用的是除了Aladdin外的3部电影来计算的。计算出来选择与Jane最相似的2个用户Joe、Jorge。\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_2.jpg)\n\n根据前面两部计算的结果计算Jane对Aladdin的打分。\n\n## 推荐系统的评测\n\n主要使用精确率，召回率，F1-Score3个指标来进行评价。\n\n![](https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/presicion_recall.jpg)\n\nF1-Score的计算方式为：\n$$\nF1-Score = \\dfrac{2Precison\\times Recall}{Precision+Recall}\n$$\n精确率表示所有相关的物品中被推荐出来的比例，召回率表示所有推荐的物品中实际相关的比例，F1-Score则是二者的总体评价。","slug":"2019-11-19-推荐系统","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktw50007sghdwuwl6f0h","content":"<h1 id=\"推荐系统\"><a href=\"#推荐系统\" class=\"headerlink\" title=\"推荐系统\"></a>推荐系统</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>推荐的基本思路是根据历史数据比如用户以往的喜好或者相似用户的喜好来预测用户未来的喜好。基本假设是：（1）用户的喜好是会保持的并且随着时间而缓慢改变。（2）拥有相同品味的用户对与一个项目的打分也是相似的。因此可以根据以往的历史数据来进行推荐。</p>\n<p>与搜索的不同：搜索的数据不是根据用户的资料而定制的，给出的答案是与搜素查询语句相关联的结果。</p>\n<a id=\"more\"></a>\n<h2 id=\"推荐算法\"><a href=\"#推荐算法\" class=\"headerlink\" title=\"推荐算法\"></a>推荐算法</h2><h3 id=\"基于内容的方法\"><a href=\"#基于内容的方法\" class=\"headerlink\" title=\"基于内容的方法\"></a>基于内容的方法</h3><p>基于内容的方法基于这样一个事实：一个用户的兴趣应该和被推荐物品的描述想匹配。核心思路是找到用户资料与物品之间的相似度，推荐相似度高的物品。</p>\n<p>步骤为：</p>\n<ul>\n<li>描述将被推荐的物品I</li>\n<li>建立用户个人资料U来描述用户喜欢的物品</li>\n<li>比较物品和用户个人资料来决定推荐的物品</li>\n</ul>\n<p>用户个人资料与物品的描述可以根据关键词进行向量化。使用例如TF-IDF的方法将物品与个人资料向量话后，就可以计算两者的相似度了。</p>\n<h4 id=\"余弦相似度\"><a href=\"#余弦相似度\" class=\"headerlink\" title=\"余弦相似度\"></a>余弦相似度</h4><p>使用预先相似度计算这两个向量的相似度。对与两个n维向量X和Y其余弦相似度为：</p>\n<script type=\"math/tex; mode=display\">\nsim(X,Y)=\\dfrac{X\\cdot Y}{||X||\\times ||Y||}</script><p>分子是点乘，$||X||=\\sqrt {x_1^2+x_2^2+\\dots+x_n^2}$ 是向量的欧几里得范数，也就是向量的长度。</p>\n<h3 id=\"协同过滤算法\"><a href=\"#协同过滤算法\" class=\"headerlink\" title=\"协同过滤算法\"></a>协同过滤算法</h3><p>协同过滤Collaborative Filtering有两中假设</p>\n<ul>\n<li>基于用户的协同过滤：假设之前对各物品打分相似的用户对于一个新的物品的打分也是相似的</li>\n<li>基于物品的协同过滤：假设两个物品的用户打分是相似的，那么一个新用户对二者的打分也是相似的。</li>\n</ul>\n<p>算法的步骤是：</p>\n<ul>\n<li>对所有的用户或物品根据他们与当前的用户或物品的相似度来进行赋权。</li>\n<li>选择相邻的用户或者物品的一个自己作为推荐</li>\n<li>对于一个用户对一个具体的物品的打分，使用相邻的用户对该物品（或者与该物品相似物品）的打分来预测。</li>\n<li>推荐拥有最高预测打分值的物品。</li>\n</ul>\n<p>用户/物品之间的相似度可以用余弦相似度或者皮尔森相关系数。</p>\n<p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/correlation_coefficient.jpg\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/correlation_coefficient.jpg\" class=\"lazyload\"></a></p>\n<p>最终的打分的预测更新为：</p>\n<p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/update_rating.jpg\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/update_rating.jpg\" class=\"lazyload\"></a></p>\n<p>用户u对物品i的打分有原来的该用户的平均打分$\\bar r_u$与和该用户最相似的用户一起决定。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_1.jpg\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_1.jpg\" class=\"lazyload\"></a></p>\n<p>为了预测Jane对Aladdin的打分，第一步首先计算每个用户对电影的平均打分。第二步计算其他4个用户与Jane 的相似度，使用的是余弦相似度并且其他用户对Aladdin的打分不算进去，因此用的是除了Aladdin外的3部电影来计算的。计算出来选择与Jane最相似的2个用户Joe、Jorge。</p>\n<p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_2.jpg\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_2.jpg\" class=\"lazyload\"></a></p>\n<p>根据前面两部计算的结果计算Jane对Aladdin的打分。</p>\n<h2 id=\"推荐系统的评测\"><a href=\"#推荐系统的评测\" class=\"headerlink\" title=\"推荐系统的评测\"></a>推荐系统的评测</h2><p>主要使用精确率，召回率，F1-Score3个指标来进行评价。</p>\n<p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/presicion_recall.jpg\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/presicion_recall.jpg\" class=\"lazyload\"></a></p>\n<p>F1-Score的计算方式为：</p>\n<script type=\"math/tex; mode=display\">\nF1-Score = \\dfrac{2Precison\\times Recall}{Precision+Recall}</script><p>精确率表示所有相关的物品中被推荐出来的比例，召回率表示所有推荐的物品中实际相关的比例，F1-Score则是二者的总体评价。</p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/165505/pexels-photo-165505.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":1196,"excerpt":"<h1 id=\"推荐系统\"><a href=\"#推荐系统\" class=\"headerlink\" title=\"推荐系统\"></a>推荐系统</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>推荐的基本思路是根据历史数据比如用户以往的喜好或者相似用户的喜好来预测用户未来的喜好。基本假设是：（1）用户的喜好是会保持的并且随着时间而缓慢改变。（2）拥有相同品味的用户对与一个项目的打分也是相似的。因此可以根据以往的历史数据来进行推荐。</p>\n<p>与搜索的不同：搜索的数据不是根据用户的资料而定制的，给出的答案是与搜素查询语句相关联的结果。</p>","more":"<h2 id=\"推荐算法\"><a href=\"#推荐算法\" class=\"headerlink\" title=\"推荐算法\"></a>推荐算法</h2><h3 id=\"基于内容的方法\"><a href=\"#基于内容的方法\" class=\"headerlink\" title=\"基于内容的方法\"></a>基于内容的方法</h3><p>基于内容的方法基于这样一个事实：一个用户的兴趣应该和被推荐物品的描述想匹配。核心思路是找到用户资料与物品之间的相似度，推荐相似度高的物品。</p>\n<p>步骤为：</p>\n<ul>\n<li>描述将被推荐的物品I</li>\n<li>建立用户个人资料U来描述用户喜欢的物品</li>\n<li>比较物品和用户个人资料来决定推荐的物品</li>\n</ul>\n<p>用户个人资料与物品的描述可以根据关键词进行向量化。使用例如TF-IDF的方法将物品与个人资料向量话后，就可以计算两者的相似度了。</p>\n<h4 id=\"余弦相似度\"><a href=\"#余弦相似度\" class=\"headerlink\" title=\"余弦相似度\"></a>余弦相似度</h4><p>使用预先相似度计算这两个向量的相似度。对与两个n维向量X和Y其余弦相似度为：</p>\n<script type=\"math/tex; mode=display\">\nsim(X,Y)=\\dfrac{X\\cdot Y}{||X||\\times ||Y||}</script><p>分子是点乘，$||X||=\\sqrt {x_1^2+x_2^2+\\dots+x_n^2}$ 是向量的欧几里得范数，也就是向量的长度。</p>\n<h3 id=\"协同过滤算法\"><a href=\"#协同过滤算法\" class=\"headerlink\" title=\"协同过滤算法\"></a>协同过滤算法</h3><p>协同过滤Collaborative Filtering有两中假设</p>\n<ul>\n<li>基于用户的协同过滤：假设之前对各物品打分相似的用户对于一个新的物品的打分也是相似的</li>\n<li>基于物品的协同过滤：假设两个物品的用户打分是相似的，那么一个新用户对二者的打分也是相似的。</li>\n</ul>\n<p>算法的步骤是：</p>\n<ul>\n<li>对所有的用户或物品根据他们与当前的用户或物品的相似度来进行赋权。</li>\n<li>选择相邻的用户或者物品的一个自己作为推荐</li>\n<li>对于一个用户对一个具体的物品的打分，使用相邻的用户对该物品（或者与该物品相似物品）的打分来预测。</li>\n<li>推荐拥有最高预测打分值的物品。</li>\n</ul>\n<p>用户/物品之间的相似度可以用余弦相似度或者皮尔森相关系数。</p>\n<p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/correlation_coefficient.jpg\" alt=\"\"></p>\n<p>最终的打分的预测更新为：</p>\n<p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/update_rating.jpg\" alt=\"\"></p>\n<p>用户u对物品i的打分有原来的该用户的平均打分$\\bar r_u$与和该用户最相似的用户一起决定。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_1.jpg\" alt=\"\"></p>\n<p>为了预测Jane对Aladdin的打分，第一步首先计算每个用户对电影的平均打分。第二步计算其他4个用户与Jane 的相似度，使用的是余弦相似度并且其他用户对Aladdin的打分不算进去，因此用的是除了Aladdin外的3部电影来计算的。计算出来选择与Jane最相似的2个用户Joe、Jorge。</p>\n<p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/example_2.jpg\" alt=\"\"></p>\n<p>根据前面两部计算的结果计算Jane对Aladdin的打分。</p>\n<h2 id=\"推荐系统的评测\"><a href=\"#推荐系统的评测\" class=\"headerlink\" title=\"推荐系统的评测\"></a>推荐系统的评测</h2><p>主要使用精确率，召回率，F1-Score3个指标来进行评价。</p>\n<p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1574157674/blog/Data%20Mining/presicion_recall.jpg\" alt=\"\"></p>\n<p>F1-Score的计算方式为：</p>\n<script type=\"math/tex; mode=display\">\nF1-Score = \\dfrac{2Precison\\times Recall}{Precision+Recall}</script><p>精确率表示所有相关的物品中被推荐出来的比例，召回率表示所有推荐的物品中实际相关的比例，F1-Score则是二者的总体评价。</p>"},{"title":"BigdataBench deploy","date":"2018-06-23T08:55:45.000Z","copyright":true,"_content":"\n# Bigdatabench 4.0 MPI版本 安装\n\n<!--more-->\n\n官网上面的指南BigDataBench User Manual有一些错误。\n\n本机环境：\n\n​\tCentos 6.9\n\n​\tgcc (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)\n\n​\tg++ (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)\n\n## mpi的安装\n\n这部分网上资料很多，而Manual中有一点错误\n\n1. 需要保证c 编译器 如gcc c++ 编译器 如：g++\n\n2. 基础安装\n\n   1. 从官网下载安装包解压\n\n   - `wget http://www.mpich.org/static/downloads/3.2.1/mpich-3.2.1.tar.gz `  从官网下载安装包\n   - `tar -zxvf mpich-3.2.1.tar.gz `  解压\n   - `cd mpich-3.2.1`\n\n   1. 配置安装目录   本机安装在mpich-install目录下\n\n   - `./configure –prefix=/home/mpich-install 2>&1 | tee c.txt    ` 手册中&被错写为$了 `2>&1 | tee c.txt` 表示将输出的标准出错信息重定向到c.txt中。\n\n   1. build\n\n   - `make 2>&1 | tee m.txt `\n\n   1. 安装\n\n   - `make install 2>&1 | tee mi.txt `\n\n   1. 将安装目录添加到PATH 环境变量中\n\n   - `vim ~/.bashrc`\n   - `export PATH=$PATH:/home/mpich-install/bin` 在最后一行添加\n   - `source ~/.bashrc` 重启生效\n\n3. 检查\n\n   1. 检查路径\n      - `which mpicc` \n      - `which mpic++`\n\n4. 验证 \n\n   在mpich的安装包目录下有提供例子程序运行\n\n   1. `cd mpich-3.2.1/examples`\n   2. `mpicc cpi.c -o cpi` 编译cpi.c程序求pi值\n   3. `mpirun -n 4 ./cpi` 使用4个进程 注意`./`否则报错找不到文件\n\n   如果是集群环境在每个节点将mpich安装在相同的路径然后编辑一个machine_file （里面是各个节点的host）然后`mpirun -f machine_file -n 3 ./cpi` 在集群上并行运行\n\n## boost 安装\n\nboost当前最新版本是：1.67 但是BigdataBench用的是1.43版本推荐安装这个旧版本\n\n1. `wget https://sourceforge.net/projects/boost/files/boost/1.43.0/boost_1_43_0.tar.gz/download` \n\n2. 若下载下来的文件名为：downloads 则使用mv命令重命名在当前文件目录下:\n\n   `mv downloads boost_1_43_0.tar.gz  `  \n\n3. 解压`tar -zxvf boost_1_43_0.tar.gz`  之后`cd boost_1_43_0`\n\n4. `sh bootstrap.sh`  执行这个命令运行脚本后会多出很多配置文件\n\n5. 使用mpi,这一步骤很重要否则后续cmake时会提示找不到：boost_mpi\n\n   1. 对低版本的boost \n\n      1. `which mpic++` 找mpich的目录\n\n      2. `vim tools/build/v2/user-config.jam`\n\n      3. 在最后添加： using mpi:后面是mpich的目录\n\n         `#MPI config`\n\n         `using mpi : /usr/lib64/mpich/bin/mpic++ ;`\n\n   2. 对高版本的boost直接在boost_1_67_0目录下修改project-config.jam即可\n\n6. ` ./bjam` 进行编译\n\n7. `./bjam install` 这一步是必需的但在手册中没有表明。\n\n## BigdataBench的配置\n\n进入BigDataBench的安装根目录：\n\n1. ` vim conf.properties` 添加$JAVA_HOME， $MPI_HOME ，$BigdataBench_HOMEMPI的路径\n2. `sh prepar.sh` \n\n至此安装理论上已经成功。但仍然遇到了其他问题\n\n## Perminsion denied问题\n\n最开始的安装包是从windows下面考过去的结果生成cc的数据后无法运行执行脚本\n\n![](BigdataBench-deploy\\runcc.png)\n\n原因是此时的run_connectedComponents已经不是可执行文件了（不是绿色的）需要`chmod a+x run_connectedComponents`来将文件的权限修改为可执行文件权限（修改后变为绿色）\n\n后面wget下载后解压配置之后直接就是可执行文件！\n\n## ldd 程序 动态链接库缺失\n\n` [root@hw073 ConnectedComponent]# ldd run_connectedComponents`\n`linux-vdso.so.1 =>  (0x00007ffdfc8d4000)`\n`librt.so.1 => /lib64/librt.so.1 (0x0000003156e00000)`\n`libpthread.so.0 => /lib64/libpthread.so.0 (0x0000003156a00000)`\n\n`libboost_serialization-mt.so.1.43.0 => not found`\n`libboost_filesystem-mt.so.1.43.0 => not found`\n`libboost_system-mt.so.1.43.0 => not found`\n`libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x0000003162200000)`\n`libm.so.6 => /lib64/libm.so.6 (0x0000003157200000)`\n`libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x0000003161a00000)`\n`libc.so.6 => /lib64/libc.so.6 (0x0000003156600000)`\n`/lib64/ld-linux-x86-64.so.2 (0x0000003155e00000)`\n\n最开始以为是没有指定LD_LIBRARY_PATH ，因为明明有这个文件的，后面使用find / -name 命令发现还是找不到，仔细一看ldd 的信息，发现上述文件都多了个-mt\n\n解决办法： 在boost安装时的库。本机：`/usr/local/lib` 有着及其相似的3个文件`libboost_filesystem.so.1.43.0` 、`libboost_filesystem.so.1.43.0` ，`libboost_system.so.1.43.0` 均少了个-mt，因此将上述三个文件均拷贝一份命名为上述缺少的动态库文件。\n\n`cd /usr/local/lib` #切换到对应的目录下\n\n`cp libboost_system.so.1.43.0 libboost_system-mt.so.1.43.0 ` #拷贝为对应的文件名","source":"_posts/BigdataBench-deploy.md","raw":"---\ntitle: BigdataBench deploy\ndate: 2018-06-23 16:55:45\ncategories: deploy\ntags: bigdatabench\ncopyright: true\n---\n\n# Bigdatabench 4.0 MPI版本 安装\n\n<!--more-->\n\n官网上面的指南BigDataBench User Manual有一些错误。\n\n本机环境：\n\n​\tCentos 6.9\n\n​\tgcc (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)\n\n​\tg++ (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)\n\n## mpi的安装\n\n这部分网上资料很多，而Manual中有一点错误\n\n1. 需要保证c 编译器 如gcc c++ 编译器 如：g++\n\n2. 基础安装\n\n   1. 从官网下载安装包解压\n\n   - `wget http://www.mpich.org/static/downloads/3.2.1/mpich-3.2.1.tar.gz `  从官网下载安装包\n   - `tar -zxvf mpich-3.2.1.tar.gz `  解压\n   - `cd mpich-3.2.1`\n\n   1. 配置安装目录   本机安装在mpich-install目录下\n\n   - `./configure –prefix=/home/mpich-install 2>&1 | tee c.txt    ` 手册中&被错写为$了 `2>&1 | tee c.txt` 表示将输出的标准出错信息重定向到c.txt中。\n\n   1. build\n\n   - `make 2>&1 | tee m.txt `\n\n   1. 安装\n\n   - `make install 2>&1 | tee mi.txt `\n\n   1. 将安装目录添加到PATH 环境变量中\n\n   - `vim ~/.bashrc`\n   - `export PATH=$PATH:/home/mpich-install/bin` 在最后一行添加\n   - `source ~/.bashrc` 重启生效\n\n3. 检查\n\n   1. 检查路径\n      - `which mpicc` \n      - `which mpic++`\n\n4. 验证 \n\n   在mpich的安装包目录下有提供例子程序运行\n\n   1. `cd mpich-3.2.1/examples`\n   2. `mpicc cpi.c -o cpi` 编译cpi.c程序求pi值\n   3. `mpirun -n 4 ./cpi` 使用4个进程 注意`./`否则报错找不到文件\n\n   如果是集群环境在每个节点将mpich安装在相同的路径然后编辑一个machine_file （里面是各个节点的host）然后`mpirun -f machine_file -n 3 ./cpi` 在集群上并行运行\n\n## boost 安装\n\nboost当前最新版本是：1.67 但是BigdataBench用的是1.43版本推荐安装这个旧版本\n\n1. `wget https://sourceforge.net/projects/boost/files/boost/1.43.0/boost_1_43_0.tar.gz/download` \n\n2. 若下载下来的文件名为：downloads 则使用mv命令重命名在当前文件目录下:\n\n   `mv downloads boost_1_43_0.tar.gz  `  \n\n3. 解压`tar -zxvf boost_1_43_0.tar.gz`  之后`cd boost_1_43_0`\n\n4. `sh bootstrap.sh`  执行这个命令运行脚本后会多出很多配置文件\n\n5. 使用mpi,这一步骤很重要否则后续cmake时会提示找不到：boost_mpi\n\n   1. 对低版本的boost \n\n      1. `which mpic++` 找mpich的目录\n\n      2. `vim tools/build/v2/user-config.jam`\n\n      3. 在最后添加： using mpi:后面是mpich的目录\n\n         `#MPI config`\n\n         `using mpi : /usr/lib64/mpich/bin/mpic++ ;`\n\n   2. 对高版本的boost直接在boost_1_67_0目录下修改project-config.jam即可\n\n6. ` ./bjam` 进行编译\n\n7. `./bjam install` 这一步是必需的但在手册中没有表明。\n\n## BigdataBench的配置\n\n进入BigDataBench的安装根目录：\n\n1. ` vim conf.properties` 添加$JAVA_HOME， $MPI_HOME ，$BigdataBench_HOMEMPI的路径\n2. `sh prepar.sh` \n\n至此安装理论上已经成功。但仍然遇到了其他问题\n\n## Perminsion denied问题\n\n最开始的安装包是从windows下面考过去的结果生成cc的数据后无法运行执行脚本\n\n![](BigdataBench-deploy\\runcc.png)\n\n原因是此时的run_connectedComponents已经不是可执行文件了（不是绿色的）需要`chmod a+x run_connectedComponents`来将文件的权限修改为可执行文件权限（修改后变为绿色）\n\n后面wget下载后解压配置之后直接就是可执行文件！\n\n## ldd 程序 动态链接库缺失\n\n` [root@hw073 ConnectedComponent]# ldd run_connectedComponents`\n`linux-vdso.so.1 =>  (0x00007ffdfc8d4000)`\n`librt.so.1 => /lib64/librt.so.1 (0x0000003156e00000)`\n`libpthread.so.0 => /lib64/libpthread.so.0 (0x0000003156a00000)`\n\n`libboost_serialization-mt.so.1.43.0 => not found`\n`libboost_filesystem-mt.so.1.43.0 => not found`\n`libboost_system-mt.so.1.43.0 => not found`\n`libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x0000003162200000)`\n`libm.so.6 => /lib64/libm.so.6 (0x0000003157200000)`\n`libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x0000003161a00000)`\n`libc.so.6 => /lib64/libc.so.6 (0x0000003156600000)`\n`/lib64/ld-linux-x86-64.so.2 (0x0000003155e00000)`\n\n最开始以为是没有指定LD_LIBRARY_PATH ，因为明明有这个文件的，后面使用find / -name 命令发现还是找不到，仔细一看ldd 的信息，发现上述文件都多了个-mt\n\n解决办法： 在boost安装时的库。本机：`/usr/local/lib` 有着及其相似的3个文件`libboost_filesystem.so.1.43.0` 、`libboost_filesystem.so.1.43.0` ，`libboost_system.so.1.43.0` 均少了个-mt，因此将上述三个文件均拷贝一份命名为上述缺少的动态库文件。\n\n`cd /usr/local/lib` #切换到对应的目录下\n\n`cp libboost_system.so.1.43.0 libboost_system-mt.so.1.43.0 ` #拷贝为对应的文件名","slug":"BigdataBench-deploy","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktw80008sghden6or1kb","content":"<h1 id=\"Bigdatabench-4-0-MPI版本-安装\"><a href=\"#Bigdatabench-4-0-MPI版本-安装\" class=\"headerlink\" title=\"Bigdatabench 4.0 MPI版本 安装\"></a>Bigdatabench 4.0 MPI版本 安装</h1><a id=\"more\"></a>\n<p>官网上面的指南BigDataBench User Manual有一些错误。</p>\n<p>本机环境：</p>\n<p>​    Centos 6.9</p>\n<p>​    gcc (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)</p>\n<p>​    g++ (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)</p>\n<h2 id=\"mpi的安装\"><a href=\"#mpi的安装\" class=\"headerlink\" title=\"mpi的安装\"></a>mpi的安装</h2><p>这部分网上资料很多，而Manual中有一点错误</p>\n<ol>\n<li><p>需要保证c 编译器 如gcc c++ 编译器 如：g++</p>\n</li>\n<li><p>基础安装</p>\n<ol>\n<li>从官网下载安装包解压</li>\n</ol>\n<ul>\n<li><code>wget http://www.mpich.org/static/downloads/3.2.1/mpich-3.2.1.tar.gz</code>  从官网下载安装包</li>\n<li><code>tar -zxvf mpich-3.2.1.tar.gz</code>  解压</li>\n<li><code>cd mpich-3.2.1</code></li>\n</ul>\n<ol>\n<li>配置安装目录   本机安装在mpich-install目录下</li>\n</ol>\n<ul>\n<li><code>./configure –prefix=/home/mpich-install 2&gt;&amp;1 | tee c.txt</code> 手册中&amp;被错写为$了 <code>2&gt;&amp;1 | tee c.txt</code> 表示将输出的标准出错信息重定向到c.txt中。</li>\n</ul>\n<ol>\n<li>build</li>\n</ol>\n<ul>\n<li><code>make 2&gt;&amp;1 | tee m.txt</code></li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<ul>\n<li><code>make install 2&gt;&amp;1 | tee mi.txt</code></li>\n</ul>\n<ol>\n<li>将安装目录添加到PATH 环境变量中</li>\n</ol>\n<ul>\n<li><code>vim ~/.bashrc</code></li>\n<li><code>export PATH=$PATH:/home/mpich-install/bin</code> 在最后一行添加</li>\n<li><code>source ~/.bashrc</code> 重启生效</li>\n</ul>\n</li>\n<li><p>检查</p>\n<ol>\n<li>检查路径<ul>\n<li><code>which mpicc</code> </li>\n<li><code>which mpic++</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>验证 </p>\n<p>在mpich的安装包目录下有提供例子程序运行</p>\n<ol>\n<li><code>cd mpich-3.2.1/examples</code></li>\n<li><code>mpicc cpi.c -o cpi</code> 编译cpi.c程序求pi值</li>\n<li><code>mpirun -n 4 ./cpi</code> 使用4个进程 注意<code>./</code>否则报错找不到文件</li>\n</ol>\n<p>如果是集群环境在每个节点将mpich安装在相同的路径然后编辑一个machine_file （里面是各个节点的host）然后<code>mpirun -f machine_file -n 3 ./cpi</code> 在集群上并行运行</p>\n</li>\n</ol>\n<h2 id=\"boost-安装\"><a href=\"#boost-安装\" class=\"headerlink\" title=\"boost 安装\"></a>boost 安装</h2><p>boost当前最新版本是：1.67 但是BigdataBench用的是1.43版本推荐安装这个旧版本</p>\n<ol>\n<li><p><code>wget https://sourceforge.net/projects/boost/files/boost/1.43.0/boost_1_43_0.tar.gz/download</code> </p>\n</li>\n<li><p>若下载下来的文件名为：downloads 则使用mv命令重命名在当前文件目录下:</p>\n<p><code>mv downloads boost_1_43_0.tar.gz</code>  </p>\n</li>\n<li><p>解压<code>tar -zxvf boost_1_43_0.tar.gz</code>  之后<code>cd boost_1_43_0</code></p>\n</li>\n<li><p><code>sh bootstrap.sh</code>  执行这个命令运行脚本后会多出很多配置文件</p>\n</li>\n<li><p>使用mpi,这一步骤很重要否则后续cmake时会提示找不到：boost_mpi</p>\n<ol>\n<li><p>对低版本的boost </p>\n<ol>\n<li><p><code>which mpic++</code> 找mpich的目录</p>\n</li>\n<li><p><code>vim tools/build/v2/user-config.jam</code></p>\n</li>\n<li><p>在最后添加： using mpi:后面是mpich的目录</p>\n<p><code>#MPI config</code></p>\n<p><code>using mpi : /usr/lib64/mpich/bin/mpic++ ;</code></p>\n</li>\n</ol>\n</li>\n<li><p>对高版本的boost直接在boost_1_67_0目录下修改project-config.jam即可</p>\n</li>\n</ol>\n</li>\n<li><p><code>./bjam</code> 进行编译</p>\n</li>\n<li><p><code>./bjam install</code> 这一步是必需的但在手册中没有表明。</p>\n</li>\n</ol>\n<h2 id=\"BigdataBench的配置\"><a href=\"#BigdataBench的配置\" class=\"headerlink\" title=\"BigdataBench的配置\"></a>BigdataBench的配置</h2><p>进入BigDataBench的安装根目录：</p>\n<ol>\n<li><code>vim conf.properties</code> 添加$JAVA_HOME， $MPI_HOME ，$BigdataBench_HOMEMPI的路径</li>\n<li><code>sh prepar.sh</code> </li>\n</ol>\n<p>至此安装理论上已经成功。但仍然遇到了其他问题</p>\n<h2 id=\"Perminsion-denied问题\"><a href=\"#Perminsion-denied问题\" class=\"headerlink\" title=\"Perminsion denied问题\"></a>Perminsion denied问题</h2><p>最开始的安装包是从windows下面考过去的结果生成cc的数据后无法运行执行脚本</p>\n<p><a href=\"BigdataBench-deploy\\runcc.png\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"BigdataBench-deploy\\runcc.png\" class=\"lazyload\"></a></p>\n<p>原因是此时的run_connectedComponents已经不是可执行文件了（不是绿色的）需要<code>chmod a+x run_connectedComponents</code>来将文件的权限修改为可执行文件权限（修改后变为绿色）</p>\n<p>后面wget下载后解压配置之后直接就是可执行文件！</p>\n<h2 id=\"ldd-程序-动态链接库缺失\"><a href=\"#ldd-程序-动态链接库缺失\" class=\"headerlink\" title=\"ldd 程序 动态链接库缺失\"></a>ldd 程序 动态链接库缺失</h2><p><code>[root@hw073 ConnectedComponent]# ldd run_connectedComponents</code><br><code>linux-vdso.so.1 =&gt;  (0x00007ffdfc8d4000)</code><br><code>librt.so.1 =&gt; /lib64/librt.so.1 (0x0000003156e00000)</code><br><code>libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x0000003156a00000)</code></p>\n<p><code>libboost_serialization-mt.so.1.43.0 =&gt; not found</code><br><code>libboost_filesystem-mt.so.1.43.0 =&gt; not found</code><br><code>libboost_system-mt.so.1.43.0 =&gt; not found</code><br><code>libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x0000003162200000)</code><br><code>libm.so.6 =&gt; /lib64/libm.so.6 (0x0000003157200000)</code><br><code>libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x0000003161a00000)</code><br><code>libc.so.6 =&gt; /lib64/libc.so.6 (0x0000003156600000)</code><br><code>/lib64/ld-linux-x86-64.so.2 (0x0000003155e00000)</code></p>\n<p>最开始以为是没有指定LD_LIBRARY_PATH ，因为明明有这个文件的，后面使用find / -name 命令发现还是找不到，仔细一看ldd 的信息，发现上述文件都多了个-mt</p>\n<p>解决办法： 在boost安装时的库。本机：<code>/usr/local/lib</code> 有着及其相似的3个文件<code>libboost_filesystem.so.1.43.0</code> 、<code>libboost_filesystem.so.1.43.0</code> ，<code>libboost_system.so.1.43.0</code> 均少了个-mt，因此将上述三个文件均拷贝一份命名为上述缺少的动态库文件。</p>\n<p><code>cd /usr/local/lib</code> #切换到对应的目录下</p>\n<p><code>cp libboost_system.so.1.43.0 libboost_system-mt.so.1.43.0</code> #拷贝为对应的文件名</p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/351448/pexels-photo-351448.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":2708,"excerpt":"<h1 id=\"Bigdatabench-4-0-MPI版本-安装\"><a href=\"#Bigdatabench-4-0-MPI版本-安装\" class=\"headerlink\" title=\"Bigdatabench 4.0 MPI版本 安装\"></a>Bigdatabench 4.0 MPI版本 安装</h1>","more":"<p>官网上面的指南BigDataBench User Manual有一些错误。</p>\n<p>本机环境：</p>\n<p>​    Centos 6.9</p>\n<p>​    gcc (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)</p>\n<p>​    g++ (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)</p>\n<h2 id=\"mpi的安装\"><a href=\"#mpi的安装\" class=\"headerlink\" title=\"mpi的安装\"></a>mpi的安装</h2><p>这部分网上资料很多，而Manual中有一点错误</p>\n<ol>\n<li><p>需要保证c 编译器 如gcc c++ 编译器 如：g++</p>\n</li>\n<li><p>基础安装</p>\n<ol>\n<li>从官网下载安装包解压</li>\n</ol>\n<ul>\n<li><code>wget http://www.mpich.org/static/downloads/3.2.1/mpich-3.2.1.tar.gz</code>  从官网下载安装包</li>\n<li><code>tar -zxvf mpich-3.2.1.tar.gz</code>  解压</li>\n<li><code>cd mpich-3.2.1</code></li>\n</ul>\n<ol>\n<li>配置安装目录   本机安装在mpich-install目录下</li>\n</ol>\n<ul>\n<li><code>./configure –prefix=/home/mpich-install 2&gt;&amp;1 | tee c.txt</code> 手册中&amp;被错写为$了 <code>2&gt;&amp;1 | tee c.txt</code> 表示将输出的标准出错信息重定向到c.txt中。</li>\n</ul>\n<ol>\n<li>build</li>\n</ol>\n<ul>\n<li><code>make 2&gt;&amp;1 | tee m.txt</code></li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<ul>\n<li><code>make install 2&gt;&amp;1 | tee mi.txt</code></li>\n</ul>\n<ol>\n<li>将安装目录添加到PATH 环境变量中</li>\n</ol>\n<ul>\n<li><code>vim ~/.bashrc</code></li>\n<li><code>export PATH=$PATH:/home/mpich-install/bin</code> 在最后一行添加</li>\n<li><code>source ~/.bashrc</code> 重启生效</li>\n</ul>\n</li>\n<li><p>检查</p>\n<ol>\n<li>检查路径<ul>\n<li><code>which mpicc</code> </li>\n<li><code>which mpic++</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>验证 </p>\n<p>在mpich的安装包目录下有提供例子程序运行</p>\n<ol>\n<li><code>cd mpich-3.2.1/examples</code></li>\n<li><code>mpicc cpi.c -o cpi</code> 编译cpi.c程序求pi值</li>\n<li><code>mpirun -n 4 ./cpi</code> 使用4个进程 注意<code>./</code>否则报错找不到文件</li>\n</ol>\n<p>如果是集群环境在每个节点将mpich安装在相同的路径然后编辑一个machine_file （里面是各个节点的host）然后<code>mpirun -f machine_file -n 3 ./cpi</code> 在集群上并行运行</p>\n</li>\n</ol>\n<h2 id=\"boost-安装\"><a href=\"#boost-安装\" class=\"headerlink\" title=\"boost 安装\"></a>boost 安装</h2><p>boost当前最新版本是：1.67 但是BigdataBench用的是1.43版本推荐安装这个旧版本</p>\n<ol>\n<li><p><code>wget https://sourceforge.net/projects/boost/files/boost/1.43.0/boost_1_43_0.tar.gz/download</code> </p>\n</li>\n<li><p>若下载下来的文件名为：downloads 则使用mv命令重命名在当前文件目录下:</p>\n<p><code>mv downloads boost_1_43_0.tar.gz</code>  </p>\n</li>\n<li><p>解压<code>tar -zxvf boost_1_43_0.tar.gz</code>  之后<code>cd boost_1_43_0</code></p>\n</li>\n<li><p><code>sh bootstrap.sh</code>  执行这个命令运行脚本后会多出很多配置文件</p>\n</li>\n<li><p>使用mpi,这一步骤很重要否则后续cmake时会提示找不到：boost_mpi</p>\n<ol>\n<li><p>对低版本的boost </p>\n<ol>\n<li><p><code>which mpic++</code> 找mpich的目录</p>\n</li>\n<li><p><code>vim tools/build/v2/user-config.jam</code></p>\n</li>\n<li><p>在最后添加： using mpi:后面是mpich的目录</p>\n<p><code>#MPI config</code></p>\n<p><code>using mpi : /usr/lib64/mpich/bin/mpic++ ;</code></p>\n</li>\n</ol>\n</li>\n<li><p>对高版本的boost直接在boost_1_67_0目录下修改project-config.jam即可</p>\n</li>\n</ol>\n</li>\n<li><p><code>./bjam</code> 进行编译</p>\n</li>\n<li><p><code>./bjam install</code> 这一步是必需的但在手册中没有表明。</p>\n</li>\n</ol>\n<h2 id=\"BigdataBench的配置\"><a href=\"#BigdataBench的配置\" class=\"headerlink\" title=\"BigdataBench的配置\"></a>BigdataBench的配置</h2><p>进入BigDataBench的安装根目录：</p>\n<ol>\n<li><code>vim conf.properties</code> 添加$JAVA_HOME， $MPI_HOME ，$BigdataBench_HOMEMPI的路径</li>\n<li><code>sh prepar.sh</code> </li>\n</ol>\n<p>至此安装理论上已经成功。但仍然遇到了其他问题</p>\n<h2 id=\"Perminsion-denied问题\"><a href=\"#Perminsion-denied问题\" class=\"headerlink\" title=\"Perminsion denied问题\"></a>Perminsion denied问题</h2><p>最开始的安装包是从windows下面考过去的结果生成cc的数据后无法运行执行脚本</p>\n<p><img src=\"BigdataBench-deploy\\runcc.png\" alt=\"\"></p>\n<p>原因是此时的run_connectedComponents已经不是可执行文件了（不是绿色的）需要<code>chmod a+x run_connectedComponents</code>来将文件的权限修改为可执行文件权限（修改后变为绿色）</p>\n<p>后面wget下载后解压配置之后直接就是可执行文件！</p>\n<h2 id=\"ldd-程序-动态链接库缺失\"><a href=\"#ldd-程序-动态链接库缺失\" class=\"headerlink\" title=\"ldd 程序 动态链接库缺失\"></a>ldd 程序 动态链接库缺失</h2><p><code>[root@hw073 ConnectedComponent]# ldd run_connectedComponents</code><br><code>linux-vdso.so.1 =&gt;  (0x00007ffdfc8d4000)</code><br><code>librt.so.1 =&gt; /lib64/librt.so.1 (0x0000003156e00000)</code><br><code>libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x0000003156a00000)</code></p>\n<p><code>libboost_serialization-mt.so.1.43.0 =&gt; not found</code><br><code>libboost_filesystem-mt.so.1.43.0 =&gt; not found</code><br><code>libboost_system-mt.so.1.43.0 =&gt; not found</code><br><code>libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x0000003162200000)</code><br><code>libm.so.6 =&gt; /lib64/libm.so.6 (0x0000003157200000)</code><br><code>libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x0000003161a00000)</code><br><code>libc.so.6 =&gt; /lib64/libc.so.6 (0x0000003156600000)</code><br><code>/lib64/ld-linux-x86-64.so.2 (0x0000003155e00000)</code></p>\n<p>最开始以为是没有指定LD_LIBRARY_PATH ，因为明明有这个文件的，后面使用find / -name 命令发现还是找不到，仔细一看ldd 的信息，发现上述文件都多了个-mt</p>\n<p>解决办法： 在boost安装时的库。本机：<code>/usr/local/lib</code> 有着及其相似的3个文件<code>libboost_filesystem.so.1.43.0</code> 、<code>libboost_filesystem.so.1.43.0</code> ，<code>libboost_system.so.1.43.0</code> 均少了个-mt，因此将上述三个文件均拷贝一份命名为上述缺少的动态库文件。</p>\n<p><code>cd /usr/local/lib</code> #切换到对应的目录下</p>\n<p><code>cp libboost_system.so.1.43.0 libboost_system-mt.so.1.43.0</code> #拷贝为对应的文件名</p>"},{"title":"leetcode 881 Boats to Save People","date":"2019-11-29T07:49:08.000Z","copyright":true,"_content":"\n# leetcode 881 Boats to Save People\n\n[题目来源](<https://leetcode.com/problems/boats-to-save-people/> )。要求在船有载重量和人数限制为2的情况下，给出将所有人运过河的最小船数。\n\n<!--more-->\n\n## 思路\n\n使用贪心算法，进行求解。\n\n### 桶排序 \n\n首先是自己的思路：贪心的考虑每只船都尽可能的装满限重，然后优先让胖的人先上船，之后寻找在剩下载重量限制的情况下，找最胖的人。\n\n在具体实现上，先遍历一遍人数的重量，按照重量进行桶排序，因为重量不会超过limit，而且都是整数所以是可以实现的。每个桶记录该重量下的人数，然后先将重量最大的给安排上船，并寻找能够匹配的第二个重量。直到最轻的被遍历完得到答案。\n\n## 双指针\n\n提交后发现网上的思路和自己有一点差别：配对的贪心规则是最胖的先走之后，选择最轻的进行匹配。这样就很容易的使用双指针来实现。不过为什么两种规则都能够过，自己还在思考中,参考链接中有对这种贪心规则的证明。\n\n## 代码\n\n### 桶排序\n\n```cpp\nclass Solution {\npublic:\n\t/* 桶排序 贪心的选择最胖的先走\n\tRuntime: 96 ms\n\tMemory Usage: 16.5 MB*/\n    int numRescueBoats(vector<int>& people, int limit) {\n        int num = people.size();\n\t\tif(num<=0) return 0;\n        vector<int> person(limit+1, 0);\n        for(int i=0; i<num; i++){\n            person[people[i]]++;\n        }\n\t\tint ans = 0;\n\t\t// int crossed = 0;\n\t\tfor(int i = limit; i>0; i--){\n\t\t\tfor(int j=person[i]; j>0; j--){\n\t\t\t\tans++;\n\t\t\t\t// crossed++;\n\t\t\t\tperson[i]--;// 运走一个人后 计数减1\n\t\t\t\tint rest = limit - i;\n\t\t\t\tfor(int k=rest; k>0; k--){\n\t\t\t\t\tif(person[k]>0){\n\t\t\t\t\t\tperson[k]--;\n\t\t\t\t\t\tif(k==i) j--; // 如果减去的和当前指向的weight一样 则需要减去自身\n\t\t\t\t\t\t// crossed++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// if(crossed==num) cout<<\"all crossed\" <<endl;\n\t\treturn ans;   \n    }\n};\n```\n\n需要注意的是如果剩下的重量和当前重量一致的时候，迭代的计数也要减1，比如limit为4，当前迭代的重量为2，剩下的匹配重量也为2情况。\n\n### 双指针\n\n```cpp\nclass Solution {\npublic:\n\t/*排序后 双指针\n\tRuntime: 116 ms\n\tMemory Usage: 13.6 MB\n    */\n    int numRescueBoats(vector<int>& people, int limit){\n    \tsort(people.begin(), people.end());\n    \tint ans = 0;\n    \tint i = 0;\n    \tint j = people.size() - 1;\n    \twhile(i<=j){\n    \t\tif(people[i]+people[j]<=limit){\n    \t\t\ti++;\n    \t\t\tj--;\n    \t\t\tans++;\n    \t\t}\n    \t\telse{\n    \t\t\tj--;\n    \t\t\tans++;\n    \t\t}\n    \t}\n    \treturn ans;\n    }\n};\n```\n\n## 复杂度\n\nleetcode上面显示桶排序的速度能够超过96%的提交，但是空间使用仅超过11%.\n\n### 桶排序\n\n桶排序的时间复杂读为O(n)，但是空间消耗较多为O(limit)。自己实现的代码中虽然有三层for循环，但是每一层都不是人数n，从总的被遍历到的人来考虑，前面两层是遍历的人数因此是O(n)，而每一个重量的人都需要去寻找匹配的重量，考虑最坏的情况是O(limit)，但是一般来说不会寻找太多次，所以可以认为近似的是O(1)。因此总得时间复杂度为O(n)，空间复杂度为O(limit)\n\n### 双指针\n\n双指针的时间复杂度为排序的时间复杂度，使用快排的话是O(nlogn)。不需要额外的空间，所以是O(1)。\n\n## 参考\n\n对于第二种匹配规则的贪心的证明[参考](<https://zhanghuimeng.github.io/post/leetcode-881-boats-to-save-people/>  ) 但是存疑，因为我用第一种的匹配规则也做出来了。","source":"_posts/2019-11-29-leetcode-881-Boats-to-Save-People.md","raw":"---\ntitle: leetcode 881 Boats to Save People\ndate: 2019-11-29 15:49:08\ncategories: 题解\ntags:\n- 贪心\n- leetcode\ncopyright: true\n---\n\n# leetcode 881 Boats to Save People\n\n[题目来源](<https://leetcode.com/problems/boats-to-save-people/> )。要求在船有载重量和人数限制为2的情况下，给出将所有人运过河的最小船数。\n\n<!--more-->\n\n## 思路\n\n使用贪心算法，进行求解。\n\n### 桶排序 \n\n首先是自己的思路：贪心的考虑每只船都尽可能的装满限重，然后优先让胖的人先上船，之后寻找在剩下载重量限制的情况下，找最胖的人。\n\n在具体实现上，先遍历一遍人数的重量，按照重量进行桶排序，因为重量不会超过limit，而且都是整数所以是可以实现的。每个桶记录该重量下的人数，然后先将重量最大的给安排上船，并寻找能够匹配的第二个重量。直到最轻的被遍历完得到答案。\n\n## 双指针\n\n提交后发现网上的思路和自己有一点差别：配对的贪心规则是最胖的先走之后，选择最轻的进行匹配。这样就很容易的使用双指针来实现。不过为什么两种规则都能够过，自己还在思考中,参考链接中有对这种贪心规则的证明。\n\n## 代码\n\n### 桶排序\n\n```cpp\nclass Solution {\npublic:\n\t/* 桶排序 贪心的选择最胖的先走\n\tRuntime: 96 ms\n\tMemory Usage: 16.5 MB*/\n    int numRescueBoats(vector<int>& people, int limit) {\n        int num = people.size();\n\t\tif(num<=0) return 0;\n        vector<int> person(limit+1, 0);\n        for(int i=0; i<num; i++){\n            person[people[i]]++;\n        }\n\t\tint ans = 0;\n\t\t// int crossed = 0;\n\t\tfor(int i = limit; i>0; i--){\n\t\t\tfor(int j=person[i]; j>0; j--){\n\t\t\t\tans++;\n\t\t\t\t// crossed++;\n\t\t\t\tperson[i]--;// 运走一个人后 计数减1\n\t\t\t\tint rest = limit - i;\n\t\t\t\tfor(int k=rest; k>0; k--){\n\t\t\t\t\tif(person[k]>0){\n\t\t\t\t\t\tperson[k]--;\n\t\t\t\t\t\tif(k==i) j--; // 如果减去的和当前指向的weight一样 则需要减去自身\n\t\t\t\t\t\t// crossed++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// if(crossed==num) cout<<\"all crossed\" <<endl;\n\t\treturn ans;   \n    }\n};\n```\n\n需要注意的是如果剩下的重量和当前重量一致的时候，迭代的计数也要减1，比如limit为4，当前迭代的重量为2，剩下的匹配重量也为2情况。\n\n### 双指针\n\n```cpp\nclass Solution {\npublic:\n\t/*排序后 双指针\n\tRuntime: 116 ms\n\tMemory Usage: 13.6 MB\n    */\n    int numRescueBoats(vector<int>& people, int limit){\n    \tsort(people.begin(), people.end());\n    \tint ans = 0;\n    \tint i = 0;\n    \tint j = people.size() - 1;\n    \twhile(i<=j){\n    \t\tif(people[i]+people[j]<=limit){\n    \t\t\ti++;\n    \t\t\tj--;\n    \t\t\tans++;\n    \t\t}\n    \t\telse{\n    \t\t\tj--;\n    \t\t\tans++;\n    \t\t}\n    \t}\n    \treturn ans;\n    }\n};\n```\n\n## 复杂度\n\nleetcode上面显示桶排序的速度能够超过96%的提交，但是空间使用仅超过11%.\n\n### 桶排序\n\n桶排序的时间复杂读为O(n)，但是空间消耗较多为O(limit)。自己实现的代码中虽然有三层for循环，但是每一层都不是人数n，从总的被遍历到的人来考虑，前面两层是遍历的人数因此是O(n)，而每一个重量的人都需要去寻找匹配的重量，考虑最坏的情况是O(limit)，但是一般来说不会寻找太多次，所以可以认为近似的是O(1)。因此总得时间复杂度为O(n)，空间复杂度为O(limit)\n\n### 双指针\n\n双指针的时间复杂度为排序的时间复杂度，使用快排的话是O(nlogn)。不需要额外的空间，所以是O(1)。\n\n## 参考\n\n对于第二种匹配规则的贪心的证明[参考](<https://zhanghuimeng.github.io/post/leetcode-881-boats-to-save-people/>  ) 但是存疑，因为我用第一种的匹配规则也做出来了。","slug":"2019-11-29-leetcode-881-Boats-to-Save-People","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwa0009sghd3kjzl8nr","content":"<h1 id=\"leetcode-881-Boats-to-Save-People\"><a href=\"#leetcode-881-Boats-to-Save-People\" class=\"headerlink\" title=\"leetcode 881 Boats to Save People\"></a>leetcode 881 Boats to Save People</h1><p><a href=\"https://leetcode.com/problems/boats-to-save-people/\" target=\"_blank\" rel=\"noopener\">题目来源</a>。要求在船有载重量和人数限制为2的情况下，给出将所有人运过河的最小船数。</p>\n<a id=\"more\"></a>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>使用贪心算法，进行求解。</p>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><p>首先是自己的思路：贪心的考虑每只船都尽可能的装满限重，然后优先让胖的人先上船，之后寻找在剩下载重量限制的情况下，找最胖的人。</p>\n<p>在具体实现上，先遍历一遍人数的重量，按照重量进行桶排序，因为重量不会超过limit，而且都是整数所以是可以实现的。每个桶记录该重量下的人数，然后先将重量最大的给安排上船，并寻找能够匹配的第二个重量。直到最轻的被遍历完得到答案。</p>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p>提交后发现网上的思路和自己有一点差别：配对的贪心规则是最胖的先走之后，选择最轻的进行匹配。这样就很容易的使用双指针来实现。不过为什么两种规则都能够过，自己还在思考中,参考链接中有对这种贪心规则的证明。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"桶排序-1\"><a href=\"#桶排序-1\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">cpp</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* 桶排序 贪心的选择最胖的先走</span></span><br><span class=\"line\"><span class=\"comment\">\tRuntime: 96 ms</span></span><br><span class=\"line\"><span class=\"comment\">\tMemory Usage: 16.5 MB*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numRescueBoats</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; people, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = people.size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(limit+<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;num; i++)&#123;</span><br><span class=\"line\">            person[people[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// int crossed = 0;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = limit; i&gt;<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=person[i]; j&gt;<span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">\t\t\t\tans++;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// crossed++;</span></span><br><span class=\"line\">\t\t\t\tperson[i]--;<span class=\"comment\">// 运走一个人后 计数减1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> rest = limit - i;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=rest; k&gt;<span class=\"number\">0</span>; k--)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(person[k]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tperson[k]--;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(k==i) j--; <span class=\"comment\">// 如果减去的和当前指向的weight一样 则需要减去自身</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// crossed++;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// if(crossed==num) cout&lt;&lt;\"all crossed\" &lt;&lt;endl;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n<p>需要注意的是如果剩下的重量和当前重量一致的时候，迭代的计数也要减1，比如limit为4，当前迭代的重量为2，剩下的匹配重量也为2情况。</p>\n<h3 id=\"双指针-1\"><a href=\"#双指针-1\" class=\"headerlink\" title=\"双指针\"></a>双指针</h3><div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">cpp</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/*排序后 双指针</span></span><br><span class=\"line\"><span class=\"comment\">\tRuntime: 116 ms</span></span><br><span class=\"line\"><span class=\"comment\">\tMemory Usage: 13.6 MB</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numRescueBoats</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; people, <span class=\"keyword\">int</span> limit)</span></span>&#123;</span><br><span class=\"line\">    \tsort(people.begin(), people.end());</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> j = people.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(i&lt;=j)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(people[i]+people[j]&lt;=limit)&#123;</span><br><span class=\"line\">    \t\t\ti++;</span><br><span class=\"line\">    \t\t\tj--;</span><br><span class=\"line\">    \t\t\tans++;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t\t\tj--;</span><br><span class=\"line\">    \t\t\tans++;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><p>leetcode上面显示桶排序的速度能够超过96%的提交，但是空间使用仅超过11%.</p>\n<h3 id=\"桶排序-2\"><a href=\"#桶排序-2\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><p>桶排序的时间复杂读为O(n)，但是空间消耗较多为O(limit)。自己实现的代码中虽然有三层for循环，但是每一层都不是人数n，从总的被遍历到的人来考虑，前面两层是遍历的人数因此是O(n)，而每一个重量的人都需要去寻找匹配的重量，考虑最坏的情况是O(limit)，但是一般来说不会寻找太多次，所以可以认为近似的是O(1)。因此总得时间复杂度为O(n)，空间复杂度为O(limit)</p>\n<h3 id=\"双指针-2\"><a href=\"#双指针-2\" class=\"headerlink\" title=\"双指针\"></a>双指针</h3><p>双指针的时间复杂度为排序的时间复杂度，使用快排的话是O(nlogn)。不需要额外的空间，所以是O(1)。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>对于第二种匹配规则的贪心的证明<a href=\"https://zhanghuimeng.github.io/post/leetcode-881-boats-to-save-people/\" target=\"_blank\" rel=\"noopener\">参考</a> 但是存疑，因为我用第一种的匹配规则也做出来了。</p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/417222/pexels-photo-417222.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":1852,"excerpt":"<h1 id=\"leetcode-881-Boats-to-Save-People\"><a href=\"#leetcode-881-Boats-to-Save-People\" class=\"headerlink\" title=\"leetcode 881 Boats to Save People\"></a>leetcode 881 Boats to Save People</h1><p><a href=\"https://leetcode.com/problems/boats-to-save-people/\" target=\"_blank\" rel=\"noopener\">题目来源</a>。要求在船有载重量和人数限制为2的情况下，给出将所有人运过河的最小船数。</p>","more":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>使用贪心算法，进行求解。</p>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><p>首先是自己的思路：贪心的考虑每只船都尽可能的装满限重，然后优先让胖的人先上船，之后寻找在剩下载重量限制的情况下，找最胖的人。</p>\n<p>在具体实现上，先遍历一遍人数的重量，按照重量进行桶排序，因为重量不会超过limit，而且都是整数所以是可以实现的。每个桶记录该重量下的人数，然后先将重量最大的给安排上船，并寻找能够匹配的第二个重量。直到最轻的被遍历完得到答案。</p>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p>提交后发现网上的思路和自己有一点差别：配对的贪心规则是最胖的先走之后，选择最轻的进行匹配。这样就很容易的使用双指针来实现。不过为什么两种规则都能够过，自己还在思考中,参考链接中有对这种贪心规则的证明。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"桶排序-1\"><a href=\"#桶排序-1\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* 桶排序 贪心的选择最胖的先走</span></span><br><span class=\"line\"><span class=\"comment\">\tRuntime: 96 ms</span></span><br><span class=\"line\"><span class=\"comment\">\tMemory Usage: 16.5 MB*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numRescueBoats</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; people, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = people.size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">person</span><span class=\"params\">(limit+<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;num; i++)&#123;</span><br><span class=\"line\">            person[people[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// int crossed = 0;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = limit; i&gt;<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=person[i]; j&gt;<span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">\t\t\t\tans++;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// crossed++;</span></span><br><span class=\"line\">\t\t\t\tperson[i]--;<span class=\"comment\">// 运走一个人后 计数减1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> rest = limit - i;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=rest; k&gt;<span class=\"number\">0</span>; k--)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(person[k]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tperson[k]--;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(k==i) j--; <span class=\"comment\">// 如果减去的和当前指向的weight一样 则需要减去自身</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// crossed++;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// if(crossed==num) cout&lt;&lt;\"all crossed\" &lt;&lt;endl;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是如果剩下的重量和当前重量一致的时候，迭代的计数也要减1，比如limit为4，当前迭代的重量为2，剩下的匹配重量也为2情况。</p>\n<h3 id=\"双指针-1\"><a href=\"#双指针-1\" class=\"headerlink\" title=\"双指针\"></a>双指针</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/*排序后 双指针</span></span><br><span class=\"line\"><span class=\"comment\">\tRuntime: 116 ms</span></span><br><span class=\"line\"><span class=\"comment\">\tMemory Usage: 13.6 MB</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numRescueBoats</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; people, <span class=\"keyword\">int</span> limit)</span></span>&#123;</span><br><span class=\"line\">    \tsort(people.begin(), people.end());</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> j = people.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(i&lt;=j)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(people[i]+people[j]&lt;=limit)&#123;</span><br><span class=\"line\">    \t\t\ti++;</span><br><span class=\"line\">    \t\t\tj--;</span><br><span class=\"line\">    \t\t\tans++;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t\t\tj--;</span><br><span class=\"line\">    \t\t\tans++;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><p>leetcode上面显示桶排序的速度能够超过96%的提交，但是空间使用仅超过11%.</p>\n<h3 id=\"桶排序-2\"><a href=\"#桶排序-2\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><p>桶排序的时间复杂读为O(n)，但是空间消耗较多为O(limit)。自己实现的代码中虽然有三层for循环，但是每一层都不是人数n，从总的被遍历到的人来考虑，前面两层是遍历的人数因此是O(n)，而每一个重量的人都需要去寻找匹配的重量，考虑最坏的情况是O(limit)，但是一般来说不会寻找太多次，所以可以认为近似的是O(1)。因此总得时间复杂度为O(n)，空间复杂度为O(limit)</p>\n<h3 id=\"双指针-2\"><a href=\"#双指针-2\" class=\"headerlink\" title=\"双指针\"></a>双指针</h3><p>双指针的时间复杂度为排序的时间复杂度，使用快排的话是O(nlogn)。不需要额外的空间，所以是O(1)。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>对于第二种匹配规则的贪心的证明<a href=\"https://zhanghuimeng.github.io/post/leetcode-881-boats-to-save-people/\" target=\"_blank\" rel=\"noopener\">参考</a> 但是存疑，因为我用第一种的匹配规则也做出来了。</p>"},{"title":"ceph 部署文档","date":"2018-04-17T09:36:03.000Z","copyright":true,"_content":"\n# ceph 部署文档\n\n<!--more-->\n\n------\n\n# 1.配置所有节点\n\n## 创建ceph用户\n\n## 安装配置NTP\n\n1. `systemctl enable ntp`  ubuntu 14.04不可用，感觉已经安装过了，因此跳过。\n\n## 配置hosts文件\n\n`172.16.1.93 object1`\n`172.16.1.94 object2`\n`172.16.1.95 object3`\n`172.16.1.66 object4`\n`172.16.1.92 controller`\n\n------\n\n# 2. 配置ssh服务器\n\n修改ssh的配置文件\n\nHost controller\n        Hostname gd92\n        User cephuser\nHost object1\n        Hostname gd93\n        User cephuser\nHost object2\n        Hostname hw101\n        User cephuser\nHost object3\n        Hostname gd95\n        User cephuser\nHost object4\n        Hostname gd66\n        User cephuser\n\n生成密钥并拷贝到4个osd节点上，无需拷贝到controller节点\n\n------\n\n# 3.安装ceph\n\n主要参考链接：这些链接的操作大都一致，部分的顺序会有变化。\n\nhttps://linux.cn/article-8182-1.html#4_10238\n\nhttps://blog.csdn.net/styshoo/article/details/55471132\n\nhttps://blog.csdn.net/styshoo/article/details/58572816\n\n## 部署监控节点出现的问题\n\n`ceph-deploy mon create-initial`\n\n1. ` ceph-mon --cluster ceph --mkfs -i gd92 --keyring /var/lib/ceph/tmp/ceph-gd92.mon.keyring`\n\n   问题：ceph.conf的配置文件中的`public network=172.16.1.92/24` 掩码前面多打了空格\n\n   修改后重新执行命令，并加上`--overwrite-conf` \n\n2. [info]Running command: ceph --cluster=ceph --admin-daemon /var/run/ceph/ceph-mon.controller.asok mon_status\n\n   `admin_socket: exception getting command descriptions: [Errno 2] No such file or directory`\n\n   似乎是ceph -deploy 的问题，或者是ubuntu14.04的问题。教程是ubuntu16.04的\n\n   此问题非hostname 不对应\n\n   非conf 不同步导致。--overwrtie-conf  无作用。\n\n   解决办法：按照14.04方法重新安装ceph-deploy\n\n## 部署osd节点出现的问题\n\n1. 使用`ceph-deploy disk list ceph-osd1 ceph-osd2 ceph-osd3`检查磁盘可用性时报错，使用`ceph-deploy osd prepare ceph-osd1:/dev/sdb ceph-osd2:/dev/sdb ceph-osd3:/dev/sdb` 在数据盘上面准备时也报错\n   Running command: fdisk -l  File \"/usr/lib/python2.7/distpackages/ceph_deploy/util/decorators.py\", line 69, in newfunc \n   问题：未知\n   解决办法：将osd节点的数据目录放在指定目录，不用整个数据盘\n2. 最后部署后集群状况是health -ok，但是4osds，有3个osd up，一个osd down\n   问题：down掉的节点磁盘有问题。\n   解决办法：先卸载磁盘，重新格式化，挂载，重新激活osd节点\n\n## 部署rgw节点出现的问题\n\n1. 显示rgw进程在工作，但是使用：http://controller:7480 显示拒绝连接。并且新建S3账号，测试时未返回正确结果。\n\n   问题：未知\n\n   尝试方法：重新部署\n\n   解决办法：重新部署后最开始将端口设置为80，发现可以创建s3账号，但是无法正确测试，显示创建bucket出错，查看rgw的log，发现端口被占用，无法打开，后面重新设置端口为7480问题解决，测试均正确。","source":"_posts/ceph部署文档.md","raw":"---\ntitle: ceph 部署文档\ndate: 2018-04-17 17:36:03\ncategories: deploy\ntags: ceph\ncopyright: true\n---\n\n# ceph 部署文档\n\n<!--more-->\n\n------\n\n# 1.配置所有节点\n\n## 创建ceph用户\n\n## 安装配置NTP\n\n1. `systemctl enable ntp`  ubuntu 14.04不可用，感觉已经安装过了，因此跳过。\n\n## 配置hosts文件\n\n`172.16.1.93 object1`\n`172.16.1.94 object2`\n`172.16.1.95 object3`\n`172.16.1.66 object4`\n`172.16.1.92 controller`\n\n------\n\n# 2. 配置ssh服务器\n\n修改ssh的配置文件\n\nHost controller\n        Hostname gd92\n        User cephuser\nHost object1\n        Hostname gd93\n        User cephuser\nHost object2\n        Hostname hw101\n        User cephuser\nHost object3\n        Hostname gd95\n        User cephuser\nHost object4\n        Hostname gd66\n        User cephuser\n\n生成密钥并拷贝到4个osd节点上，无需拷贝到controller节点\n\n------\n\n# 3.安装ceph\n\n主要参考链接：这些链接的操作大都一致，部分的顺序会有变化。\n\nhttps://linux.cn/article-8182-1.html#4_10238\n\nhttps://blog.csdn.net/styshoo/article/details/55471132\n\nhttps://blog.csdn.net/styshoo/article/details/58572816\n\n## 部署监控节点出现的问题\n\n`ceph-deploy mon create-initial`\n\n1. ` ceph-mon --cluster ceph --mkfs -i gd92 --keyring /var/lib/ceph/tmp/ceph-gd92.mon.keyring`\n\n   问题：ceph.conf的配置文件中的`public network=172.16.1.92/24` 掩码前面多打了空格\n\n   修改后重新执行命令，并加上`--overwrite-conf` \n\n2. [info]Running command: ceph --cluster=ceph --admin-daemon /var/run/ceph/ceph-mon.controller.asok mon_status\n\n   `admin_socket: exception getting command descriptions: [Errno 2] No such file or directory`\n\n   似乎是ceph -deploy 的问题，或者是ubuntu14.04的问题。教程是ubuntu16.04的\n\n   此问题非hostname 不对应\n\n   非conf 不同步导致。--overwrtie-conf  无作用。\n\n   解决办法：按照14.04方法重新安装ceph-deploy\n\n## 部署osd节点出现的问题\n\n1. 使用`ceph-deploy disk list ceph-osd1 ceph-osd2 ceph-osd3`检查磁盘可用性时报错，使用`ceph-deploy osd prepare ceph-osd1:/dev/sdb ceph-osd2:/dev/sdb ceph-osd3:/dev/sdb` 在数据盘上面准备时也报错\n   Running command: fdisk -l  File \"/usr/lib/python2.7/distpackages/ceph_deploy/util/decorators.py\", line 69, in newfunc \n   问题：未知\n   解决办法：将osd节点的数据目录放在指定目录，不用整个数据盘\n2. 最后部署后集群状况是health -ok，但是4osds，有3个osd up，一个osd down\n   问题：down掉的节点磁盘有问题。\n   解决办法：先卸载磁盘，重新格式化，挂载，重新激活osd节点\n\n## 部署rgw节点出现的问题\n\n1. 显示rgw进程在工作，但是使用：http://controller:7480 显示拒绝连接。并且新建S3账号，测试时未返回正确结果。\n\n   问题：未知\n\n   尝试方法：重新部署\n\n   解决办法：重新部署后最开始将端口设置为80，发现可以创建s3账号，但是无法正确测试，显示创建bucket出错，查看rgw的log，发现端口被占用，无法打开，后面重新设置端口为7480问题解决，测试均正确。","slug":"ceph部署文档","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwc000csghd6wk6oyp3","content":"<h1 id=\"ceph-部署文档\"><a href=\"#ceph-部署文档\" class=\"headerlink\" title=\"ceph 部署文档\"></a>ceph 部署文档</h1><a id=\"more\"></a>\n<hr>\n<h1 id=\"1-配置所有节点\"><a href=\"#1-配置所有节点\" class=\"headerlink\" title=\"1.配置所有节点\"></a>1.配置所有节点</h1><h2 id=\"创建ceph用户\"><a href=\"#创建ceph用户\" class=\"headerlink\" title=\"创建ceph用户\"></a>创建ceph用户</h2><h2 id=\"安装配置NTP\"><a href=\"#安装配置NTP\" class=\"headerlink\" title=\"安装配置NTP\"></a>安装配置NTP</h2><ol>\n<li><code>systemctl enable ntp</code>  ubuntu 14.04不可用，感觉已经安装过了，因此跳过。</li>\n</ol>\n<h2 id=\"配置hosts文件\"><a href=\"#配置hosts文件\" class=\"headerlink\" title=\"配置hosts文件\"></a>配置hosts文件</h2><p><code>172.16.1.93 object1</code><br><code>172.16.1.94 object2</code><br><code>172.16.1.95 object3</code><br><code>172.16.1.66 object4</code><br><code>172.16.1.92 controller</code></p>\n<hr>\n<h1 id=\"2-配置ssh服务器\"><a href=\"#2-配置ssh服务器\" class=\"headerlink\" title=\"2. 配置ssh服务器\"></a>2. 配置ssh服务器</h1><p>修改ssh的配置文件</p>\n<p>Host controller<br>        Hostname gd92<br>        User cephuser<br>Host object1<br>        Hostname gd93<br>        User cephuser<br>Host object2<br>        Hostname hw101<br>        User cephuser<br>Host object3<br>        Hostname gd95<br>        User cephuser<br>Host object4<br>        Hostname gd66<br>        User cephuser</p>\n<p>生成密钥并拷贝到4个osd节点上，无需拷贝到controller节点</p>\n<hr>\n<h1 id=\"3-安装ceph\"><a href=\"#3-安装ceph\" class=\"headerlink\" title=\"3.安装ceph\"></a>3.安装ceph</h1><p>主要参考链接：这些链接的操作大都一致，部分的顺序会有变化。</p>\n<p><a href=\"https://linux.cn/article-8182-1.html#4_10238\" target=\"_blank\" rel=\"noopener\">https://linux.cn/article-8182-1.html#4_10238</a></p>\n<p><a href=\"https://blog.csdn.net/styshoo/article/details/55471132\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/styshoo/article/details/55471132</a></p>\n<p><a href=\"https://blog.csdn.net/styshoo/article/details/58572816\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/styshoo/article/details/58572816</a></p>\n<h2 id=\"部署监控节点出现的问题\"><a href=\"#部署监控节点出现的问题\" class=\"headerlink\" title=\"部署监控节点出现的问题\"></a>部署监控节点出现的问题</h2><p><code>ceph-deploy mon create-initial</code></p>\n<ol>\n<li><p><code>ceph-mon --cluster ceph --mkfs -i gd92 --keyring /var/lib/ceph/tmp/ceph-gd92.mon.keyring</code></p>\n<p>问题：ceph.conf的配置文件中的<code>public network=172.16.1.92/24</code> 掩码前面多打了空格</p>\n<p>修改后重新执行命令，并加上<code>--overwrite-conf</code> </p>\n</li>\n<li><p>[info]Running command: ceph —cluster=ceph —admin-daemon /var/run/ceph/ceph-mon.controller.asok mon_status</p>\n<p><code>admin_socket: exception getting command descriptions: [Errno 2] No such file or directory</code></p>\n<p>似乎是ceph -deploy 的问题，或者是ubuntu14.04的问题。教程是ubuntu16.04的</p>\n<p>此问题非hostname 不对应</p>\n<p>非conf 不同步导致。—overwrtie-conf  无作用。</p>\n<p>解决办法：按照14.04方法重新安装ceph-deploy</p>\n</li>\n</ol>\n<h2 id=\"部署osd节点出现的问题\"><a href=\"#部署osd节点出现的问题\" class=\"headerlink\" title=\"部署osd节点出现的问题\"></a>部署osd节点出现的问题</h2><ol>\n<li>使用<code>ceph-deploy disk list ceph-osd1 ceph-osd2 ceph-osd3</code>检查磁盘可用性时报错，使用<code>ceph-deploy osd prepare ceph-osd1:/dev/sdb ceph-osd2:/dev/sdb ceph-osd3:/dev/sdb</code> 在数据盘上面准备时也报错<br>Running command: fdisk -l  File “/usr/lib/python2.7/distpackages/ceph_deploy/util/decorators.py”, line 69, in newfunc<br>问题：未知<br>解决办法：将osd节点的数据目录放在指定目录，不用整个数据盘</li>\n<li>最后部署后集群状况是health -ok，但是4osds，有3个osd up，一个osd down<br>问题：down掉的节点磁盘有问题。<br>解决办法：先卸载磁盘，重新格式化，挂载，重新激活osd节点</li>\n</ol>\n<h2 id=\"部署rgw节点出现的问题\"><a href=\"#部署rgw节点出现的问题\" class=\"headerlink\" title=\"部署rgw节点出现的问题\"></a>部署rgw节点出现的问题</h2><ol>\n<li><p>显示rgw进程在工作，但是使用：<a href=\"http://controller:7480\" target=\"_blank\" rel=\"noopener\">http://controller:7480</a> 显示拒绝连接。并且新建S3账号，测试时未返回正确结果。</p>\n<p>问题：未知</p>\n<p>尝试方法：重新部署</p>\n<p>解决办法：重新部署后最开始将端口设置为80，发现可以创建s3账号，但是无法正确测试，显示创建bucket出错，查看rgw的log，发现端口被占用，无法打开，后面重新设置端口为7480问题解决，测试均正确。</p>\n</li>\n</ol>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/640809/pexels-photo-640809.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":1696,"excerpt":"<h1 id=\"ceph-部署文档\"><a href=\"#ceph-部署文档\" class=\"headerlink\" title=\"ceph 部署文档\"></a>ceph 部署文档</h1>","more":"<hr>\n<h1 id=\"1-配置所有节点\"><a href=\"#1-配置所有节点\" class=\"headerlink\" title=\"1.配置所有节点\"></a>1.配置所有节点</h1><h2 id=\"创建ceph用户\"><a href=\"#创建ceph用户\" class=\"headerlink\" title=\"创建ceph用户\"></a>创建ceph用户</h2><h2 id=\"安装配置NTP\"><a href=\"#安装配置NTP\" class=\"headerlink\" title=\"安装配置NTP\"></a>安装配置NTP</h2><ol>\n<li><code>systemctl enable ntp</code>  ubuntu 14.04不可用，感觉已经安装过了，因此跳过。</li>\n</ol>\n<h2 id=\"配置hosts文件\"><a href=\"#配置hosts文件\" class=\"headerlink\" title=\"配置hosts文件\"></a>配置hosts文件</h2><p><code>172.16.1.93 object1</code><br><code>172.16.1.94 object2</code><br><code>172.16.1.95 object3</code><br><code>172.16.1.66 object4</code><br><code>172.16.1.92 controller</code></p>\n<hr>\n<h1 id=\"2-配置ssh服务器\"><a href=\"#2-配置ssh服务器\" class=\"headerlink\" title=\"2. 配置ssh服务器\"></a>2. 配置ssh服务器</h1><p>修改ssh的配置文件</p>\n<p>Host controller<br>        Hostname gd92<br>        User cephuser<br>Host object1<br>        Hostname gd93<br>        User cephuser<br>Host object2<br>        Hostname hw101<br>        User cephuser<br>Host object3<br>        Hostname gd95<br>        User cephuser<br>Host object4<br>        Hostname gd66<br>        User cephuser</p>\n<p>生成密钥并拷贝到4个osd节点上，无需拷贝到controller节点</p>\n<hr>\n<h1 id=\"3-安装ceph\"><a href=\"#3-安装ceph\" class=\"headerlink\" title=\"3.安装ceph\"></a>3.安装ceph</h1><p>主要参考链接：这些链接的操作大都一致，部分的顺序会有变化。</p>\n<p><a href=\"https://linux.cn/article-8182-1.html#4_10238\" target=\"_blank\" rel=\"noopener\">https://linux.cn/article-8182-1.html#4_10238</a></p>\n<p><a href=\"https://blog.csdn.net/styshoo/article/details/55471132\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/styshoo/article/details/55471132</a></p>\n<p><a href=\"https://blog.csdn.net/styshoo/article/details/58572816\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/styshoo/article/details/58572816</a></p>\n<h2 id=\"部署监控节点出现的问题\"><a href=\"#部署监控节点出现的问题\" class=\"headerlink\" title=\"部署监控节点出现的问题\"></a>部署监控节点出现的问题</h2><p><code>ceph-deploy mon create-initial</code></p>\n<ol>\n<li><p><code>ceph-mon --cluster ceph --mkfs -i gd92 --keyring /var/lib/ceph/tmp/ceph-gd92.mon.keyring</code></p>\n<p>问题：ceph.conf的配置文件中的<code>public network=172.16.1.92/24</code> 掩码前面多打了空格</p>\n<p>修改后重新执行命令，并加上<code>--overwrite-conf</code> </p>\n</li>\n<li><p>[info]Running command: ceph —cluster=ceph —admin-daemon /var/run/ceph/ceph-mon.controller.asok mon_status</p>\n<p><code>admin_socket: exception getting command descriptions: [Errno 2] No such file or directory</code></p>\n<p>似乎是ceph -deploy 的问题，或者是ubuntu14.04的问题。教程是ubuntu16.04的</p>\n<p>此问题非hostname 不对应</p>\n<p>非conf 不同步导致。—overwrtie-conf  无作用。</p>\n<p>解决办法：按照14.04方法重新安装ceph-deploy</p>\n</li>\n</ol>\n<h2 id=\"部署osd节点出现的问题\"><a href=\"#部署osd节点出现的问题\" class=\"headerlink\" title=\"部署osd节点出现的问题\"></a>部署osd节点出现的问题</h2><ol>\n<li>使用<code>ceph-deploy disk list ceph-osd1 ceph-osd2 ceph-osd3</code>检查磁盘可用性时报错，使用<code>ceph-deploy osd prepare ceph-osd1:/dev/sdb ceph-osd2:/dev/sdb ceph-osd3:/dev/sdb</code> 在数据盘上面准备时也报错<br>Running command: fdisk -l  File “/usr/lib/python2.7/distpackages/ceph_deploy/util/decorators.py”, line 69, in newfunc<br>问题：未知<br>解决办法：将osd节点的数据目录放在指定目录，不用整个数据盘</li>\n<li>最后部署后集群状况是health -ok，但是4osds，有3个osd up，一个osd down<br>问题：down掉的节点磁盘有问题。<br>解决办法：先卸载磁盘，重新格式化，挂载，重新激活osd节点</li>\n</ol>\n<h2 id=\"部署rgw节点出现的问题\"><a href=\"#部署rgw节点出现的问题\" class=\"headerlink\" title=\"部署rgw节点出现的问题\"></a>部署rgw节点出现的问题</h2><ol>\n<li><p>显示rgw进程在工作，但是使用：<a href=\"http://controller:7480\" target=\"_blank\" rel=\"noopener\">http://controller:7480</a> 显示拒绝连接。并且新建S3账号，测试时未返回正确结果。</p>\n<p>问题：未知</p>\n<p>尝试方法：重新部署</p>\n<p>解决办法：重新部署后最开始将端口设置为80，发现可以创建s3账号，但是无法正确测试，显示创建bucket出错，查看rgw的log，发现端口被占用，无法打开，后面重新设置端口为7480问题解决，测试均正确。</p>\n</li>\n</ol>"},{"title":"Linux命令学习之wc","date":"2018-07-09T13:12:11.000Z","copyright":true,"_content":"\n# Linux 命令学习wc命令\n\n## `wc`命令 \n\n<!--more-->\n\n1. 作用：Word Count 功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。 \n2. 格式：\n   - `wc [option] filepath`\n3. 参数\n   - `-c` 统计字节数\n   - `-l` 统计行数\n   - `-m` 统计字符数 标志不能与 -c 标志一起使用。 \n   - `-w` 统计字（单词word）数。一个字被定义为由空白、跳格或换行字符分隔的字符串 \n   - `-L`  打印最长行的长度。 \n   - `-help` 显示帮助信息 \n   - `--version` 显示版本信息 \n4. 参考网址：http://www.cnblogs.com/peida/archive/2012/12/18/2822758.html\n\n","source":"_posts/Linux 命令 学习.md","raw":"---\ntitle: Linux命令学习之wc\ndate: 2018-07-9 21:12:11\ncategories: Linux\ntags: \n- Linux\n- command\ncopyright: true\n---\n\n# Linux 命令学习wc命令\n\n## `wc`命令 \n\n<!--more-->\n\n1. 作用：Word Count 功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。 \n2. 格式：\n   - `wc [option] filepath`\n3. 参数\n   - `-c` 统计字节数\n   - `-l` 统计行数\n   - `-m` 统计字符数 标志不能与 -c 标志一起使用。 \n   - `-w` 统计字（单词word）数。一个字被定义为由空白、跳格或换行字符分隔的字符串 \n   - `-L`  打印最长行的长度。 \n   - `-help` 显示帮助信息 \n   - `--version` 显示版本信息 \n4. 参考网址：http://www.cnblogs.com/peida/archive/2012/12/18/2822758.html\n\n","slug":"Linux 命令 学习","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwd000dsghd39y5ylv8","content":"<h1 id=\"Linux-命令学习wc命令\"><a href=\"#Linux-命令学习wc命令\" class=\"headerlink\" title=\"Linux 命令学习wc命令\"></a>Linux 命令学习wc命令</h1><h2 id=\"wc命令\"><a href=\"#wc命令\" class=\"headerlink\" title=\"wc命令\"></a><code>wc</code>命令</h2><a id=\"more\"></a>\n<ol>\n<li>作用：Word Count 功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。 </li>\n<li>格式：<ul>\n<li><code>wc [option] filepath</code></li>\n</ul>\n</li>\n<li>参数<ul>\n<li><code>-c</code> 统计字节数</li>\n<li><code>-l</code> 统计行数</li>\n<li><code>-m</code> 统计字符数 标志不能与 -c 标志一起使用。 </li>\n<li><code>-w</code> 统计字（单词word）数。一个字被定义为由空白、跳格或换行字符分隔的字符串 </li>\n<li><code>-L</code>  打印最长行的长度。 </li>\n<li><code>-help</code> 显示帮助信息 </li>\n<li><code>--version</code> 显示版本信息 </li>\n</ul>\n</li>\n<li>参考网址：<a href=\"http://www.cnblogs.com/peida/archive/2012/12/18/2822758.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/peida/archive/2012/12/18/2822758.html</a></li>\n</ol>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":259,"excerpt":"<h1 id=\"Linux-命令学习wc命令\"><a href=\"#Linux-命令学习wc命令\" class=\"headerlink\" title=\"Linux 命令学习wc命令\"></a>Linux 命令学习wc命令</h1><h2 id=\"wc命令\"><a href=\"#wc命令\" class=\"headerlink\" title=\"wc命令\"></a><code>wc</code>命令</h2>","more":"<ol>\n<li>作用：Word Count 功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。 </li>\n<li>格式：<ul>\n<li><code>wc [option] filepath</code></li>\n</ul>\n</li>\n<li>参数<ul>\n<li><code>-c</code> 统计字节数</li>\n<li><code>-l</code> 统计行数</li>\n<li><code>-m</code> 统计字符数 标志不能与 -c 标志一起使用。 </li>\n<li><code>-w</code> 统计字（单词word）数。一个字被定义为由空白、跳格或换行字符分隔的字符串 </li>\n<li><code>-L</code>  打印最长行的长度。 </li>\n<li><code>-help</code> 显示帮助信息 </li>\n<li><code>--version</code> 显示版本信息 </li>\n</ul>\n</li>\n<li>参考网址：<a href=\"http://www.cnblogs.com/peida/archive/2012/12/18/2822758.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/peida/archive/2012/12/18/2822758.html</a></li>\n</ol>"},{"title":"apt-get install失败","date":"2019-03-10T08:23:20.000Z","copyright":true,"_content":"\n## apt-get install失败\n\n<!--more-->\n\n### 第一阶段\n\n1. 使用perf 报错 内核无法找到perf\n\n   ```\n   root@hw103:/home/yky/redis-5.0.3# perf \n   WARNING: perf not found for kernel 4.15.0-45\n   \n     You may need to install the following packages for this specific kernel:\n       linux-tools-4.15.0-45-generic\n       linux-cloud-tools-4.15.0-45-generic\n   \n     You may also want to install one of the following packages to keep up to date:\n       linux-tools-generic\n       linux-cloud-tools-generic\n   ```\n\n   \n\n2. 安装此内核的通用工具时错误\n\n   ```\n   root@hw103:/home/yky/redis-5.0.3# apt-get install  linux-tools-4.15.0-45-generic\n   Reading package lists... Done\n   Building dependency tree       \n   Reading state information... Done\n   You might want to run 'apt-get -f install' to correct these:\n   The following packages have unmet dependencies:\n    console-setup : Depends: keyboard-configuration (= 1.178ubuntu2.7) but 1.108ubuntu15.3 is to be installed\n    console-setup-linux : Depends: keyboard-configuration (= 1.178ubuntu2.7) but 1.108ubuntu15.3 is to be installed\n                          Breaks: keyboard-configuration (< 1.138) but 1.108ubuntu15.3 is to be installed\n    linux-tools-4.15.0-45-generic : Depends: linux-tools-4.15.0-45 but it is not going to be installed\n   E: Unmet dependencies. Try 'apt-get -f install' with no packages (or specify a solution).\n   ```\n\n3. 使用apt-get -f install 时报错\n\n   ```\n   update-rc.d: error: insserv rejected the script header\n   dpkg: error processing archive /var/cache/apt/archives/keyboard-configuration_1.178ubuntu2.7_all.deb (--unpack):\n    subprocess new pre-installation script returned error exit status 1\n   dpkg-query: warning: files list file for package 'keyboard-configuration' missing; assuming package has no files currently installed\n   dpkg-query: warning: files list file for package 'keyboard-configuration' missing; assuming package has no files currently installed\n   dpkg-query: warning: files list file for package 'keyboard-configuration' missing; assuming package has no files currently installed\n   Errors were encountered while processing:\n    /var/cache/apt/archives/keyboard-configuration_1.178ubuntu2.7_all.deb\n   E: Sub-process /usr/bin/dpkg returned an error code (1)\n   ```\n\n   问题综述：\n\n   1. `apt-get install lib`时报错 Unmet dependencies\n   2. `apt-get install -f ` 时报错Sub-process /usr/bin/dpkg returned an error code (1)\n\n\n4. 第一阶段解决办法\n\n   在/var/lib/dpkg/目录下有个info文件 ，然后文件中没有keyboard-configuration的相关文件但是有info的备份info_backup  ，这里面有相关的文件，于是将keyboard-configuration的所有相关文件都拷贝到了/var/lib/dpkg/info 中。\n\n   在info_backup目录下执行如下命令拷贝\n\n   `cp keyboard-configuration.* ../info`\n\n   随后再次执行安装内核通用工具 报错为第二阶段\n\n### 第二阶段\n\n1. 安装此内核的通用工具时时报错：\n\n   ``` \n   insserv: Starting redis depends on plymouth and therefore on system facility `$all' which can not be true!\n   insserv: exiting now without changing boot order!\n   update-rc.d: error: insserv rejected the script header\n   dpkg: error processing package avahi-daemon (--configure):\n    subprocess installed post-installation script returned error exit status 1\n   No apport report written because MaxReports is reached already\n                                                                 No apport report written because MaxReports is reached already\n                                                                                                                               dpkg: dependency problems prevent configuration o\n   f avahi-utils: avahi-utils depends on avahi-daemon; however:\n     Package avahi-daemon is not configured yet.\n   \n   dpkg: error processing package avahi-utils (--configure):\n    dependency problems - leaving unconfigured\n   Setting up unattended-upgrades (1.1ubuntu1.18.04.9) ...\n   dpkg: error processing package unattended-upgrades (--configure):\n    subprocess installed post-installation script returned error exit status 10\n   No apport report written because MaxReports is reached already\n                                                                 Setting up linux-tools-4.15.0-45 (4.15.0-45.48) ...\n   Setting up linux-tools-4.15.0-45-generic (4.15.0-45.48) ...\n   Processing triggers for initramfs-tools (0.122ubuntu8.14) ...\n   Errors were encountered while processing:\n    udev\n    snapd\n    ubuntu-core-launcher\n    kmod\n    ubuntu-drivers-common\n    whoopsie\n    openssh-server\n    ssh\n    avahi-daemon\n    avahi-utils\n    unattended-upgrades\n   E: Sub-process /usr/bin/dpkg returned an error code (1)\n   ```\n\n2. 解决办法：/var/lib/dpkg/info 目录下将上述出现问题的模块的postinst文件重命名。\n\n   在/var/lib/dpkg/info 下写了个脚本\n\n   solution.sh\n\n   ```\n   #!/bin/bash\n   for pack in $(cat module.txt)\n   do \n       mv \"$pack\".postinst \"$pack\".postinst.bak\n   done\n   ```\n\n   其中module.txt的内容为\n\n   ```\n    udev\n    snapd\n    ubuntu-core-launcher\n    kmod\n    ubuntu-drivers-common\n    whoopsie\n    openssh-server\n    ssh\n    avahi-daemon\n    avahi-utils\n    unattended-upgrades\n   ```\n\n3. 执行脚本后 使用`sudo apt-get upgrade` 进行更新\n\n4. 参考：\n\n   1. https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E8%A7%A3%E5%86%B3ubuntu-%E6%97%A0%E6%B3%95%E7%94%A8-apt-get-install-%E5%AE%89%E8%A3%85%E4%BB%BB%E4%BD%95%E8%BD%AF%E4%BB%B6dpkg-error-processing-package-xxx%E7%9A%84%E9%97%AE/\n   2. https://askubuntu.com/questions/949760/dpkg-warning-files-list-file-for-package-missing","source":"_posts/apt-get install 失败.md","raw":"---\ntitle: apt-get install失败\ndate: 2019-03-10 16:23:20\ncategories: Linux\ntags: \n- Linux \n- 运维\ncopyright: true\n---\n\n## apt-get install失败\n\n<!--more-->\n\n### 第一阶段\n\n1. 使用perf 报错 内核无法找到perf\n\n   ```\n   root@hw103:/home/yky/redis-5.0.3# perf \n   WARNING: perf not found for kernel 4.15.0-45\n   \n     You may need to install the following packages for this specific kernel:\n       linux-tools-4.15.0-45-generic\n       linux-cloud-tools-4.15.0-45-generic\n   \n     You may also want to install one of the following packages to keep up to date:\n       linux-tools-generic\n       linux-cloud-tools-generic\n   ```\n\n   \n\n2. 安装此内核的通用工具时错误\n\n   ```\n   root@hw103:/home/yky/redis-5.0.3# apt-get install  linux-tools-4.15.0-45-generic\n   Reading package lists... Done\n   Building dependency tree       \n   Reading state information... Done\n   You might want to run 'apt-get -f install' to correct these:\n   The following packages have unmet dependencies:\n    console-setup : Depends: keyboard-configuration (= 1.178ubuntu2.7) but 1.108ubuntu15.3 is to be installed\n    console-setup-linux : Depends: keyboard-configuration (= 1.178ubuntu2.7) but 1.108ubuntu15.3 is to be installed\n                          Breaks: keyboard-configuration (< 1.138) but 1.108ubuntu15.3 is to be installed\n    linux-tools-4.15.0-45-generic : Depends: linux-tools-4.15.0-45 but it is not going to be installed\n   E: Unmet dependencies. Try 'apt-get -f install' with no packages (or specify a solution).\n   ```\n\n3. 使用apt-get -f install 时报错\n\n   ```\n   update-rc.d: error: insserv rejected the script header\n   dpkg: error processing archive /var/cache/apt/archives/keyboard-configuration_1.178ubuntu2.7_all.deb (--unpack):\n    subprocess new pre-installation script returned error exit status 1\n   dpkg-query: warning: files list file for package 'keyboard-configuration' missing; assuming package has no files currently installed\n   dpkg-query: warning: files list file for package 'keyboard-configuration' missing; assuming package has no files currently installed\n   dpkg-query: warning: files list file for package 'keyboard-configuration' missing; assuming package has no files currently installed\n   Errors were encountered while processing:\n    /var/cache/apt/archives/keyboard-configuration_1.178ubuntu2.7_all.deb\n   E: Sub-process /usr/bin/dpkg returned an error code (1)\n   ```\n\n   问题综述：\n\n   1. `apt-get install lib`时报错 Unmet dependencies\n   2. `apt-get install -f ` 时报错Sub-process /usr/bin/dpkg returned an error code (1)\n\n\n4. 第一阶段解决办法\n\n   在/var/lib/dpkg/目录下有个info文件 ，然后文件中没有keyboard-configuration的相关文件但是有info的备份info_backup  ，这里面有相关的文件，于是将keyboard-configuration的所有相关文件都拷贝到了/var/lib/dpkg/info 中。\n\n   在info_backup目录下执行如下命令拷贝\n\n   `cp keyboard-configuration.* ../info`\n\n   随后再次执行安装内核通用工具 报错为第二阶段\n\n### 第二阶段\n\n1. 安装此内核的通用工具时时报错：\n\n   ``` \n   insserv: Starting redis depends on plymouth and therefore on system facility `$all' which can not be true!\n   insserv: exiting now without changing boot order!\n   update-rc.d: error: insserv rejected the script header\n   dpkg: error processing package avahi-daemon (--configure):\n    subprocess installed post-installation script returned error exit status 1\n   No apport report written because MaxReports is reached already\n                                                                 No apport report written because MaxReports is reached already\n                                                                                                                               dpkg: dependency problems prevent configuration o\n   f avahi-utils: avahi-utils depends on avahi-daemon; however:\n     Package avahi-daemon is not configured yet.\n   \n   dpkg: error processing package avahi-utils (--configure):\n    dependency problems - leaving unconfigured\n   Setting up unattended-upgrades (1.1ubuntu1.18.04.9) ...\n   dpkg: error processing package unattended-upgrades (--configure):\n    subprocess installed post-installation script returned error exit status 10\n   No apport report written because MaxReports is reached already\n                                                                 Setting up linux-tools-4.15.0-45 (4.15.0-45.48) ...\n   Setting up linux-tools-4.15.0-45-generic (4.15.0-45.48) ...\n   Processing triggers for initramfs-tools (0.122ubuntu8.14) ...\n   Errors were encountered while processing:\n    udev\n    snapd\n    ubuntu-core-launcher\n    kmod\n    ubuntu-drivers-common\n    whoopsie\n    openssh-server\n    ssh\n    avahi-daemon\n    avahi-utils\n    unattended-upgrades\n   E: Sub-process /usr/bin/dpkg returned an error code (1)\n   ```\n\n2. 解决办法：/var/lib/dpkg/info 目录下将上述出现问题的模块的postinst文件重命名。\n\n   在/var/lib/dpkg/info 下写了个脚本\n\n   solution.sh\n\n   ```\n   #!/bin/bash\n   for pack in $(cat module.txt)\n   do \n       mv \"$pack\".postinst \"$pack\".postinst.bak\n   done\n   ```\n\n   其中module.txt的内容为\n\n   ```\n    udev\n    snapd\n    ubuntu-core-launcher\n    kmod\n    ubuntu-drivers-common\n    whoopsie\n    openssh-server\n    ssh\n    avahi-daemon\n    avahi-utils\n    unattended-upgrades\n   ```\n\n3. 执行脚本后 使用`sudo apt-get upgrade` 进行更新\n\n4. 参考：\n\n   1. https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E8%A7%A3%E5%86%B3ubuntu-%E6%97%A0%E6%B3%95%E7%94%A8-apt-get-install-%E5%AE%89%E8%A3%85%E4%BB%BB%E4%BD%95%E8%BD%AF%E4%BB%B6dpkg-error-processing-package-xxx%E7%9A%84%E9%97%AE/\n   2. https://askubuntu.com/questions/949760/dpkg-warning-files-list-file-for-package-missing","slug":"apt-get install 失败","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwh000hsghdfkz7dgaq","content":"<h2 id=\"apt-get-install失败\"><a href=\"#apt-get-install失败\" class=\"headerlink\" title=\"apt-get install失败\"></a>apt-get install失败</h2><a id=\"more\"></a>\n<h3 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h3><ol>\n<li><p>使用perf 报错 内核无法找到perf</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@hw103:/home/yky/redis-5.0.3# perf </span><br><span class=\"line\">WARNING: perf not found for kernel 4.15.0-45</span><br><span class=\"line\"></span><br><span class=\"line\">  You may need to install the following packages for this specific kernel:</span><br><span class=\"line\">    linux-tools-4.15.0-45-generic</span><br><span class=\"line\">    linux-cloud-tools-4.15.0-45-generic</span><br><span class=\"line\"></span><br><span class=\"line\">  You may also want to install one of the following packages to keep up to date:</span><br><span class=\"line\">    linux-tools-generic</span><br><span class=\"line\">    linux-cloud-tools-generic</span><br></pre></td></tr></table></figure></div>\n</li>\n</ol>\n<ol>\n<li><p>安装此内核的通用工具时错误</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@hw103:/home/yky/redis-5.0.3# apt-get install  linux-tools-4.15.0-45-generic</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">You might want to run &apos;apt-get -f install&apos; to correct these:</span><br><span class=\"line\">The following packages have unmet dependencies:</span><br><span class=\"line\"> console-setup : Depends: keyboard-configuration (= 1.178ubuntu2.7) but 1.108ubuntu15.3 is to be installed</span><br><span class=\"line\"> console-setup-linux : Depends: keyboard-configuration (= 1.178ubuntu2.7) but 1.108ubuntu15.3 is to be installed</span><br><span class=\"line\">                       Breaks: keyboard-configuration (&lt; 1.138) but 1.108ubuntu15.3 is to be installed</span><br><span class=\"line\"> linux-tools-4.15.0-45-generic : Depends: linux-tools-4.15.0-45 but it is not going to be installed</span><br><span class=\"line\">E: Unmet dependencies. Try &apos;apt-get -f install&apos; with no packages (or specify a solution).</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>使用apt-get -f install 时报错</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-rc.d: error: insserv rejected the script header</span><br><span class=\"line\">dpkg: error processing archive /var/cache/apt/archives/keyboard-configuration_1.178ubuntu2.7_all.deb (--unpack):</span><br><span class=\"line\"> subprocess new pre-installation script returned error exit status 1</span><br><span class=\"line\">dpkg-query: warning: files list file for package &apos;keyboard-configuration&apos; missing; assuming package has no files currently installed</span><br><span class=\"line\">dpkg-query: warning: files list file for package &apos;keyboard-configuration&apos; missing; assuming package has no files currently installed</span><br><span class=\"line\">dpkg-query: warning: files list file for package &apos;keyboard-configuration&apos; missing; assuming package has no files currently installed</span><br><span class=\"line\">Errors were encountered while processing:</span><br><span class=\"line\"> /var/cache/apt/archives/keyboard-configuration_1.178ubuntu2.7_all.deb</span><br><span class=\"line\">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure></div>\n<p>问题综述：</p>\n<ol>\n<li><code>apt-get install lib</code>时报错 Unmet dependencies</li>\n<li><code>apt-get install -f</code> 时报错Sub-process /usr/bin/dpkg returned an error code (1)</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li><p>第一阶段解决办法</p>\n<p>在/var/lib/dpkg/目录下有个info文件 ，然后文件中没有keyboard-configuration的相关文件但是有info的备份info_backup  ，这里面有相关的文件，于是将keyboard-configuration的所有相关文件都拷贝到了/var/lib/dpkg/info 中。</p>\n<p>在info_backup目录下执行如下命令拷贝</p>\n<p><code>cp keyboard-configuration.* ../info</code></p>\n<p>随后再次执行安装内核通用工具 报错为第二阶段</p>\n</li>\n</ol>\n<h3 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a>第二阶段</h3><ol>\n<li><p>安装此内核的通用工具时时报错：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insserv: Starting redis depends on plymouth and therefore on system facility `$all&apos; which can not be true!</span><br><span class=\"line\">insserv: exiting now without changing boot order!</span><br><span class=\"line\">update-rc.d: error: insserv rejected the script header</span><br><span class=\"line\">dpkg: error processing package avahi-daemon (--configure):</span><br><span class=\"line\"> subprocess installed post-installation script returned error exit status 1</span><br><span class=\"line\">No apport report written because MaxReports is reached already</span><br><span class=\"line\">                                                              No apport report written because MaxReports is reached already</span><br><span class=\"line\">                                                                                                                            dpkg: dependency problems prevent configuration o</span><br><span class=\"line\">f avahi-utils: avahi-utils depends on avahi-daemon; however:</span><br><span class=\"line\">  Package avahi-daemon is not configured yet.</span><br><span class=\"line\"></span><br><span class=\"line\">dpkg: error processing package avahi-utils (--configure):</span><br><span class=\"line\"> dependency problems - leaving unconfigured</span><br><span class=\"line\">Setting up unattended-upgrades (1.1ubuntu1.18.04.9) ...</span><br><span class=\"line\">dpkg: error processing package unattended-upgrades (--configure):</span><br><span class=\"line\"> subprocess installed post-installation script returned error exit status 10</span><br><span class=\"line\">No apport report written because MaxReports is reached already</span><br><span class=\"line\">                                                              Setting up linux-tools-4.15.0-45 (4.15.0-45.48) ...</span><br><span class=\"line\">Setting up linux-tools-4.15.0-45-generic (4.15.0-45.48) ...</span><br><span class=\"line\">Processing triggers for initramfs-tools (0.122ubuntu8.14) ...</span><br><span class=\"line\">Errors were encountered while processing:</span><br><span class=\"line\"> udev</span><br><span class=\"line\"> snapd</span><br><span class=\"line\"> ubuntu-core-launcher</span><br><span class=\"line\"> kmod</span><br><span class=\"line\"> ubuntu-drivers-common</span><br><span class=\"line\"> whoopsie</span><br><span class=\"line\"> openssh-server</span><br><span class=\"line\"> ssh</span><br><span class=\"line\"> avahi-daemon</span><br><span class=\"line\"> avahi-utils</span><br><span class=\"line\"> unattended-upgrades</span><br><span class=\"line\">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>解决办法：/var/lib/dpkg/info 目录下将上述出现问题的模块的postinst文件重命名。</p>\n<p>在/var/lib/dpkg/info 下写了个脚本</p>\n<p>solution.sh</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">for pack in $(cat module.txt)</span><br><span class=\"line\">do </span><br><span class=\"line\">    mv &quot;$pack&quot;.postinst &quot;$pack&quot;.postinst.bak</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></div>\n<p>其中module.txt的内容为</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udev</span><br><span class=\"line\">snapd</span><br><span class=\"line\">ubuntu-core-launcher</span><br><span class=\"line\">kmod</span><br><span class=\"line\">ubuntu-drivers-common</span><br><span class=\"line\">whoopsie</span><br><span class=\"line\">openssh-server</span><br><span class=\"line\">ssh</span><br><span class=\"line\">avahi-daemon</span><br><span class=\"line\">avahi-utils</span><br><span class=\"line\">unattended-upgrades</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>执行脚本后 使用<code>sudo apt-get upgrade</code> 进行更新</p>\n</li>\n<li><p>参考：</p>\n<ol>\n<li><a href=\"https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E8%A7%A3%E5%86%B3ubuntu-%E6%97%A0%E6%B3%95%E7%94%A8-apt-get-install-%E5%AE%89%E8%A3%85%E4%BB%BB%E4%BD%95%E8%BD%AF%E4%BB%B6dpkg-error-processing-package-xxx%E7%9A%84%E9%97%AE/\" target=\"_blank\" rel=\"noopener\">https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E8%A7%A3%E5%86%B3ubuntu-%E6%97%A0%E6%B3%95%E7%94%A8-apt-get-install-%E5%AE%89%E8%A3%85%E4%BB%BB%E4%BD%95%E8%BD%AF%E4%BB%B6dpkg-error-processing-package-xxx%E7%9A%84%E9%97%AE/</a></li>\n<li><a href=\"https://askubuntu.com/questions/949760/dpkg-warning-files-list-file-for-package-missing\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/949760/dpkg-warning-files-list-file-for-package-missing</a></li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/358383/pexels-photo-358383.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":4190,"excerpt":"<h2 id=\"apt-get-install失败\"><a href=\"#apt-get-install失败\" class=\"headerlink\" title=\"apt-get install失败\"></a>apt-get install失败</h2>","more":"<h3 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h3><ol>\n<li><p>使用perf 报错 内核无法找到perf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@hw103:/home/yky/redis-5.0.3# perf </span><br><span class=\"line\">WARNING: perf not found for kernel 4.15.0-45</span><br><span class=\"line\"></span><br><span class=\"line\">  You may need to install the following packages for this specific kernel:</span><br><span class=\"line\">    linux-tools-4.15.0-45-generic</span><br><span class=\"line\">    linux-cloud-tools-4.15.0-45-generic</span><br><span class=\"line\"></span><br><span class=\"line\">  You may also want to install one of the following packages to keep up to date:</span><br><span class=\"line\">    linux-tools-generic</span><br><span class=\"line\">    linux-cloud-tools-generic</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>安装此内核的通用工具时错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@hw103:/home/yky/redis-5.0.3# apt-get install  linux-tools-4.15.0-45-generic</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">You might want to run &apos;apt-get -f install&apos; to correct these:</span><br><span class=\"line\">The following packages have unmet dependencies:</span><br><span class=\"line\"> console-setup : Depends: keyboard-configuration (= 1.178ubuntu2.7) but 1.108ubuntu15.3 is to be installed</span><br><span class=\"line\"> console-setup-linux : Depends: keyboard-configuration (= 1.178ubuntu2.7) but 1.108ubuntu15.3 is to be installed</span><br><span class=\"line\">                       Breaks: keyboard-configuration (&lt; 1.138) but 1.108ubuntu15.3 is to be installed</span><br><span class=\"line\"> linux-tools-4.15.0-45-generic : Depends: linux-tools-4.15.0-45 but it is not going to be installed</span><br><span class=\"line\">E: Unmet dependencies. Try &apos;apt-get -f install&apos; with no packages (or specify a solution).</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用apt-get -f install 时报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-rc.d: error: insserv rejected the script header</span><br><span class=\"line\">dpkg: error processing archive /var/cache/apt/archives/keyboard-configuration_1.178ubuntu2.7_all.deb (--unpack):</span><br><span class=\"line\"> subprocess new pre-installation script returned error exit status 1</span><br><span class=\"line\">dpkg-query: warning: files list file for package &apos;keyboard-configuration&apos; missing; assuming package has no files currently installed</span><br><span class=\"line\">dpkg-query: warning: files list file for package &apos;keyboard-configuration&apos; missing; assuming package has no files currently installed</span><br><span class=\"line\">dpkg-query: warning: files list file for package &apos;keyboard-configuration&apos; missing; assuming package has no files currently installed</span><br><span class=\"line\">Errors were encountered while processing:</span><br><span class=\"line\"> /var/cache/apt/archives/keyboard-configuration_1.178ubuntu2.7_all.deb</span><br><span class=\"line\">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure>\n<p>问题综述：</p>\n<ol>\n<li><code>apt-get install lib</code>时报错 Unmet dependencies</li>\n<li><code>apt-get install -f</code> 时报错Sub-process /usr/bin/dpkg returned an error code (1)</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li><p>第一阶段解决办法</p>\n<p>在/var/lib/dpkg/目录下有个info文件 ，然后文件中没有keyboard-configuration的相关文件但是有info的备份info_backup  ，这里面有相关的文件，于是将keyboard-configuration的所有相关文件都拷贝到了/var/lib/dpkg/info 中。</p>\n<p>在info_backup目录下执行如下命令拷贝</p>\n<p><code>cp keyboard-configuration.* ../info</code></p>\n<p>随后再次执行安装内核通用工具 报错为第二阶段</p>\n</li>\n</ol>\n<h3 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a>第二阶段</h3><ol>\n<li><p>安装此内核的通用工具时时报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insserv: Starting redis depends on plymouth and therefore on system facility `$all&apos; which can not be true!</span><br><span class=\"line\">insserv: exiting now without changing boot order!</span><br><span class=\"line\">update-rc.d: error: insserv rejected the script header</span><br><span class=\"line\">dpkg: error processing package avahi-daemon (--configure):</span><br><span class=\"line\"> subprocess installed post-installation script returned error exit status 1</span><br><span class=\"line\">No apport report written because MaxReports is reached already</span><br><span class=\"line\">                                                              No apport report written because MaxReports is reached already</span><br><span class=\"line\">                                                                                                                            dpkg: dependency problems prevent configuration o</span><br><span class=\"line\">f avahi-utils: avahi-utils depends on avahi-daemon; however:</span><br><span class=\"line\">  Package avahi-daemon is not configured yet.</span><br><span class=\"line\"></span><br><span class=\"line\">dpkg: error processing package avahi-utils (--configure):</span><br><span class=\"line\"> dependency problems - leaving unconfigured</span><br><span class=\"line\">Setting up unattended-upgrades (1.1ubuntu1.18.04.9) ...</span><br><span class=\"line\">dpkg: error processing package unattended-upgrades (--configure):</span><br><span class=\"line\"> subprocess installed post-installation script returned error exit status 10</span><br><span class=\"line\">No apport report written because MaxReports is reached already</span><br><span class=\"line\">                                                              Setting up linux-tools-4.15.0-45 (4.15.0-45.48) ...</span><br><span class=\"line\">Setting up linux-tools-4.15.0-45-generic (4.15.0-45.48) ...</span><br><span class=\"line\">Processing triggers for initramfs-tools (0.122ubuntu8.14) ...</span><br><span class=\"line\">Errors were encountered while processing:</span><br><span class=\"line\"> udev</span><br><span class=\"line\"> snapd</span><br><span class=\"line\"> ubuntu-core-launcher</span><br><span class=\"line\"> kmod</span><br><span class=\"line\"> ubuntu-drivers-common</span><br><span class=\"line\"> whoopsie</span><br><span class=\"line\"> openssh-server</span><br><span class=\"line\"> ssh</span><br><span class=\"line\"> avahi-daemon</span><br><span class=\"line\"> avahi-utils</span><br><span class=\"line\"> unattended-upgrades</span><br><span class=\"line\">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决办法：/var/lib/dpkg/info 目录下将上述出现问题的模块的postinst文件重命名。</p>\n<p>在/var/lib/dpkg/info 下写了个脚本</p>\n<p>solution.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">for pack in $(cat module.txt)</span><br><span class=\"line\">do </span><br><span class=\"line\">    mv &quot;$pack&quot;.postinst &quot;$pack&quot;.postinst.bak</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>其中module.txt的内容为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udev</span><br><span class=\"line\">snapd</span><br><span class=\"line\">ubuntu-core-launcher</span><br><span class=\"line\">kmod</span><br><span class=\"line\">ubuntu-drivers-common</span><br><span class=\"line\">whoopsie</span><br><span class=\"line\">openssh-server</span><br><span class=\"line\">ssh</span><br><span class=\"line\">avahi-daemon</span><br><span class=\"line\">avahi-utils</span><br><span class=\"line\">unattended-upgrades</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行脚本后 使用<code>sudo apt-get upgrade</code> 进行更新</p>\n</li>\n<li><p>参考：</p>\n<ol>\n<li><a href=\"https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E8%A7%A3%E5%86%B3ubuntu-%E6%97%A0%E6%B3%95%E7%94%A8-apt-get-install-%E5%AE%89%E8%A3%85%E4%BB%BB%E4%BD%95%E8%BD%AF%E4%BB%B6dpkg-error-processing-package-xxx%E7%9A%84%E9%97%AE/\" target=\"_blank\" rel=\"noopener\">https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E8%A7%A3%E5%86%B3ubuntu-%E6%97%A0%E6%B3%95%E7%94%A8-apt-get-install-%E5%AE%89%E8%A3%85%E4%BB%BB%E4%BD%95%E8%BD%AF%E4%BB%B6dpkg-error-processing-package-xxx%E7%9A%84%E9%97%AE/</a></li>\n<li><a href=\"https://askubuntu.com/questions/949760/dpkg-warning-files-list-file-for-package-missing\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/949760/dpkg-warning-files-list-file-for-package-missing</a></li>\n</ol>\n</li>\n</ol>"},{"title":"tee命令解析","date":"2018-06-23T09:21:19.000Z","copyright":true,"_content":"\n# make 2>&1 | tee log.txt 命令解析\n\n在安装mpich 的时候遇到了很多这个命令，此处学习下这个命令：`2>&1 | tee log.txt` \n\n<!--more-->\n\n这个命令共有三个部分： `2>&1` `|`  `tee log.txt`\n\n## 2>&1\n\nshell中：最常使用的 FD (file descriptor) 大概有三个 \n\n0表示标准输入Standard Input (STDIN)  \n\n1表示标准输出Standard Output (STDOUT)  \n\n 2表示标准错误输出 Standard Error Output (STDERR)  \n\n'>' 默认为标准输出重定向 （类似于c++ 中的 >>？）\n\n在标准情况下, 这些FD分别跟如下设备关联 \n\nstdin(0): keyboard  键盘输入,并返回在前端   \n\nstdout(1): monitor  正确返回值 输出到前端   \n\nstderr(2): monitor 错误返回值 输出到前端  \n\n1>&2  正确返回值传递给2输出通道 &2表示2输出通道   如果此处错写成 1>2, 就表示把1输出重定向到文件2中  2>&1 错误返回值传递给1输出通道, 同样&1表示1输出通道.  \n\n## |管道\n\n管道的作用是提供一个通道，将上一个程序的标准输出重定向到下一个程序作为下一个程序的标准输入。 \n\n## tee log.txt\n\ntee从标准输入中读取，并将读入的内容写到标准输出以及文件中。  此处将数据读入并写入到log.txt中\n\n## 总结\n\n这个命令将标准错误输出重定向到标准输出，然后再将标准输出重定向到log.txt文件中\n\n常用于make 后面将log信息保存下来。","source":"_posts/tee命令解析.md","raw":"---\ntitle: tee命令解析\ndate: 2018-06-23 17:21:19\ncategories: Linux\ntags: \n- Linux\n- command\ncopyright: true\n---\n\n# make 2>&1 | tee log.txt 命令解析\n\n在安装mpich 的时候遇到了很多这个命令，此处学习下这个命令：`2>&1 | tee log.txt` \n\n<!--more-->\n\n这个命令共有三个部分： `2>&1` `|`  `tee log.txt`\n\n## 2>&1\n\nshell中：最常使用的 FD (file descriptor) 大概有三个 \n\n0表示标准输入Standard Input (STDIN)  \n\n1表示标准输出Standard Output (STDOUT)  \n\n 2表示标准错误输出 Standard Error Output (STDERR)  \n\n'>' 默认为标准输出重定向 （类似于c++ 中的 >>？）\n\n在标准情况下, 这些FD分别跟如下设备关联 \n\nstdin(0): keyboard  键盘输入,并返回在前端   \n\nstdout(1): monitor  正确返回值 输出到前端   \n\nstderr(2): monitor 错误返回值 输出到前端  \n\n1>&2  正确返回值传递给2输出通道 &2表示2输出通道   如果此处错写成 1>2, 就表示把1输出重定向到文件2中  2>&1 错误返回值传递给1输出通道, 同样&1表示1输出通道.  \n\n## |管道\n\n管道的作用是提供一个通道，将上一个程序的标准输出重定向到下一个程序作为下一个程序的标准输入。 \n\n## tee log.txt\n\ntee从标准输入中读取，并将读入的内容写到标准输出以及文件中。  此处将数据读入并写入到log.txt中\n\n## 总结\n\n这个命令将标准错误输出重定向到标准输出，然后再将标准输出重定向到log.txt文件中\n\n常用于make 后面将log信息保存下来。","slug":"tee命令解析","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwj000isghd0rhp7kum","content":"<h1 id=\"make-2-gt-amp-1-tee-log-txt-命令解析\"><a href=\"#make-2-gt-amp-1-tee-log-txt-命令解析\" class=\"headerlink\" title=\"make 2&gt;&amp;1 | tee log.txt 命令解析\"></a>make 2&gt;&amp;1 | tee log.txt 命令解析</h1><p>在安装mpich 的时候遇到了很多这个命令，此处学习下这个命令：<code>2&gt;&amp;1 | tee log.txt</code> </p>\n<a id=\"more\"></a>\n<p>这个命令共有三个部分： <code>2&gt;&amp;1</code> <code>|</code>  <code>tee log.txt</code></p>\n<h2 id=\"2-gt-amp-1\"><a href=\"#2-gt-amp-1\" class=\"headerlink\" title=\"2&gt;&amp;1\"></a>2&gt;&amp;1</h2><p>shell中：最常使用的 FD (file descriptor) 大概有三个 </p>\n<p>0表示标准输入Standard Input (STDIN)  </p>\n<p>1表示标准输出Standard Output (STDOUT)  </p>\n<p> 2表示标准错误输出 Standard Error Output (STDERR)  </p>\n<p>‘&gt;’ 默认为标准输出重定向 （类似于c++ 中的 &gt;&gt;？）</p>\n<p>在标准情况下, 这些FD分别跟如下设备关联 </p>\n<p>stdin(0): keyboard  键盘输入,并返回在前端   </p>\n<p>stdout(1): monitor  正确返回值 输出到前端   </p>\n<p>stderr(2): monitor 错误返回值 输出到前端  </p>\n<p>1&gt;&amp;2  正确返回值传递给2输出通道 &amp;2表示2输出通道   如果此处错写成 1&gt;2, 就表示把1输出重定向到文件2中  2&gt;&amp;1 错误返回值传递给1输出通道, 同样&amp;1表示1输出通道.  </p>\n<h2 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"|管道\"></a>|管道</h2><p>管道的作用是提供一个通道，将上一个程序的标准输出重定向到下一个程序作为下一个程序的标准输入。 </p>\n<h2 id=\"tee-log-txt\"><a href=\"#tee-log-txt\" class=\"headerlink\" title=\"tee log.txt\"></a>tee log.txt</h2><p>tee从标准输入中读取，并将读入的内容写到标准输出以及文件中。  此处将数据读入并写入到log.txt中</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个命令将标准错误输出重定向到标准输出，然后再将标准输出重定向到log.txt文件中</p>\n<p>常用于make 后面将log信息保存下来。</p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/33545/sunrise-phu-quoc-island-ocean.jpg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":671,"excerpt":"<h1 id=\"make-2-gt-amp-1-tee-log-txt-命令解析\"><a href=\"#make-2-gt-amp-1-tee-log-txt-命令解析\" class=\"headerlink\" title=\"make 2&gt;&amp;1 | tee log.txt 命令解析\"></a>make 2&gt;&amp;1 | tee log.txt 命令解析</h1><p>在安装mpich 的时候遇到了很多这个命令，此处学习下这个命令：<code>2&gt;&amp;1 | tee log.txt</code> </p>","more":"<p>这个命令共有三个部分： <code>2&gt;&amp;1</code> <code>|</code>  <code>tee log.txt</code></p>\n<h2 id=\"2-gt-amp-1\"><a href=\"#2-gt-amp-1\" class=\"headerlink\" title=\"2&gt;&amp;1\"></a>2&gt;&amp;1</h2><p>shell中：最常使用的 FD (file descriptor) 大概有三个 </p>\n<p>0表示标准输入Standard Input (STDIN)  </p>\n<p>1表示标准输出Standard Output (STDOUT)  </p>\n<p> 2表示标准错误输出 Standard Error Output (STDERR)  </p>\n<p>‘&gt;’ 默认为标准输出重定向 （类似于c++ 中的 &gt;&gt;？）</p>\n<p>在标准情况下, 这些FD分别跟如下设备关联 </p>\n<p>stdin(0): keyboard  键盘输入,并返回在前端   </p>\n<p>stdout(1): monitor  正确返回值 输出到前端   </p>\n<p>stderr(2): monitor 错误返回值 输出到前端  </p>\n<p>1&gt;&amp;2  正确返回值传递给2输出通道 &amp;2表示2输出通道   如果此处错写成 1&gt;2, 就表示把1输出重定向到文件2中  2&gt;&amp;1 错误返回值传递给1输出通道, 同样&amp;1表示1输出通道.  </p>\n<h2 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"|管道\"></a>|管道</h2><p>管道的作用是提供一个通道，将上一个程序的标准输出重定向到下一个程序作为下一个程序的标准输入。 </p>\n<h2 id=\"tee-log-txt\"><a href=\"#tee-log-txt\" class=\"headerlink\" title=\"tee log.txt\"></a>tee log.txt</h2><p>tee从标准输入中读取，并将读入的内容写到标准输出以及文件中。  此处将数据读入并写入到log.txt中</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个命令将标准错误输出重定向到标准输出，然后再将标准输出重定向到log.txt文件中</p>\n<p>常用于make 后面将log信息保存下来。</p>"},{"title":"Make学习","date":"2018-10-09T14:51:57.000Z","copyright":true,"_content":"\n# make学习\n\n开始阅读redis源码，都说redis很简单，源码不多。但是源码包下载下来后却发现不知道从何处入手，有那么多文件和源码。后面查找资料才发现阅读源码的第一步就是阅读Makefile，项目如何构建和源码间的关联都写在了Makefile文件中。之前没有接触过Makefile，记录下Make的学习。\n\n<!--more-->\n\n## makefile的格式\n\n1. 概述\n\n   makefile 文件由一系列rules组成 rules的格式为：\n\n```\n<target> : <prerequisites> \n[tab]  <commands>\n```\n\n​\t\"目标\"是必需的，不可省略；\"前置条件\"和\"命令\"都是可选的，但是两者之中必须至少存在一个。 \n\n​\t每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。 \n\n2. target\n\n   一个目标（target）就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象，比如上文的 a.txt 目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。（make的时候指定文件名从而对该文件进行构建build）\n\n   除了文件名，目标还可以是某个操作的名字，这称为\"伪目标\"（phony target）。伪目标不生成文件，只执行命令。\n\n   比如：\n\n   ```\n   clean:\n         rm *.o\n   ```\n\n   此时执行`make clean` 命令则会进行`rm *.o` 的操作。\n\n   但是当存在clean这个文件时，那么这个命令不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。\n\n   为了避免这种情况，可以明确声明clean是\"伪目标\"，写法如下。\n\n   ```\n   .PHONY: clean\n   clean:\n           rm *.o temp\n   ```\n\n   如果Make命令运行时没有指定目标，默认会执行Makefile文件的第一个目标。 \n\n3. prerequisites\n\n   前置条件通常是一组文件名，之间用空格分隔。它指定了\"目标\"是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的last-modification时间戳比目标的时间戳新），\"目标\"就需要重新构建。 \n\n   没有前置条件，就意味着它跟其他文件都无关，只要这个target文件还不存在 就需要执行命令构建\n\n   如果需要生成多个文件，往往采用下面的写法。 \n\n   `source: file1 file2 file3`  \n\n   无需加上命令，当三个文件不存在时，执行`make source`就会生成这三个文件。\n\n4. commands\n\n   命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建\"目标\"的具体指令，它的运行结果通常就是生成目标文件。 \n\n   每行命令之前必须有一个tab键 \n\n   需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。\n\n   ```\n   var-lost:\n       export foo=bar\n       echo \"foo=[$$foo]\"\n   ```\n\n   上面代码执行后（`make var-lost`），取不到foo的值。因为两行命令在两个不同的进程执行。 \n\n   解决办法：\n\n    1. 命令写在同1行\n\n    2. 换行符前加反斜杠转义\n\n       ```\n       var-kept:\n           export foo=bar; \\\n           echo \"foo=[$$foo]\"\n       ```\n\n   \t3. 加上`.ONESHELL:`命令 \n\n       ```\n       .ONESHELL:\n       var-kept:\n           export foo=bar; \n           echo \"foo=[$$foo]\"\n       ```\n\n## makefile的语法\n\n1. 注释\n\n   井号（#）在Makefile中表示注释。 \n\n2. 回声（echoing）\n\n   正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）。\n\n   在命令的前面加上@，就可以关闭回声。 \n\n   由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。 \n\n3. 通配符\n\n   由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。 \n\n4. 模式匹配\n\n   Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。 \n\n   ```\n   %.o: %.c\n   ```\n\n   等同于\n\n   ```\n   f1.o: f1.c\n   f2.o: f2.c\n   ```\n\n   使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。 \n\n5. 变量和赋值符\n\n   Makefile 允许使用等号自定义变量。 \n\n   ```\n   txt = Hello World\n   test:\n       @echo $(txt)\n   ```\n\n   上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 $( ) 之中 \n\n   调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。 \n\n6. 内置变量\n\n   Make命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性 gmake、cmake、dmake等等。\n\n   $(AR) ：函数库打包程序,将对应的gcc编译出来的obj文件打包成静态链接库程序。\n\n   ar可以集合许多文件，成为单一的备存文件。在备存文件中，所有成员文件皆保有原来的属性与权限。\n\n7. 自动变量\n\n   1. $@指代当前目标，就是Make命令当前构建的那个目标  target\n\n   2. $<指代第一个前置条件。比如，规则为 t: p1 p2，那么$< 就指代p1 \n\n   3. $？指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代p2。 \n\n   4. $^指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。 \n\n   5. $*指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，$* 就表示 f1。 \n\n   6. $(@D) 和 $(@F)$(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。比如，$@是 src/input.c，那么$(@D) 的值为 src ，$(@F) 的值为 input.c。 \n\n   7. $(<D) 和 $(<F)\n\n      $(<D) 和 $(<F) 分别指向 $< 的目录名和文件名。\n\n8. 其他\n\n   1. `.DEFAULT：`表示找不到匹配规则时，就执行该recipe。  \n\n      ```\n      default:all\n      .DEFAULT:\n      \tcommands\n      ```\n\n      这里当执行`make default` 时会转到`make all` 因为default：all 这个target没有隐式规则。所以最后会执行commands。\n\n   2. 忽略命令的出错，可以在Makefile的命令行前加一个减号\"-\"(在Tab键之后)，标记为不管命令出不出错都认为是成功的。如：     \n\n      ```\n      clean:        \n      \t-(rm -f *.o )\n      ```\n\n   3. `include filename` 将filename中的内容导入，如果找不到会停止make， `-include filename` 则不会停止make。 \n\n## 几种等号\n\n= 是最基本的赋值\n:= 是覆盖之前的值\n?= 是如果没有被赋值过就赋予等号后面的值\n+= 是添加等号后面的值\n\n=与:= 的区别\n\n =：make会将整个makefile展开后，再决定变量的值。也就是说，变量的值将会是整个makefile中最后被指定的值。例子为：\n\n```makefile\n     x = foo\n     y = $(x) bar\n     x = xyz\n```\n\ny的值将会是 xyz bar ，而不是 foo bar 。因为展开后最终变成的是xyz\n\n:=表示变量的值决定于它在makefile中的位置，而不是整个makefile展开后的最终值。\n\n```makefile\n x := foo\n y := $(x) bar\n x := xyz\n```\n\ny的值将会是 foo bar ，而不是 xyz bar 了。\n\n## 参考资料：\n\n1. http://www.ruanyifeng.com/blog/2015/02/make.html\n2. https://gist.github.com/isaacs/62a2d1825d04437c6f08 makefile文件教程\n3. https://www.gnu.org/software/make/manual/make.html GNUmake手册\n4. <https://blog.csdn.net/shouso888/article/details/7226030> 等号解释\n\n","source":"_posts/make学习.md","raw":"---\ntitle: Make学习\ndate: 2018-10-09 22:51:57\ncategories: 编程语言\ntags:\n- make\ncopyright: true\n---\n\n# make学习\n\n开始阅读redis源码，都说redis很简单，源码不多。但是源码包下载下来后却发现不知道从何处入手，有那么多文件和源码。后面查找资料才发现阅读源码的第一步就是阅读Makefile，项目如何构建和源码间的关联都写在了Makefile文件中。之前没有接触过Makefile，记录下Make的学习。\n\n<!--more-->\n\n## makefile的格式\n\n1. 概述\n\n   makefile 文件由一系列rules组成 rules的格式为：\n\n```\n<target> : <prerequisites> \n[tab]  <commands>\n```\n\n​\t\"目标\"是必需的，不可省略；\"前置条件\"和\"命令\"都是可选的，但是两者之中必须至少存在一个。 \n\n​\t每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。 \n\n2. target\n\n   一个目标（target）就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象，比如上文的 a.txt 目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。（make的时候指定文件名从而对该文件进行构建build）\n\n   除了文件名，目标还可以是某个操作的名字，这称为\"伪目标\"（phony target）。伪目标不生成文件，只执行命令。\n\n   比如：\n\n   ```\n   clean:\n         rm *.o\n   ```\n\n   此时执行`make clean` 命令则会进行`rm *.o` 的操作。\n\n   但是当存在clean这个文件时，那么这个命令不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。\n\n   为了避免这种情况，可以明确声明clean是\"伪目标\"，写法如下。\n\n   ```\n   .PHONY: clean\n   clean:\n           rm *.o temp\n   ```\n\n   如果Make命令运行时没有指定目标，默认会执行Makefile文件的第一个目标。 \n\n3. prerequisites\n\n   前置条件通常是一组文件名，之间用空格分隔。它指定了\"目标\"是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的last-modification时间戳比目标的时间戳新），\"目标\"就需要重新构建。 \n\n   没有前置条件，就意味着它跟其他文件都无关，只要这个target文件还不存在 就需要执行命令构建\n\n   如果需要生成多个文件，往往采用下面的写法。 \n\n   `source: file1 file2 file3`  \n\n   无需加上命令，当三个文件不存在时，执行`make source`就会生成这三个文件。\n\n4. commands\n\n   命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建\"目标\"的具体指令，它的运行结果通常就是生成目标文件。 \n\n   每行命令之前必须有一个tab键 \n\n   需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。\n\n   ```\n   var-lost:\n       export foo=bar\n       echo \"foo=[$$foo]\"\n   ```\n\n   上面代码执行后（`make var-lost`），取不到foo的值。因为两行命令在两个不同的进程执行。 \n\n   解决办法：\n\n    1. 命令写在同1行\n\n    2. 换行符前加反斜杠转义\n\n       ```\n       var-kept:\n           export foo=bar; \\\n           echo \"foo=[$$foo]\"\n       ```\n\n   \t3. 加上`.ONESHELL:`命令 \n\n       ```\n       .ONESHELL:\n       var-kept:\n           export foo=bar; \n           echo \"foo=[$$foo]\"\n       ```\n\n## makefile的语法\n\n1. 注释\n\n   井号（#）在Makefile中表示注释。 \n\n2. 回声（echoing）\n\n   正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）。\n\n   在命令的前面加上@，就可以关闭回声。 \n\n   由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。 \n\n3. 通配符\n\n   由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。 \n\n4. 模式匹配\n\n   Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。 \n\n   ```\n   %.o: %.c\n   ```\n\n   等同于\n\n   ```\n   f1.o: f1.c\n   f2.o: f2.c\n   ```\n\n   使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。 \n\n5. 变量和赋值符\n\n   Makefile 允许使用等号自定义变量。 \n\n   ```\n   txt = Hello World\n   test:\n       @echo $(txt)\n   ```\n\n   上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 $( ) 之中 \n\n   调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。 \n\n6. 内置变量\n\n   Make命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性 gmake、cmake、dmake等等。\n\n   $(AR) ：函数库打包程序,将对应的gcc编译出来的obj文件打包成静态链接库程序。\n\n   ar可以集合许多文件，成为单一的备存文件。在备存文件中，所有成员文件皆保有原来的属性与权限。\n\n7. 自动变量\n\n   1. $@指代当前目标，就是Make命令当前构建的那个目标  target\n\n   2. $<指代第一个前置条件。比如，规则为 t: p1 p2，那么$< 就指代p1 \n\n   3. $？指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代p2。 \n\n   4. $^指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。 \n\n   5. $*指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，$* 就表示 f1。 \n\n   6. $(@D) 和 $(@F)$(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。比如，$@是 src/input.c，那么$(@D) 的值为 src ，$(@F) 的值为 input.c。 \n\n   7. $(<D) 和 $(<F)\n\n      $(<D) 和 $(<F) 分别指向 $< 的目录名和文件名。\n\n8. 其他\n\n   1. `.DEFAULT：`表示找不到匹配规则时，就执行该recipe。  \n\n      ```\n      default:all\n      .DEFAULT:\n      \tcommands\n      ```\n\n      这里当执行`make default` 时会转到`make all` 因为default：all 这个target没有隐式规则。所以最后会执行commands。\n\n   2. 忽略命令的出错，可以在Makefile的命令行前加一个减号\"-\"(在Tab键之后)，标记为不管命令出不出错都认为是成功的。如：     \n\n      ```\n      clean:        \n      \t-(rm -f *.o )\n      ```\n\n   3. `include filename` 将filename中的内容导入，如果找不到会停止make， `-include filename` 则不会停止make。 \n\n## 几种等号\n\n= 是最基本的赋值\n:= 是覆盖之前的值\n?= 是如果没有被赋值过就赋予等号后面的值\n+= 是添加等号后面的值\n\n=与:= 的区别\n\n =：make会将整个makefile展开后，再决定变量的值。也就是说，变量的值将会是整个makefile中最后被指定的值。例子为：\n\n```makefile\n     x = foo\n     y = $(x) bar\n     x = xyz\n```\n\ny的值将会是 xyz bar ，而不是 foo bar 。因为展开后最终变成的是xyz\n\n:=表示变量的值决定于它在makefile中的位置，而不是整个makefile展开后的最终值。\n\n```makefile\n x := foo\n y := $(x) bar\n x := xyz\n```\n\ny的值将会是 foo bar ，而不是 xyz bar 了。\n\n## 参考资料：\n\n1. http://www.ruanyifeng.com/blog/2015/02/make.html\n2. https://gist.github.com/isaacs/62a2d1825d04437c6f08 makefile文件教程\n3. https://www.gnu.org/software/make/manual/make.html GNUmake手册\n4. <https://blog.csdn.net/shouso888/article/details/7226030> 等号解释\n\n","slug":"make学习","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwm000msghdqd053jnp","content":"<h1 id=\"make学习\"><a href=\"#make学习\" class=\"headerlink\" title=\"make学习\"></a>make学习</h1><p>开始阅读redis源码，都说redis很简单，源码不多。但是源码包下载下来后却发现不知道从何处入手，有那么多文件和源码。后面查找资料才发现阅读源码的第一步就是阅读Makefile，项目如何构建和源码间的关联都写在了Makefile文件中。之前没有接触过Makefile，记录下Make的学习。</p>\n<a id=\"more\"></a>\n<h2 id=\"makefile的格式\"><a href=\"#makefile的格式\" class=\"headerlink\" title=\"makefile的格式\"></a>makefile的格式</h2><ol>\n<li><p>概述</p>\n<p>makefile 文件由一系列rules组成 rules的格式为：</p>\n</li>\n</ol>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class=\"line\">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure></div>\n<p>​    “目标”是必需的，不可省略；”前置条件”和”命令”都是可选的，但是两者之中必须至少存在一个。 </p>\n<p>​    每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。 </p>\n<ol>\n<li><p>target</p>\n<p>一个目标（target）就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象，比如上文的 a.txt 目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。（make的时候指定文件名从而对该文件进行构建build）</p>\n<p>除了文件名，目标还可以是某个操作的名字，这称为”伪目标”（phony target）。伪目标不生成文件，只执行命令。</p>\n<p>比如：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">      rm *.o</span><br></pre></td></tr></table></figure></div>\n<p>此时执行<code>make clean</code> 命令则会进行<code>rm *.o</code> 的操作。</p>\n<p>但是当存在clean这个文件时，那么这个命令不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。</p>\n<p>为了避免这种情况，可以明确声明clean是”伪目标”，写法如下。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm *.o temp</span><br></pre></td></tr></table></figure></div>\n<p>如果Make命令运行时没有指定目标，默认会执行Makefile文件的第一个目标。 </p>\n</li>\n<li><p>prerequisites</p>\n<p>前置条件通常是一组文件名，之间用空格分隔。它指定了”目标”是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的last-modification时间戳比目标的时间戳新），”目标”就需要重新构建。 </p>\n<p>没有前置条件，就意味着它跟其他文件都无关，只要这个target文件还不存在 就需要执行命令构建</p>\n<p>如果需要生成多个文件，往往采用下面的写法。 </p>\n<p><code>source: file1 file2 file3</code>  </p>\n<p>无需加上命令，当三个文件不存在时，执行<code>make source</code>就会生成这三个文件。</p>\n</li>\n<li><p>commands</p>\n<p>命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建”目标”的具体指令，它的运行结果通常就是生成目标文件。 </p>\n<p>每行命令之前必须有一个tab键 </p>\n<p>需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var-lost:</span><br><span class=\"line\">    export foo=bar</span><br><span class=\"line\">    echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure></div>\n<p>上面代码执行后（<code>make var-lost</code>），取不到foo的值。因为两行命令在两个不同的进程执行。 </p>\n<p>解决办法：</p>\n<ol>\n<li><p>命令写在同1行</p>\n</li>\n<li><p>换行符前加反斜杠转义</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var-kept:</span><br><span class=\"line\">    export foo=bar; \\</span><br><span class=\"line\">    echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure></div>\n<ol>\n<li>加上<code>.ONESHELL:</code>命令 </li>\n</ol>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ONESHELL:</span><br><span class=\"line\">var-kept:</span><br><span class=\"line\">    export foo=bar; </span><br><span class=\"line\">    echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"makefile的语法\"><a href=\"#makefile的语法\" class=\"headerlink\" title=\"makefile的语法\"></a>makefile的语法</h2><ol>\n<li><p>注释</p>\n<p>井号（#）在Makefile中表示注释。 </p>\n</li>\n<li><p>回声（echoing）</p>\n<p>正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）。</p>\n<p>在命令的前面加上@，就可以关闭回声。 </p>\n<p>由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。 </p>\n</li>\n<li><p>通配符</p>\n<p>由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。 </p>\n</li>\n<li><p>模式匹配</p>\n<p>Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。 </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%.o: %.c</span><br></pre></td></tr></table></figure></div>\n<p>等同于</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1.o: f1.c</span><br><span class=\"line\">f2.o: f2.c</span><br></pre></td></tr></table></figure></div>\n<p>使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。 </p>\n</li>\n<li><p>变量和赋值符</p>\n<p>Makefile 允许使用等号自定义变量。 </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">txt = Hello World</span><br><span class=\"line\">test:</span><br><span class=\"line\">    @echo $(txt)</span><br></pre></td></tr></table></figure></div>\n<p>上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 $( ) 之中 </p>\n<p>调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。 </p>\n</li>\n<li><p>内置变量</p>\n<p>Make命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性 gmake、cmake、dmake等等。</p>\n<p>$(AR) ：函数库打包程序,将对应的gcc编译出来的obj文件打包成静态链接库程序。</p>\n<p>ar可以集合许多文件，成为单一的备存文件。在备存文件中，所有成员文件皆保有原来的属性与权限。</p>\n</li>\n<li><p>自动变量</p>\n<ol>\n<li><p>$@指代当前目标，就是Make命令当前构建的那个目标  target</p>\n</li>\n<li><p>$&lt;指代第一个前置条件。比如，规则为 t: p1 p2，那么$&lt; 就指代p1 </p>\n</li>\n<li><p>$？指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代p2。 </p>\n</li>\n<li><p>$^指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。 </p>\n</li>\n<li><p>$<em>指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，$</em> 就表示 f1。 </p>\n</li>\n<li><p>$(@D) 和 $(@F)$(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。比如，$@是 src/input.c，那么$(@D) 的值为 src ，$(@F) 的值为 input.c。 </p>\n</li>\n<li><p>$(&lt;D) 和 $(&lt;F)</p>\n<p>$(&lt;D) 和 $(&lt;F) 分别指向 $&lt; 的目录名和文件名。</p>\n</li>\n</ol>\n</li>\n<li><p>其他</p>\n<ol>\n<li><p><code>.DEFAULT：</code>表示找不到匹配规则时，就执行该recipe。  </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default:all</span><br><span class=\"line\">.DEFAULT:</span><br><span class=\"line\">\tcommands</span><br></pre></td></tr></table></figure></div>\n<p>这里当执行<code>make default</code> 时会转到<code>make all</code> 因为default：all 这个target没有隐式规则。所以最后会执行commands。</p>\n</li>\n<li><p>忽略命令的出错，可以在Makefile的命令行前加一个减号”-“(在Tab键之后)，标记为不管命令出不出错都认为是成功的。如：     </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:        </span><br><span class=\"line\">\t-(rm -f *.o )</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><code>include filename</code> 将filename中的内容导入，如果找不到会停止make， <code>-include filename</code> 则不会停止make。 </p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"几种等号\"><a href=\"#几种等号\" class=\"headerlink\" title=\"几种等号\"></a>几种等号</h2><p>= 是最基本的赋值<br>:= 是覆盖之前的值<br>?= 是如果没有被赋值过就赋予等号后面的值<br>+= 是添加等号后面的值</p>\n<p>=与:= 的区别</p>\n<p> =：make会将整个makefile展开后，再决定变量的值。也就是说，变量的值将会是整个makefile中最后被指定的值。例子为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">makefile</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = foo</span><br><span class=\"line\">y = <span class=\"variable\">$(x)</span> bar</span><br><span class=\"line\">x = xyz</span><br></pre></td></tr></table></figure></div>\n<p>y的值将会是 xyz bar ，而不是 foo bar 。因为展开后最终变成的是xyz</p>\n<p>:=表示变量的值决定于它在makefile中的位置，而不是整个makefile展开后的最终值。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">makefile</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := foo</span><br><span class=\"line\">y := <span class=\"variable\">$(x)</span> bar</span><br><span class=\"line\">x := xyz</span><br></pre></td></tr></table></figure></div>\n<p>y的值将会是 foo bar ，而不是 xyz bar 了。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/02/make.html</a></li>\n<li><a href=\"https://gist.github.com/isaacs/62a2d1825d04437c6f08\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/isaacs/62a2d1825d04437c6f08</a> makefile文件教程</li>\n<li><a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">https://www.gnu.org/software/make/manual/make.html</a> GNUmake手册</li>\n<li><a href=\"https://blog.csdn.net/shouso888/article/details/7226030\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/shouso888/article/details/7226030</a> 等号解释</li>\n</ol>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/655674/pexels-photo-655674.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":3190,"excerpt":"<h1 id=\"make学习\"><a href=\"#make学习\" class=\"headerlink\" title=\"make学习\"></a>make学习</h1><p>开始阅读redis源码，都说redis很简单，源码不多。但是源码包下载下来后却发现不知道从何处入手，有那么多文件和源码。后面查找资料才发现阅读源码的第一步就是阅读Makefile，项目如何构建和源码间的关联都写在了Makefile文件中。之前没有接触过Makefile，记录下Make的学习。</p>","more":"<h2 id=\"makefile的格式\"><a href=\"#makefile的格式\" class=\"headerlink\" title=\"makefile的格式\"></a>makefile的格式</h2><ol>\n<li><p>概述</p>\n<p>makefile 文件由一系列rules组成 rules的格式为：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class=\"line\">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>\n<p>​    “目标”是必需的，不可省略；”前置条件”和”命令”都是可选的，但是两者之中必须至少存在一个。 </p>\n<p>​    每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。 </p>\n<ol>\n<li><p>target</p>\n<p>一个目标（target）就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象，比如上文的 a.txt 目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。（make的时候指定文件名从而对该文件进行构建build）</p>\n<p>除了文件名，目标还可以是某个操作的名字，这称为”伪目标”（phony target）。伪目标不生成文件，只执行命令。</p>\n<p>比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">      rm *.o</span><br></pre></td></tr></table></figure>\n<p>此时执行<code>make clean</code> 命令则会进行<code>rm *.o</code> 的操作。</p>\n<p>但是当存在clean这个文件时，那么这个命令不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。</p>\n<p>为了避免这种情况，可以明确声明clean是”伪目标”，写法如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm *.o temp</span><br></pre></td></tr></table></figure>\n<p>如果Make命令运行时没有指定目标，默认会执行Makefile文件的第一个目标。 </p>\n</li>\n<li><p>prerequisites</p>\n<p>前置条件通常是一组文件名，之间用空格分隔。它指定了”目标”是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的last-modification时间戳比目标的时间戳新），”目标”就需要重新构建。 </p>\n<p>没有前置条件，就意味着它跟其他文件都无关，只要这个target文件还不存在 就需要执行命令构建</p>\n<p>如果需要生成多个文件，往往采用下面的写法。 </p>\n<p><code>source: file1 file2 file3</code>  </p>\n<p>无需加上命令，当三个文件不存在时，执行<code>make source</code>就会生成这三个文件。</p>\n</li>\n<li><p>commands</p>\n<p>命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建”目标”的具体指令，它的运行结果通常就是生成目标文件。 </p>\n<p>每行命令之前必须有一个tab键 </p>\n<p>需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var-lost:</span><br><span class=\"line\">    export foo=bar</span><br><span class=\"line\">    echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure>\n<p>上面代码执行后（<code>make var-lost</code>），取不到foo的值。因为两行命令在两个不同的进程执行。 </p>\n<p>解决办法：</p>\n<ol>\n<li><p>命令写在同1行</p>\n</li>\n<li><p>换行符前加反斜杠转义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var-kept:</span><br><span class=\"line\">    export foo=bar; \\</span><br><span class=\"line\">    echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>加上<code>.ONESHELL:</code>命令 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ONESHELL:</span><br><span class=\"line\">var-kept:</span><br><span class=\"line\">    export foo=bar; </span><br><span class=\"line\">    echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"makefile的语法\"><a href=\"#makefile的语法\" class=\"headerlink\" title=\"makefile的语法\"></a>makefile的语法</h2><ol>\n<li><p>注释</p>\n<p>井号（#）在Makefile中表示注释。 </p>\n</li>\n<li><p>回声（echoing）</p>\n<p>正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）。</p>\n<p>在命令的前面加上@，就可以关闭回声。 </p>\n<p>由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。 </p>\n</li>\n<li><p>通配符</p>\n<p>由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。 </p>\n</li>\n<li><p>模式匹配</p>\n<p>Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%.o: %.c</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1.o: f1.c</span><br><span class=\"line\">f2.o: f2.c</span><br></pre></td></tr></table></figure>\n<p>使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。 </p>\n</li>\n<li><p>变量和赋值符</p>\n<p>Makefile 允许使用等号自定义变量。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">txt = Hello World</span><br><span class=\"line\">test:</span><br><span class=\"line\">    @echo $(txt)</span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 $( ) 之中 </p>\n<p>调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。 </p>\n</li>\n<li><p>内置变量</p>\n<p>Make命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性 gmake、cmake、dmake等等。</p>\n<p>$(AR) ：函数库打包程序,将对应的gcc编译出来的obj文件打包成静态链接库程序。</p>\n<p>ar可以集合许多文件，成为单一的备存文件。在备存文件中，所有成员文件皆保有原来的属性与权限。</p>\n</li>\n<li><p>自动变量</p>\n<ol>\n<li><p>$@指代当前目标，就是Make命令当前构建的那个目标  target</p>\n</li>\n<li><p>$&lt;指代第一个前置条件。比如，规则为 t: p1 p2，那么$&lt; 就指代p1 </p>\n</li>\n<li><p>$？指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代p2。 </p>\n</li>\n<li><p>$^指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。 </p>\n</li>\n<li><p>$<em>指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，$</em> 就表示 f1。 </p>\n</li>\n<li><p>$(@D) 和 $(@F)$(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。比如，$@是 src/input.c，那么$(@D) 的值为 src ，$(@F) 的值为 input.c。 </p>\n</li>\n<li><p>$(&lt;D) 和 $(&lt;F)</p>\n<p>$(&lt;D) 和 $(&lt;F) 分别指向 $&lt; 的目录名和文件名。</p>\n</li>\n</ol>\n</li>\n<li><p>其他</p>\n<ol>\n<li><p><code>.DEFAULT：</code>表示找不到匹配规则时，就执行该recipe。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default:all</span><br><span class=\"line\">.DEFAULT:</span><br><span class=\"line\">\tcommands</span><br></pre></td></tr></table></figure>\n<p>这里当执行<code>make default</code> 时会转到<code>make all</code> 因为default：all 这个target没有隐式规则。所以最后会执行commands。</p>\n</li>\n<li><p>忽略命令的出错，可以在Makefile的命令行前加一个减号”-“(在Tab键之后)，标记为不管命令出不出错都认为是成功的。如：     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:        </span><br><span class=\"line\">\t-(rm -f *.o )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>include filename</code> 将filename中的内容导入，如果找不到会停止make， <code>-include filename</code> 则不会停止make。 </p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"几种等号\"><a href=\"#几种等号\" class=\"headerlink\" title=\"几种等号\"></a>几种等号</h2><p>= 是最基本的赋值<br>:= 是覆盖之前的值<br>?= 是如果没有被赋值过就赋予等号后面的值<br>+= 是添加等号后面的值</p>\n<p>=与:= 的区别</p>\n<p> =：make会将整个makefile展开后，再决定变量的值。也就是说，变量的值将会是整个makefile中最后被指定的值。例子为：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = foo</span><br><span class=\"line\">y = <span class=\"variable\">$(x)</span> bar</span><br><span class=\"line\">x = xyz</span><br></pre></td></tr></table></figure>\n<p>y的值将会是 xyz bar ，而不是 foo bar 。因为展开后最终变成的是xyz</p>\n<p>:=表示变量的值决定于它在makefile中的位置，而不是整个makefile展开后的最终值。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := foo</span><br><span class=\"line\">y := <span class=\"variable\">$(x)</span> bar</span><br><span class=\"line\">x := xyz</span><br></pre></td></tr></table></figure>\n<p>y的值将会是 foo bar ，而不是 xyz bar 了。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/02/make.html</a></li>\n<li><a href=\"https://gist.github.com/isaacs/62a2d1825d04437c6f08\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/isaacs/62a2d1825d04437c6f08</a> makefile文件教程</li>\n<li><a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">https://www.gnu.org/software/make/manual/make.html</a> GNUmake手册</li>\n<li><a href=\"https://blog.csdn.net/shouso888/article/details/7226030\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/shouso888/article/details/7226030</a> 等号解释</li>\n</ol>"},{"title":"ping 无法连接外网","date":"2019-03-15T05:51:47.000Z","copyright":true,"_content":"\n\n\n## ping 无法连接外网\n\n<!--more-->\n\n### 问题\n\nping外网ping不通\n\n```\nyky@hw076:~/tmux> ping www.baidu.com\nping: unknown host www.baidu.com\nyky@hw076:~/tmux> ping 8.8.8.8\nconnect: Network is unreachable\n```\n\nping内网可以ping通\n\n```\nhw076:~ # ping 172.18.11.114\nPING 172.18.11.114 (172.18.11.114) 56(84) bytes of data.\n64 bytes from 172.18.11.114: icmp_seq=1 ttl=64 time=0.193 ms\n64 bytes from 172.18.11.114: icmp_seq=2 ttl=64 time=0.216 ms\n64 bytes from 172.18.11.114: icmp_seq=3 ttl=64 time=0.207 ms\n64 bytes from 172.18.11.114: icmp_seq=4 ttl=64 time=0.200 ms\n^C\n--- 172.18.11.114 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 2999ms\nrtt min/avg/max/mdev = 0.193/0.204/0.216/0.008 ms\n\n```\n\nifconfig信息为：\n\n```\nhw076:~ # ifconfig \neth0      Link encap:Ethernet  HWaddr 90:E2:BA:15:C9:C4  \n          inet addr:172.18.11.76  Bcast:192.168.1.255  Mask:255.255.0.0\n          inet6 addr: fe80::92e2:baff:fe15:c9c4/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:9725797 errors:0 dropped:506 overruns:0 frame:0\n          TX packets:21023 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:598731249 (570.9 Mb)  TX bytes:2767270 (2.6 Mb)\n          Memory:fb480000-fb500000 \n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:276 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:276 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:25088 (24.5 Kb)  TX bytes:25088 (24.5 Kb)\n```\n\nroute显示路由信息如下：\n\n```\nhw076:/etc/netconfig.d # route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         *               0.0.0.0         UG    0      0        0 eth0\nloopback        *               255.0.0.0       U     0      0        0 lo\nlink-local      *               255.255.0.0     U     0      0        0 eth0\n172.18.0.0      *               255.255.0.0     U     0      0        0 eth0\n```\n\n原因是route没有配置网关，gateway是空着的。\n\n### 解决方法\n\n通过查看其他可以正常访问的节点的路由信息，得知网关节点为：172.18.0.254。因此增加默认网关节点配置。\n\n执行命令：\n\n```\nroute add default  gw 172.18.0.254\n```\n\n再次查看路由信息：\n\n```\nhw076:~ # route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         172.18.0.254    0.0.0.0         UG    0      0        0 eth0\nloopback        *               255.0.0.0       U     0      0        0 lo\nlink-local      *               255.255.0.0     U     0      0        0 eth0\n172.18.0.0      *               255.255.0.0     U     0      0        0 eth0\n```\n\n再次ping8.8.8.8显示正常，问题解决。","source":"_posts/ping 问题.md","raw":"---\ntitle: ping 无法连接外网\ndate: 2019-03-15 13:51:47\ncategories: Linux\ntags:\n- Linux\n- 运维\n- 网络问题\ncopyright: true\n---\n\n\n\n## ping 无法连接外网\n\n<!--more-->\n\n### 问题\n\nping外网ping不通\n\n```\nyky@hw076:~/tmux> ping www.baidu.com\nping: unknown host www.baidu.com\nyky@hw076:~/tmux> ping 8.8.8.8\nconnect: Network is unreachable\n```\n\nping内网可以ping通\n\n```\nhw076:~ # ping 172.18.11.114\nPING 172.18.11.114 (172.18.11.114) 56(84) bytes of data.\n64 bytes from 172.18.11.114: icmp_seq=1 ttl=64 time=0.193 ms\n64 bytes from 172.18.11.114: icmp_seq=2 ttl=64 time=0.216 ms\n64 bytes from 172.18.11.114: icmp_seq=3 ttl=64 time=0.207 ms\n64 bytes from 172.18.11.114: icmp_seq=4 ttl=64 time=0.200 ms\n^C\n--- 172.18.11.114 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 2999ms\nrtt min/avg/max/mdev = 0.193/0.204/0.216/0.008 ms\n\n```\n\nifconfig信息为：\n\n```\nhw076:~ # ifconfig \neth0      Link encap:Ethernet  HWaddr 90:E2:BA:15:C9:C4  \n          inet addr:172.18.11.76  Bcast:192.168.1.255  Mask:255.255.0.0\n          inet6 addr: fe80::92e2:baff:fe15:c9c4/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:9725797 errors:0 dropped:506 overruns:0 frame:0\n          TX packets:21023 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:598731249 (570.9 Mb)  TX bytes:2767270 (2.6 Mb)\n          Memory:fb480000-fb500000 \n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:276 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:276 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:25088 (24.5 Kb)  TX bytes:25088 (24.5 Kb)\n```\n\nroute显示路由信息如下：\n\n```\nhw076:/etc/netconfig.d # route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         *               0.0.0.0         UG    0      0        0 eth0\nloopback        *               255.0.0.0       U     0      0        0 lo\nlink-local      *               255.255.0.0     U     0      0        0 eth0\n172.18.0.0      *               255.255.0.0     U     0      0        0 eth0\n```\n\n原因是route没有配置网关，gateway是空着的。\n\n### 解决方法\n\n通过查看其他可以正常访问的节点的路由信息，得知网关节点为：172.18.0.254。因此增加默认网关节点配置。\n\n执行命令：\n\n```\nroute add default  gw 172.18.0.254\n```\n\n再次查看路由信息：\n\n```\nhw076:~ # route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         172.18.0.254    0.0.0.0         UG    0      0        0 eth0\nloopback        *               255.0.0.0       U     0      0        0 lo\nlink-local      *               255.255.0.0     U     0      0        0 eth0\n172.18.0.0      *               255.255.0.0     U     0      0        0 eth0\n```\n\n再次ping8.8.8.8显示正常，问题解决。","slug":"ping 问题","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwn000nsghde5ia4wcc","content":"<h2 id=\"ping-无法连接外网\"><a href=\"#ping-无法连接外网\" class=\"headerlink\" title=\"ping 无法连接外网\"></a>ping 无法连接外网</h2><a id=\"more\"></a>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>ping外网ping不通</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yky@hw076:~/tmux&gt; ping www.baidu.com</span><br><span class=\"line\">ping: unknown host www.baidu.com</span><br><span class=\"line\">yky@hw076:~/tmux&gt; ping 8.8.8.8</span><br><span class=\"line\">connect: Network is unreachable</span><br></pre></td></tr></table></figure></div>\n<p>ping内网可以ping通</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw076:~ # ping 172.18.11.114</span><br><span class=\"line\">PING 172.18.11.114 (172.18.11.114) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.18.11.114: icmp_seq=1 ttl=64 time=0.193 ms</span><br><span class=\"line\">64 bytes from 172.18.11.114: icmp_seq=2 ttl=64 time=0.216 ms</span><br><span class=\"line\">64 bytes from 172.18.11.114: icmp_seq=3 ttl=64 time=0.207 ms</span><br><span class=\"line\">64 bytes from 172.18.11.114: icmp_seq=4 ttl=64 time=0.200 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- 172.18.11.114 ping statistics ---</span><br><span class=\"line\">4 packets transmitted, 4 received, 0% packet loss, time 2999ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.193/0.204/0.216/0.008 ms</span><br></pre></td></tr></table></figure></div>\n<p>ifconfig信息为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw076:~ # ifconfig </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 90:E2:BA:15:C9:C4  </span><br><span class=\"line\">          inet addr:172.18.11.76  Bcast:192.168.1.255  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::92e2:baff:fe15:c9c4/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:9725797 errors:0 dropped:506 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:21023 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:598731249 (570.9 Mb)  TX bytes:2767270 (2.6 Mb)</span><br><span class=\"line\">          Memory:fb480000-fb500000 </span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:276 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:276 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:25088 (24.5 Kb)  TX bytes:25088 (24.5 Kb)</span><br></pre></td></tr></table></figure></div>\n<p>route显示路由信息如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw076:/etc/netconfig.d # route</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">default         *               0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">loopback        *               255.0.0.0       U     0      0        0 lo</span><br><span class=\"line\">link-local      *               255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\">172.18.0.0      *               255.255.0.0     U     0      0        0 eth0</span><br></pre></td></tr></table></figure></div>\n<p>原因是route没有配置网关，gateway是空着的。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>通过查看其他可以正常访问的节点的路由信息，得知网关节点为：172.18.0.254。因此增加默认网关节点配置。</p>\n<p>执行命令：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route add default  gw 172.18.0.254</span><br></pre></td></tr></table></figure></div>\n<p>再次查看路由信息：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw076:~ # route</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">default         172.18.0.254    0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">loopback        *               255.0.0.0       U     0      0        0 lo</span><br><span class=\"line\">link-local      *               255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\">172.18.0.0      *               255.255.0.0     U     0      0        0 eth0</span><br></pre></td></tr></table></figure></div>\n<p>再次ping8.8.8.8显示正常，问题解决。</p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/6758/wildernessculture-rei1440project-welltravelled-awesomeearth.jpg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":1912,"excerpt":"<h2 id=\"ping-无法连接外网\"><a href=\"#ping-无法连接外网\" class=\"headerlink\" title=\"ping 无法连接外网\"></a>ping 无法连接外网</h2>","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>ping外网ping不通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yky@hw076:~/tmux&gt; ping www.baidu.com</span><br><span class=\"line\">ping: unknown host www.baidu.com</span><br><span class=\"line\">yky@hw076:~/tmux&gt; ping 8.8.8.8</span><br><span class=\"line\">connect: Network is unreachable</span><br></pre></td></tr></table></figure>\n<p>ping内网可以ping通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw076:~ # ping 172.18.11.114</span><br><span class=\"line\">PING 172.18.11.114 (172.18.11.114) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.18.11.114: icmp_seq=1 ttl=64 time=0.193 ms</span><br><span class=\"line\">64 bytes from 172.18.11.114: icmp_seq=2 ttl=64 time=0.216 ms</span><br><span class=\"line\">64 bytes from 172.18.11.114: icmp_seq=3 ttl=64 time=0.207 ms</span><br><span class=\"line\">64 bytes from 172.18.11.114: icmp_seq=4 ttl=64 time=0.200 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- 172.18.11.114 ping statistics ---</span><br><span class=\"line\">4 packets transmitted, 4 received, 0% packet loss, time 2999ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 0.193/0.204/0.216/0.008 ms</span><br></pre></td></tr></table></figure>\n<p>ifconfig信息为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw076:~ # ifconfig </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 90:E2:BA:15:C9:C4  </span><br><span class=\"line\">          inet addr:172.18.11.76  Bcast:192.168.1.255  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::92e2:baff:fe15:c9c4/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:9725797 errors:0 dropped:506 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:21023 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:598731249 (570.9 Mb)  TX bytes:2767270 (2.6 Mb)</span><br><span class=\"line\">          Memory:fb480000-fb500000 </span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:276 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:276 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:25088 (24.5 Kb)  TX bytes:25088 (24.5 Kb)</span><br></pre></td></tr></table></figure>\n<p>route显示路由信息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw076:/etc/netconfig.d # route</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">default         *               0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">loopback        *               255.0.0.0       U     0      0        0 lo</span><br><span class=\"line\">link-local      *               255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\">172.18.0.0      *               255.255.0.0     U     0      0        0 eth0</span><br></pre></td></tr></table></figure>\n<p>原因是route没有配置网关，gateway是空着的。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>通过查看其他可以正常访问的节点的路由信息，得知网关节点为：172.18.0.254。因此增加默认网关节点配置。</p>\n<p>执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route add default  gw 172.18.0.254</span><br></pre></td></tr></table></figure>\n<p>再次查看路由信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hw076:~ # route</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">default         172.18.0.254    0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">loopback        *               255.0.0.0       U     0      0        0 lo</span><br><span class=\"line\">link-local      *               255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\">172.18.0.0      *               255.255.0.0     U     0      0        0 eth0</span><br></pre></td></tr></table></figure>\n<p>再次ping8.8.8.8显示正常，问题解决。</p>"},{"title":"使用YCSB 评测redis性能","date":"2019-03-12T09:11:44.000Z","copyright":true,"_content":"\n# 使用YCSB 评测redis性能\n\nYCSB是雅虎推出的可以评测许多主流数据库性能的基准测试，其中包括Redis。\n\n<!--more-->\n\n## 安装YCSB\n\n1. 安装java和maven\n\n   1. 机子已经有了java，所以只用安装maven Ubuntu安装命令为：\n\n      `sudo apt-get install maven`\n\n2. 安装YCSB \n\n   ````\n   git clone http://github.com/brianfrankcooper/YCSB.git\n   cd YCSB\n   mvn -pl com.yahoo.ycsb:redis-binding -am clean package\n   ````\n\n   必须是gitclone的源码包才能执行mvn 命令。wget或者curl下来包是已经编译好了的无需执行mvn命令。\n\n3. `mvn -pl com.yahoo.ycsb:redis-binding -am clean package` 报错：\n\n   ````\n   [INFO] Scanning for projects...\n   [ERROR] [ERROR] Could not find the selected project in the reactor: com.yahoo.ycsb:redis-binding @ \n   [ERROR] Could not find the selected project in the reactor: com.yahoo.ycsb:redis-binding -> [Help 1]\n   [ERROR] \n   [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n   [ERROR] Re-run Maven using the -X switch to enable full debug logging.\n   [ERROR] \n   [ERROR] For more information about the errors and possible solutions, please read the following articles:\n   [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MavenExecutionException\n   ````\n\n原因：此命令是在gitclone后未编译的时候使用的。而我之前是下载的编译好的tar.gz包，解压后是已经编译好了的。所以再次执行编译的命令时会报错。\n\n## 使用YCSB\n\n将redis-server启动后开始使用YCSB\n\n### 设置数据库\n\n需要先创建`usertable`的表，因为YCSB客户端默认是对`usertable` 进行操作。Redis将数据存储在内存中，不需要相关操作。\n\n### 选择合适的DB interface\n\nYCSB的操作是通过DB interface来实现的。最基本的DB interface是`com.yahoo.ycsb.BasicDB`，会将输出输出到`System.out`里。可以通过继承DB interface来自定义DB interface，也可以使用原有的DB interface。Redis不需要此步操作。\n\n### 选择合适的负载\n\nYCSB提供了6种负载，负载在worloads目录下。详情见<https://github.com/brianfrankcooper/YCSB/wiki/Core-Workloads>\n\n1. **Workload A: Update heavy workload** 读写比例为： 50/50 混合负载 \n2. **Workload A: Update heavy workload** 读写比例为：95/5  读为主的负载\n3. **Workload C: Read only**  100% 的读  只读负载\n4. **Workload D: Read latest workload**  读取最近的数据负载\n5. **Workload E: Short ranges**  小范围的查询负载\n6. **Workload F: Read-modify-write** 读修改写负载\n\n自定义负载：参考<https://github.com/brianfrankcooper/YCSB/wiki/Implementing-New-Workloads>\n\n可以通过修改参数文件或者新建java类来实现\n\n需要注意的是YCSB的读写负载是针对哈希类型的数据而不是简单的字符串\n\n### 指定需要的运行参数\n\n主要是指定redis的ip ，端口，密码等。\n\n命令如下：\n\n```\n./bin/ycsb load redis -s -P workloads/workloada -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" > outputLoad.txt\n```\n\n`-s` : **status**.十秒打印一次状态\n\n### 加载负载\n\n命令如下：\n\n```\n./bin/ycsb load redis -s -P workloads/workloada > outputLoad.txt\n```\n\n### 运行负载\n\n命令如下：\n\n```\n./bin/ycsb run redis -s -P workloads/workloada > outputRun.txt\n```\n\n可以使用basic数据库来打印YCSB向数据库中写入的具体数据\n\n```\nbin/ycsb.sh load basic -P workloads/workloada\nbin/ycsb.sh run basic -P workloads/workloada\n```\n\n\n\n## 参考\n\nhttps://datawine.github.io/2018/12/11/YCSB%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/\n\nhttps://github.com/brianfrankcooper/YCSB/tree/master/redis  \n\n","source":"_posts/使用YCSB 评测redis性能.md","raw":"---\ntitle: 使用YCSB 评测redis性能\ndate: 2019-03-12 17:11:44\ncategories:\ntags:\n- redis\n- benchmark\ncopyright: true\n---\n\n# 使用YCSB 评测redis性能\n\nYCSB是雅虎推出的可以评测许多主流数据库性能的基准测试，其中包括Redis。\n\n<!--more-->\n\n## 安装YCSB\n\n1. 安装java和maven\n\n   1. 机子已经有了java，所以只用安装maven Ubuntu安装命令为：\n\n      `sudo apt-get install maven`\n\n2. 安装YCSB \n\n   ````\n   git clone http://github.com/brianfrankcooper/YCSB.git\n   cd YCSB\n   mvn -pl com.yahoo.ycsb:redis-binding -am clean package\n   ````\n\n   必须是gitclone的源码包才能执行mvn 命令。wget或者curl下来包是已经编译好了的无需执行mvn命令。\n\n3. `mvn -pl com.yahoo.ycsb:redis-binding -am clean package` 报错：\n\n   ````\n   [INFO] Scanning for projects...\n   [ERROR] [ERROR] Could not find the selected project in the reactor: com.yahoo.ycsb:redis-binding @ \n   [ERROR] Could not find the selected project in the reactor: com.yahoo.ycsb:redis-binding -> [Help 1]\n   [ERROR] \n   [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n   [ERROR] Re-run Maven using the -X switch to enable full debug logging.\n   [ERROR] \n   [ERROR] For more information about the errors and possible solutions, please read the following articles:\n   [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MavenExecutionException\n   ````\n\n原因：此命令是在gitclone后未编译的时候使用的。而我之前是下载的编译好的tar.gz包，解压后是已经编译好了的。所以再次执行编译的命令时会报错。\n\n## 使用YCSB\n\n将redis-server启动后开始使用YCSB\n\n### 设置数据库\n\n需要先创建`usertable`的表，因为YCSB客户端默认是对`usertable` 进行操作。Redis将数据存储在内存中，不需要相关操作。\n\n### 选择合适的DB interface\n\nYCSB的操作是通过DB interface来实现的。最基本的DB interface是`com.yahoo.ycsb.BasicDB`，会将输出输出到`System.out`里。可以通过继承DB interface来自定义DB interface，也可以使用原有的DB interface。Redis不需要此步操作。\n\n### 选择合适的负载\n\nYCSB提供了6种负载，负载在worloads目录下。详情见<https://github.com/brianfrankcooper/YCSB/wiki/Core-Workloads>\n\n1. **Workload A: Update heavy workload** 读写比例为： 50/50 混合负载 \n2. **Workload A: Update heavy workload** 读写比例为：95/5  读为主的负载\n3. **Workload C: Read only**  100% 的读  只读负载\n4. **Workload D: Read latest workload**  读取最近的数据负载\n5. **Workload E: Short ranges**  小范围的查询负载\n6. **Workload F: Read-modify-write** 读修改写负载\n\n自定义负载：参考<https://github.com/brianfrankcooper/YCSB/wiki/Implementing-New-Workloads>\n\n可以通过修改参数文件或者新建java类来实现\n\n需要注意的是YCSB的读写负载是针对哈希类型的数据而不是简单的字符串\n\n### 指定需要的运行参数\n\n主要是指定redis的ip ，端口，密码等。\n\n命令如下：\n\n```\n./bin/ycsb load redis -s -P workloads/workloada -p \"redis.host=127.0.0.1\" -p \"redis.port=6379\" > outputLoad.txt\n```\n\n`-s` : **status**.十秒打印一次状态\n\n### 加载负载\n\n命令如下：\n\n```\n./bin/ycsb load redis -s -P workloads/workloada > outputLoad.txt\n```\n\n### 运行负载\n\n命令如下：\n\n```\n./bin/ycsb run redis -s -P workloads/workloada > outputRun.txt\n```\n\n可以使用basic数据库来打印YCSB向数据库中写入的具体数据\n\n```\nbin/ycsb.sh load basic -P workloads/workloada\nbin/ycsb.sh run basic -P workloads/workloada\n```\n\n\n\n## 参考\n\nhttps://datawine.github.io/2018/12/11/YCSB%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/\n\nhttps://github.com/brianfrankcooper/YCSB/tree/master/redis  \n\n","slug":"使用YCSB 评测redis性能","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwq000rsghdggrolvlq","content":"<h1 id=\"使用YCSB-评测redis性能\"><a href=\"#使用YCSB-评测redis性能\" class=\"headerlink\" title=\"使用YCSB 评测redis性能\"></a>使用YCSB 评测redis性能</h1><p>YCSB是雅虎推出的可以评测许多主流数据库性能的基准测试，其中包括Redis。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装YCSB\"><a href=\"#安装YCSB\" class=\"headerlink\" title=\"安装YCSB\"></a>安装YCSB</h2><ol>\n<li><p>安装java和maven</p>\n<ol>\n<li><p>机子已经有了java，所以只用安装maven Ubuntu安装命令为：</p>\n<p><code>sudo apt-get install maven</code></p>\n</li>\n</ol>\n</li>\n<li><p>安装YCSB </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http://github.com/brianfrankcooper/YCSB.git</span><br><span class=\"line\">cd YCSB</span><br><span class=\"line\">mvn -pl com.yahoo.ycsb:redis-binding -am clean package</span><br></pre></td></tr></table></figure></div>\n<p>必须是gitclone的源码包才能执行mvn 命令。wget或者curl下来包是已经编译好了的无需执行mvn命令。</p>\n</li>\n<li><p><code>mvn -pl com.yahoo.ycsb:redis-binding -am clean package</code> 报错：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[ERROR] [ERROR] Could not find the selected project in the reactor: com.yahoo.ycsb:redis-binding @ </span><br><span class=\"line\">[ERROR] Could not find the selected project in the reactor: com.yahoo.ycsb:redis-binding -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MavenExecutionException</span><br></pre></td></tr></table></figure></div>\n</li>\n</ol>\n<p>原因：此命令是在gitclone后未编译的时候使用的。而我之前是下载的编译好的tar.gz包，解压后是已经编译好了的。所以再次执行编译的命令时会报错。</p>\n<h2 id=\"使用YCSB\"><a href=\"#使用YCSB\" class=\"headerlink\" title=\"使用YCSB\"></a>使用YCSB</h2><p>将redis-server启动后开始使用YCSB</p>\n<h3 id=\"设置数据库\"><a href=\"#设置数据库\" class=\"headerlink\" title=\"设置数据库\"></a>设置数据库</h3><p>需要先创建<code>usertable</code>的表，因为YCSB客户端默认是对<code>usertable</code> 进行操作。Redis将数据存储在内存中，不需要相关操作。</p>\n<h3 id=\"选择合适的DB-interface\"><a href=\"#选择合适的DB-interface\" class=\"headerlink\" title=\"选择合适的DB interface\"></a>选择合适的DB interface</h3><p>YCSB的操作是通过DB interface来实现的。最基本的DB interface是<code>com.yahoo.ycsb.BasicDB</code>，会将输出输出到<code>System.out</code>里。可以通过继承DB interface来自定义DB interface，也可以使用原有的DB interface。Redis不需要此步操作。</p>\n<h3 id=\"选择合适的负载\"><a href=\"#选择合适的负载\" class=\"headerlink\" title=\"选择合适的负载\"></a>选择合适的负载</h3><p>YCSB提供了6种负载，负载在worloads目录下。详情见<a href=\"https://github.com/brianfrankcooper/YCSB/wiki/Core-Workloads\" target=\"_blank\" rel=\"noopener\">https://github.com/brianfrankcooper/YCSB/wiki/Core-Workloads</a></p>\n<ol>\n<li><strong>Workload A: Update heavy workload</strong> 读写比例为： 50/50 混合负载 </li>\n<li><strong>Workload A: Update heavy workload</strong> 读写比例为：95/5  读为主的负载</li>\n<li><strong>Workload C: Read only</strong>  100% 的读  只读负载</li>\n<li><strong>Workload D: Read latest workload</strong>  读取最近的数据负载</li>\n<li><strong>Workload E: Short ranges</strong>  小范围的查询负载</li>\n<li><strong>Workload F: Read-modify-write</strong> 读修改写负载</li>\n</ol>\n<p>自定义负载：参考<a href=\"https://github.com/brianfrankcooper/YCSB/wiki/Implementing-New-Workloads\" target=\"_blank\" rel=\"noopener\">https://github.com/brianfrankcooper/YCSB/wiki/Implementing-New-Workloads</a></p>\n<p>可以通过修改参数文件或者新建java类来实现</p>\n<p>需要注意的是YCSB的读写负载是针对哈希类型的数据而不是简单的字符串</p>\n<h3 id=\"指定需要的运行参数\"><a href=\"#指定需要的运行参数\" class=\"headerlink\" title=\"指定需要的运行参数\"></a>指定需要的运行参数</h3><p>主要是指定redis的ip ，端口，密码等。</p>\n<p>命令如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/ycsb load redis -s -P workloads/workloada -p &quot;redis.host=127.0.0.1&quot; -p &quot;redis.port=6379&quot; &gt; outputLoad.txt</span><br></pre></td></tr></table></figure></div>\n<p><code>-s</code> : <strong>status</strong>.十秒打印一次状态</p>\n<h3 id=\"加载负载\"><a href=\"#加载负载\" class=\"headerlink\" title=\"加载负载\"></a>加载负载</h3><p>命令如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/ycsb load redis -s -P workloads/workloada &gt; outputLoad.txt</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"运行负载\"><a href=\"#运行负载\" class=\"headerlink\" title=\"运行负载\"></a>运行负载</h3><p>命令如下：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/ycsb run redis -s -P workloads/workloada &gt; outputRun.txt</span><br></pre></td></tr></table></figure></div>\n<p>可以使用basic数据库来打印YCSB向数据库中写入的具体数据</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/ycsb.sh load basic -P workloads/workloada</span><br><span class=\"line\">bin/ycsb.sh run basic -P workloads/workloada</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://datawine.github.io/2018/12/11/YCSB%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">https://datawine.github.io/2018/12/11/YCSB%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</a></p>\n<p><a href=\"https://github.com/brianfrankcooper/YCSB/tree/master/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/brianfrankcooper/YCSB/tree/master/redis</a>  </p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/1285625/pexels-photo-1285625.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":2243,"excerpt":"<h1 id=\"使用YCSB-评测redis性能\"><a href=\"#使用YCSB-评测redis性能\" class=\"headerlink\" title=\"使用YCSB 评测redis性能\"></a>使用YCSB 评测redis性能</h1><p>YCSB是雅虎推出的可以评测许多主流数据库性能的基准测试，其中包括Redis。</p>","more":"<h2 id=\"安装YCSB\"><a href=\"#安装YCSB\" class=\"headerlink\" title=\"安装YCSB\"></a>安装YCSB</h2><ol>\n<li><p>安装java和maven</p>\n<ol>\n<li><p>机子已经有了java，所以只用安装maven Ubuntu安装命令为：</p>\n<p><code>sudo apt-get install maven</code></p>\n</li>\n</ol>\n</li>\n<li><p>安装YCSB </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http://github.com/brianfrankcooper/YCSB.git</span><br><span class=\"line\">cd YCSB</span><br><span class=\"line\">mvn -pl com.yahoo.ycsb:redis-binding -am clean package</span><br></pre></td></tr></table></figure>\n<p>必须是gitclone的源码包才能执行mvn 命令。wget或者curl下来包是已经编译好了的无需执行mvn命令。</p>\n</li>\n<li><p><code>mvn -pl com.yahoo.ycsb:redis-binding -am clean package</code> 报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[ERROR] [ERROR] Could not find the selected project in the reactor: com.yahoo.ycsb:redis-binding @ </span><br><span class=\"line\">[ERROR] Could not find the selected project in the reactor: com.yahoo.ycsb:redis-binding -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MavenExecutionException</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>原因：此命令是在gitclone后未编译的时候使用的。而我之前是下载的编译好的tar.gz包，解压后是已经编译好了的。所以再次执行编译的命令时会报错。</p>\n<h2 id=\"使用YCSB\"><a href=\"#使用YCSB\" class=\"headerlink\" title=\"使用YCSB\"></a>使用YCSB</h2><p>将redis-server启动后开始使用YCSB</p>\n<h3 id=\"设置数据库\"><a href=\"#设置数据库\" class=\"headerlink\" title=\"设置数据库\"></a>设置数据库</h3><p>需要先创建<code>usertable</code>的表，因为YCSB客户端默认是对<code>usertable</code> 进行操作。Redis将数据存储在内存中，不需要相关操作。</p>\n<h3 id=\"选择合适的DB-interface\"><a href=\"#选择合适的DB-interface\" class=\"headerlink\" title=\"选择合适的DB interface\"></a>选择合适的DB interface</h3><p>YCSB的操作是通过DB interface来实现的。最基本的DB interface是<code>com.yahoo.ycsb.BasicDB</code>，会将输出输出到<code>System.out</code>里。可以通过继承DB interface来自定义DB interface，也可以使用原有的DB interface。Redis不需要此步操作。</p>\n<h3 id=\"选择合适的负载\"><a href=\"#选择合适的负载\" class=\"headerlink\" title=\"选择合适的负载\"></a>选择合适的负载</h3><p>YCSB提供了6种负载，负载在worloads目录下。详情见<a href=\"https://github.com/brianfrankcooper/YCSB/wiki/Core-Workloads\" target=\"_blank\" rel=\"noopener\">https://github.com/brianfrankcooper/YCSB/wiki/Core-Workloads</a></p>\n<ol>\n<li><strong>Workload A: Update heavy workload</strong> 读写比例为： 50/50 混合负载 </li>\n<li><strong>Workload A: Update heavy workload</strong> 读写比例为：95/5  读为主的负载</li>\n<li><strong>Workload C: Read only</strong>  100% 的读  只读负载</li>\n<li><strong>Workload D: Read latest workload</strong>  读取最近的数据负载</li>\n<li><strong>Workload E: Short ranges</strong>  小范围的查询负载</li>\n<li><strong>Workload F: Read-modify-write</strong> 读修改写负载</li>\n</ol>\n<p>自定义负载：参考<a href=\"https://github.com/brianfrankcooper/YCSB/wiki/Implementing-New-Workloads\" target=\"_blank\" rel=\"noopener\">https://github.com/brianfrankcooper/YCSB/wiki/Implementing-New-Workloads</a></p>\n<p>可以通过修改参数文件或者新建java类来实现</p>\n<p>需要注意的是YCSB的读写负载是针对哈希类型的数据而不是简单的字符串</p>\n<h3 id=\"指定需要的运行参数\"><a href=\"#指定需要的运行参数\" class=\"headerlink\" title=\"指定需要的运行参数\"></a>指定需要的运行参数</h3><p>主要是指定redis的ip ，端口，密码等。</p>\n<p>命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/ycsb load redis -s -P workloads/workloada -p &quot;redis.host=127.0.0.1&quot; -p &quot;redis.port=6379&quot; &gt; outputLoad.txt</span><br></pre></td></tr></table></figure>\n<p><code>-s</code> : <strong>status</strong>.十秒打印一次状态</p>\n<h3 id=\"加载负载\"><a href=\"#加载负载\" class=\"headerlink\" title=\"加载负载\"></a>加载负载</h3><p>命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/ycsb load redis -s -P workloads/workloada &gt; outputLoad.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行负载\"><a href=\"#运行负载\" class=\"headerlink\" title=\"运行负载\"></a>运行负载</h3><p>命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/ycsb run redis -s -P workloads/workloada &gt; outputRun.txt</span><br></pre></td></tr></table></figure>\n<p>可以使用basic数据库来打印YCSB向数据库中写入的具体数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/ycsb.sh load basic -P workloads/workloada</span><br><span class=\"line\">bin/ycsb.sh run basic -P workloads/workloada</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://datawine.github.io/2018/12/11/YCSB%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">https://datawine.github.io/2018/12/11/YCSB%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</a></p>\n<p><a href=\"https://github.com/brianfrankcooper/YCSB/tree/master/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/brianfrankcooper/YCSB/tree/master/redis</a>  </p>"},{"title":"shell 脚本遍历redis数据库","date":"2019-03-14T12:00:46.000Z","copyright":true,"_content":"\n## 使用shell脚本遍历redis数据库中的所有kv对\n\n记录下如何使用shell通过redis-cli 命令来操作redis数据库，因为直接在命令行中输入\n\n`redis-cli command` 的话command必须是单个单词，不能像是`KEYS *` 这种.\n\n<!--more-->\n\n````\n#!/bin/bash\nfilename='redis'`date +%Y-%m-%d_%H:%M`\nwork_path=$(dirname \"$0\") \necho \"实例化redis数据文件为:$work_path/$filename\"\necho \"keys *\" | redis-cli > key_db.txt\necho \"将所有key保存到:$work_path/key_db.txt\"\nfor line in `cat key_db.txt`\ndo\n        echo \"key:$line \" >>$work_path/$filename.txt\n        echo \"key-value:\" >>$work_path/$filename.txt\n        echo \"hgetall $line\" | redis-cli >>$work_path/$filename.txt\ndone\n````\n\n使用echo 来把命令输出到管道然后再传递给redis-cli。在循环里面也是使用echo来把字符串输入到文件中。","source":"_posts/使用shell脚本遍历redis数据库中的所有kv对.md","raw":"---\ntitle: shell 脚本遍历redis数据库\ndate: 2019-03-14 20:00:46\ncategories: Linux\ntags:\n- shell\n- redis\ncopyright: true\n---\n\n## 使用shell脚本遍历redis数据库中的所有kv对\n\n记录下如何使用shell通过redis-cli 命令来操作redis数据库，因为直接在命令行中输入\n\n`redis-cli command` 的话command必须是单个单词，不能像是`KEYS *` 这种.\n\n<!--more-->\n\n````\n#!/bin/bash\nfilename='redis'`date +%Y-%m-%d_%H:%M`\nwork_path=$(dirname \"$0\") \necho \"实例化redis数据文件为:$work_path/$filename\"\necho \"keys *\" | redis-cli > key_db.txt\necho \"将所有key保存到:$work_path/key_db.txt\"\nfor line in `cat key_db.txt`\ndo\n        echo \"key:$line \" >>$work_path/$filename.txt\n        echo \"key-value:\" >>$work_path/$filename.txt\n        echo \"hgetall $line\" | redis-cli >>$work_path/$filename.txt\ndone\n````\n\n使用echo 来把命令输出到管道然后再传递给redis-cli。在循环里面也是使用echo来把字符串输入到文件中。","slug":"使用shell脚本遍历redis数据库中的所有kv对","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktws000tsghdkofhgd8e","content":"<h2 id=\"使用shell脚本遍历redis数据库中的所有kv对\"><a href=\"#使用shell脚本遍历redis数据库中的所有kv对\" class=\"headerlink\" title=\"使用shell脚本遍历redis数据库中的所有kv对\"></a>使用shell脚本遍历redis数据库中的所有kv对</h2><p>记录下如何使用shell通过redis-cli 命令来操作redis数据库，因为直接在命令行中输入</p>\n<p><code>redis-cli command</code> 的话command必须是单个单词，不能像是<code>KEYS *</code> 这种.</p>\n<a id=\"more\"></a>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">filename=&apos;redis&apos;`date +%Y-%m-%d_%H:%M`</span><br><span class=\"line\">work_path=$(dirname &quot;$0&quot;) </span><br><span class=\"line\">echo &quot;实例化redis数据文件为:$work_path/$filename&quot;</span><br><span class=\"line\">echo &quot;keys *&quot; | redis-cli &gt; key_db.txt</span><br><span class=\"line\">echo &quot;将所有key保存到:$work_path/key_db.txt&quot;</span><br><span class=\"line\">for line in `cat key_db.txt`</span><br><span class=\"line\">do</span><br><span class=\"line\">        echo &quot;key:$line &quot; &gt;&gt;$work_path/$filename.txt</span><br><span class=\"line\">        echo &quot;key-value:&quot; &gt;&gt;$work_path/$filename.txt</span><br><span class=\"line\">        echo &quot;hgetall $line&quot; | redis-cli &gt;&gt;$work_path/$filename.txt</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></div>\n<p>使用echo 来把命令输出到管道然后再传递给redis-cli。在循环里面也是使用echo来把字符串输入到文件中。</p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/164041/pexels-photo-164041.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":639,"excerpt":"<h2 id=\"使用shell脚本遍历redis数据库中的所有kv对\"><a href=\"#使用shell脚本遍历redis数据库中的所有kv对\" class=\"headerlink\" title=\"使用shell脚本遍历redis数据库中的所有kv对\"></a>使用shell脚本遍历redis数据库中的所有kv对</h2><p>记录下如何使用shell通过redis-cli 命令来操作redis数据库，因为直接在命令行中输入</p>\n<p><code>redis-cli command</code> 的话command必须是单个单词，不能像是<code>KEYS *</code> 这种.</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">filename=&apos;redis&apos;`date +%Y-%m-%d_%H:%M`</span><br><span class=\"line\">work_path=$(dirname &quot;$0&quot;) </span><br><span class=\"line\">echo &quot;实例化redis数据文件为:$work_path/$filename&quot;</span><br><span class=\"line\">echo &quot;keys *&quot; | redis-cli &gt; key_db.txt</span><br><span class=\"line\">echo &quot;将所有key保存到:$work_path/key_db.txt&quot;</span><br><span class=\"line\">for line in `cat key_db.txt`</span><br><span class=\"line\">do</span><br><span class=\"line\">        echo &quot;key:$line &quot; &gt;&gt;$work_path/$filename.txt</span><br><span class=\"line\">        echo &quot;key-value:&quot; &gt;&gt;$work_path/$filename.txt</span><br><span class=\"line\">        echo &quot;hgetall $line&quot; | redis-cli &gt;&gt;$work_path/$filename.txt</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>使用echo 来把命令输出到管道然后再传递给redis-cli。在循环里面也是使用echo来把字符串输入到文件中。</p>"},{"title":"图计算常用算法","date":"2018-04-24T03:20:17.000Z","copyright":true,"_content":"\n# 图算法的典型操作\n\n关于一些常见图算法的调研与学习。\n\n<!--more-->\n\n## 常用图算法\n\n### PageRank\n\n1. 背景\t\n\n   1. 既考虑入链数量，又考虑了网页质量因素，二者相结合 数量与权重的结合\n   2. 算法与主题无关，因为PR值是根据图计算出来的\n\n2. 算法原理\n\n   1. 基本思想\n\n      A有链接指向B，表明A认为B比A重要。A将自身权重分配一部分给B。\n\n      $W(B)=W(A)/N$   W(A) 是A的PR值，W(B)是A 分配的权重，N是A的出链数\n\n   2. PageRank公式修正\n\n      存在出链为0的孤立网页，增加阻力系数q ，一般取q=0.85，其意义是用户有1-q的概率不点击此页面上面的所有链接。同时还有随机直接跳转的概率，如直接输入网址，点击书签等。完整公式如下：\n\n      ![](E:\\data\\ict\\docs\\page rank.png)\n\n### Connected component\n\n1. 定义\n   1. 连通分支：图中，某个子图的任意两点有边连接，而子图之间无边连接\n   2. 问题：cc是寻找连通分支的算法？？\n2. 通过BFS、DFS算法的便利就可以找到连通分支，每个白色节点开始的就是一个连通分支。\n3. 常见算法\n   1. DFS\n      1. 原理：访问某个顶点后只有当某个节点是叶结点后才会访问其余相邻节点。\n      2. 步骤：\n         1. 选择一个结点作为起始结点，标记为灰色\n         2. 从该节点的邻居结点中选择一个结点，标记为灰色，继续这个操作\n         3. 当选中的结点时叶子结点时，将其涂黑并返回到上一个父节点。\n         4. 重复2,3直到所有结点都被访问。\n   2. BFS   （DFS，BFS不是图的遍历算法吗）。\n      1. 原理：在进一步遍历中顶点之前，先访问当前结点的所有邻接结点。\n      2. 步骤：\n         1. 选择一个顶点作为起始节点，放入队列，标记为灰色，其余标记为白色\n         2. 寻找队列首部结点的所有邻居节点，将其放入队列中并标记为灰色，将队列首部结点出队，并标记为黑色  \n         3. 重复2步骤，直到队列中的节点全部为空。\n\n### SSSP (single-source shortest paths)\n\n1. 单独的起点与目标点之间最短路径的计算。起点固定，寻找与其他所有结点之间的最短路径。包括单源单汇，单源多汇\n2. 常见算法\n   1. Dijkstra\n      1. 步骤\n         1. 将所有顶点分成两个集合A、B，其中集合A表示已经求得从V0出发的最短路径的顶点集合，集合B为为待求解的顶点集合。初始时有A={V0}\n         2. 将集合A与集合B相连的边（A中的所有结点与B中所有的结点形成的边）按照从V0出发的最短权重和递增次序排序，取最短的边，将该条边在集合B中所对应的顶点加入到集合A中\n         3. 重复第二步，直至B为空集。\n      2. 总结：\n         1. 最短中的最短：每次迭代时比较的是当前状态下以V0为起点，A中顶点为中间点的到各顶点之间的最短路径权重，最后再选择在当前所有最短路径中路径最短的一个顶点加入A。也就是说每次加入A集合的点是最短路径中的最短。\n         2. 给定目标点，在每次迭代时，并不知道能否到达最后的目标点，所以把到所有结点的最短距离都算出来了。\n\n### Betweenness Centrality（中介中心性）\n\n1. 定义 ：中心性用来衡量节结点的重要性。Betweenness Centrality ：考虑的是该节点出现在其他两节点之间的最短路径上的比率。\n\n2. 思想：如果一个成员位于其他成员的多条最短路上，那么该成员就是核心成员，就具有较大的中介中心性。\n\n3. 步骤\n\n   其中![\\sigma_{st}](https://i2.wp.com/upload.wikimedia.org/math/b/b/7/bb79bd91213d03edf0c8fc04fbd51085.png)表示的是节点s和t之间的最短路径的数量，而![\\sigma_{st}(v)](https://i2.wp.com/upload.wikimedia.org/math/4/2/c/42c33f5f78864175f0d9c9af1c492f5d.png)是最短路径中经过节点v的数量。\n\n   1. 计算各个点对之间最短路径的长度和条数，用于计算pair-dependencies: δst(v) =σst(v)/σst\n\n      ![clip_image004](http://static.oschina.net/uploads/img/201305/11121047_IQnh.jpg)\n\n   2. 对于每个节点，累积属于自己的pair-dependencies\n\n   ![](https://i2.wp.com/upload.wikimedia.org/math/4/c/c/4cc6eaa2dce9d504feeed5bd88b96d73.png)\n\n### LBP算法(Local Binary Pattern, 局部二值模式)\n\n1. 定义：LBP是一种用来描述图像局部纹理特征的算子。\n\n   1. 原始的LBP算子定义为在3*3的窗口内，以窗口中心像素为阈值，将相邻的8个像素的灰度值与其进行比较，若周围像素值大于中心像素值，则该像素点的位置被标记为1，否则为0\n\n   ![img](http://hi.csdn.net/attachment/201104/13/0_1302700245WllL.gif)\n\n2. 作用是进行特征提取，而且，提取的特征是图像的纹理特征，并且，是局部的纹理特征.\n\n3. 改进版本\n\n   1. 原型LBP算子 \n   2. LBP等价模式\n\n### 最小生成树\n\n1. 定义：无环连通图，图中所有结点均参与，所有边的权重加起来最小。\n2. 算法\n   1. Prim算法  \n      1. 步骤：设N=(V,{E})是连通网， TE是N上最小生成树中边的集合 \n         1. 初始令U={u0},(u0V), TE=φ\n         2. 在所有uU,vV-U的边(u,v)E中，找一条代价最小\n            的边(u0,v0), 并保证不形成回路 \n         3. 将(u0,v0)并入集合TE，同时v0并入U \n         4. 重复上述操作直至U=V为止，则T=(V,{TE})为N的\n            最小生成树  \n      2. 总结：每次迭代加入所有连通边中权值最小的。\n\n### 三角计数\n\n1. 定义：寻找无向图中的所有三角形\n2. 步骤\n   1. 建立邻接表：\n      1. 如果A-B & A < B，则将B加入A的邻接表 如果A-B & B < A，则将A加入B的邻接表  A<B比较的是id\n   2. 遍历每个节点，对于结点A，遍历A邻接表中的结点，如果邻接结点B,C两两之间存在边，则A、B、C三者之间存在三角形\n\n### 社区发现\n\n1. 社区定义：同一社区内的节点与节点之间的连接很紧密，而社区与社区之间的连接比较稀疏。社区是一个子图\n\n2. 数学描述：![](https://img-blog.csdn.net/20130710080910046)\n\n3. 衡量标准：模块度\n\n   1. 计算公式\n\n   ![](https://img-blog.csdn.net/20130710081032203)\n\n4. 常见算法\n\n   1. GN算法\n      1. 思想：在一个网络之中，通过社区内部的边的最短路径相对较少，而通过社区之间的边的最短路径的数目则相对较多。从社区内部走大概率会走很多条边。\n      2. 步骤\n         1. 计算每一条边的边介数。边介数（betweenness）：网络中任意两个节点通过此边的最短路径的数目。\n         2. 删除边介数最大的边\n         3. 重复（1）（2），直到网络中的任一顶点作为一个社区为止。\n      3. 缺陷\n         1. 不知道最后会有多少个社区\n         2. 在计算边介数的时候可能会有很对重复计算最短路径的情况，时间复杂度太高\n         3. GN算法不能判断算法终止位置\n   2. LPA算法（标签传播算法）\n      1. 思路\n         1. 自己是什么标签，由邻居决定。邻居中什么标签最多，则此结点是什么标签\n      2. 步骤\n         1. 为所有结点指定一个唯一的标签\n         2. 逐轮刷新所有结点的标签，直到达到收敛要求位置。刷新规则： 对于某一个节点，考察其所有邻居节点的标签，并进行统计，将出现个数最多的那个标签赋给当前节点。当个数最多的标签不唯一时，随机选一个。\n\n### 拓扑排序\n\n1. 定义 ：**拓扑排序（Topological Sorting）**是一个**有向无环图（DAG, Directed Acyclic Graph）**的所有顶点的线性序列。且该序列必须满足下面两个条件：\n   1. 每个顶点出现且只出现一次\n   2. 若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面\n2. 步骤\n   1. 从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出\n   2. 从图中删除该顶点和所有以它为起点的有向边\n   3. 重复 1 和 2 直到当前的 DAG 图为空或**当前图中不存在无前驱的顶点为止**。后一种情况说明有向图中必然存在环\n      ![img](http://img.blog.csdn.net/20150507001759702)\n\n","source":"_posts/图计算常用算法.md","raw":"---\ntitle: 图计算常用算法\ndate: 2018-04-24 11:20:17\ncategories: algorithm\ntags:\n- graph \ncopyright: true\n---\n\n# 图算法的典型操作\n\n关于一些常见图算法的调研与学习。\n\n<!--more-->\n\n## 常用图算法\n\n### PageRank\n\n1. 背景\t\n\n   1. 既考虑入链数量，又考虑了网页质量因素，二者相结合 数量与权重的结合\n   2. 算法与主题无关，因为PR值是根据图计算出来的\n\n2. 算法原理\n\n   1. 基本思想\n\n      A有链接指向B，表明A认为B比A重要。A将自身权重分配一部分给B。\n\n      $W(B)=W(A)/N$   W(A) 是A的PR值，W(B)是A 分配的权重，N是A的出链数\n\n   2. PageRank公式修正\n\n      存在出链为0的孤立网页，增加阻力系数q ，一般取q=0.85，其意义是用户有1-q的概率不点击此页面上面的所有链接。同时还有随机直接跳转的概率，如直接输入网址，点击书签等。完整公式如下：\n\n      ![](E:\\data\\ict\\docs\\page rank.png)\n\n### Connected component\n\n1. 定义\n   1. 连通分支：图中，某个子图的任意两点有边连接，而子图之间无边连接\n   2. 问题：cc是寻找连通分支的算法？？\n2. 通过BFS、DFS算法的便利就可以找到连通分支，每个白色节点开始的就是一个连通分支。\n3. 常见算法\n   1. DFS\n      1. 原理：访问某个顶点后只有当某个节点是叶结点后才会访问其余相邻节点。\n      2. 步骤：\n         1. 选择一个结点作为起始结点，标记为灰色\n         2. 从该节点的邻居结点中选择一个结点，标记为灰色，继续这个操作\n         3. 当选中的结点时叶子结点时，将其涂黑并返回到上一个父节点。\n         4. 重复2,3直到所有结点都被访问。\n   2. BFS   （DFS，BFS不是图的遍历算法吗）。\n      1. 原理：在进一步遍历中顶点之前，先访问当前结点的所有邻接结点。\n      2. 步骤：\n         1. 选择一个顶点作为起始节点，放入队列，标记为灰色，其余标记为白色\n         2. 寻找队列首部结点的所有邻居节点，将其放入队列中并标记为灰色，将队列首部结点出队，并标记为黑色  \n         3. 重复2步骤，直到队列中的节点全部为空。\n\n### SSSP (single-source shortest paths)\n\n1. 单独的起点与目标点之间最短路径的计算。起点固定，寻找与其他所有结点之间的最短路径。包括单源单汇，单源多汇\n2. 常见算法\n   1. Dijkstra\n      1. 步骤\n         1. 将所有顶点分成两个集合A、B，其中集合A表示已经求得从V0出发的最短路径的顶点集合，集合B为为待求解的顶点集合。初始时有A={V0}\n         2. 将集合A与集合B相连的边（A中的所有结点与B中所有的结点形成的边）按照从V0出发的最短权重和递增次序排序，取最短的边，将该条边在集合B中所对应的顶点加入到集合A中\n         3. 重复第二步，直至B为空集。\n      2. 总结：\n         1. 最短中的最短：每次迭代时比较的是当前状态下以V0为起点，A中顶点为中间点的到各顶点之间的最短路径权重，最后再选择在当前所有最短路径中路径最短的一个顶点加入A。也就是说每次加入A集合的点是最短路径中的最短。\n         2. 给定目标点，在每次迭代时，并不知道能否到达最后的目标点，所以把到所有结点的最短距离都算出来了。\n\n### Betweenness Centrality（中介中心性）\n\n1. 定义 ：中心性用来衡量节结点的重要性。Betweenness Centrality ：考虑的是该节点出现在其他两节点之间的最短路径上的比率。\n\n2. 思想：如果一个成员位于其他成员的多条最短路上，那么该成员就是核心成员，就具有较大的中介中心性。\n\n3. 步骤\n\n   其中![\\sigma_{st}](https://i2.wp.com/upload.wikimedia.org/math/b/b/7/bb79bd91213d03edf0c8fc04fbd51085.png)表示的是节点s和t之间的最短路径的数量，而![\\sigma_{st}(v)](https://i2.wp.com/upload.wikimedia.org/math/4/2/c/42c33f5f78864175f0d9c9af1c492f5d.png)是最短路径中经过节点v的数量。\n\n   1. 计算各个点对之间最短路径的长度和条数，用于计算pair-dependencies: δst(v) =σst(v)/σst\n\n      ![clip_image004](http://static.oschina.net/uploads/img/201305/11121047_IQnh.jpg)\n\n   2. 对于每个节点，累积属于自己的pair-dependencies\n\n   ![](https://i2.wp.com/upload.wikimedia.org/math/4/c/c/4cc6eaa2dce9d504feeed5bd88b96d73.png)\n\n### LBP算法(Local Binary Pattern, 局部二值模式)\n\n1. 定义：LBP是一种用来描述图像局部纹理特征的算子。\n\n   1. 原始的LBP算子定义为在3*3的窗口内，以窗口中心像素为阈值，将相邻的8个像素的灰度值与其进行比较，若周围像素值大于中心像素值，则该像素点的位置被标记为1，否则为0\n\n   ![img](http://hi.csdn.net/attachment/201104/13/0_1302700245WllL.gif)\n\n2. 作用是进行特征提取，而且，提取的特征是图像的纹理特征，并且，是局部的纹理特征.\n\n3. 改进版本\n\n   1. 原型LBP算子 \n   2. LBP等价模式\n\n### 最小生成树\n\n1. 定义：无环连通图，图中所有结点均参与，所有边的权重加起来最小。\n2. 算法\n   1. Prim算法  \n      1. 步骤：设N=(V,{E})是连通网， TE是N上最小生成树中边的集合 \n         1. 初始令U={u0},(u0V), TE=φ\n         2. 在所有uU,vV-U的边(u,v)E中，找一条代价最小\n            的边(u0,v0), 并保证不形成回路 \n         3. 将(u0,v0)并入集合TE，同时v0并入U \n         4. 重复上述操作直至U=V为止，则T=(V,{TE})为N的\n            最小生成树  \n      2. 总结：每次迭代加入所有连通边中权值最小的。\n\n### 三角计数\n\n1. 定义：寻找无向图中的所有三角形\n2. 步骤\n   1. 建立邻接表：\n      1. 如果A-B & A < B，则将B加入A的邻接表 如果A-B & B < A，则将A加入B的邻接表  A<B比较的是id\n   2. 遍历每个节点，对于结点A，遍历A邻接表中的结点，如果邻接结点B,C两两之间存在边，则A、B、C三者之间存在三角形\n\n### 社区发现\n\n1. 社区定义：同一社区内的节点与节点之间的连接很紧密，而社区与社区之间的连接比较稀疏。社区是一个子图\n\n2. 数学描述：![](https://img-blog.csdn.net/20130710080910046)\n\n3. 衡量标准：模块度\n\n   1. 计算公式\n\n   ![](https://img-blog.csdn.net/20130710081032203)\n\n4. 常见算法\n\n   1. GN算法\n      1. 思想：在一个网络之中，通过社区内部的边的最短路径相对较少，而通过社区之间的边的最短路径的数目则相对较多。从社区内部走大概率会走很多条边。\n      2. 步骤\n         1. 计算每一条边的边介数。边介数（betweenness）：网络中任意两个节点通过此边的最短路径的数目。\n         2. 删除边介数最大的边\n         3. 重复（1）（2），直到网络中的任一顶点作为一个社区为止。\n      3. 缺陷\n         1. 不知道最后会有多少个社区\n         2. 在计算边介数的时候可能会有很对重复计算最短路径的情况，时间复杂度太高\n         3. GN算法不能判断算法终止位置\n   2. LPA算法（标签传播算法）\n      1. 思路\n         1. 自己是什么标签，由邻居决定。邻居中什么标签最多，则此结点是什么标签\n      2. 步骤\n         1. 为所有结点指定一个唯一的标签\n         2. 逐轮刷新所有结点的标签，直到达到收敛要求位置。刷新规则： 对于某一个节点，考察其所有邻居节点的标签，并进行统计，将出现个数最多的那个标签赋给当前节点。当个数最多的标签不唯一时，随机选一个。\n\n### 拓扑排序\n\n1. 定义 ：**拓扑排序（Topological Sorting）**是一个**有向无环图（DAG, Directed Acyclic Graph）**的所有顶点的线性序列。且该序列必须满足下面两个条件：\n   1. 每个顶点出现且只出现一次\n   2. 若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面\n2. 步骤\n   1. 从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出\n   2. 从图中删除该顶点和所有以它为起点的有向边\n   3. 重复 1 和 2 直到当前的 DAG 图为空或**当前图中不存在无前驱的顶点为止**。后一种情况说明有向图中必然存在环\n      ![img](http://img.blog.csdn.net/20150507001759702)\n\n","slug":"图计算常用算法","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4ktwv000xsghd1bonr8ll","content":"<h1 id=\"图算法的典型操作\"><a href=\"#图算法的典型操作\" class=\"headerlink\" title=\"图算法的典型操作\"></a>图算法的典型操作</h1><p>关于一些常见图算法的调研与学习。</p>\n<a id=\"more\"></a>\n<h2 id=\"常用图算法\"><a href=\"#常用图算法\" class=\"headerlink\" title=\"常用图算法\"></a>常用图算法</h2><h3 id=\"PageRank\"><a href=\"#PageRank\" class=\"headerlink\" title=\"PageRank\"></a>PageRank</h3><ol>\n<li><p>背景    </p>\n<ol>\n<li>既考虑入链数量，又考虑了网页质量因素，二者相结合 数量与权重的结合</li>\n<li>算法与主题无关，因为PR值是根据图计算出来的</li>\n</ol>\n</li>\n<li><p>算法原理</p>\n<ol>\n<li><p>基本思想</p>\n<p>A有链接指向B，表明A认为B比A重要。A将自身权重分配一部分给B。</p>\n<p>$W(B)=W(A)/N$   W(A) 是A的PR值，W(B)是A 分配的权重，N是A的出链数</p>\n</li>\n<li><p>PageRank公式修正</p>\n<p>存在出链为0的孤立网页，增加阻力系数q ，一般取q=0.85，其意义是用户有1-q的概率不点击此页面上面的所有链接。同时还有随机直接跳转的概率，如直接输入网址，点击书签等。完整公式如下：</p>\n<p><a href=\"E:\\data\\ict\\docs\\page rank.png\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"E:\\data\\ict\\docs\\page rank.png\" class=\"lazyload\"></a></p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Connected-component\"><a href=\"#Connected-component\" class=\"headerlink\" title=\"Connected component\"></a>Connected component</h3><ol>\n<li>定义<ol>\n<li>连通分支：图中，某个子图的任意两点有边连接，而子图之间无边连接</li>\n<li>问题：cc是寻找连通分支的算法？？</li>\n</ol>\n</li>\n<li>通过BFS、DFS算法的便利就可以找到连通分支，每个白色节点开始的就是一个连通分支。</li>\n<li>常见算法<ol>\n<li>DFS<ol>\n<li>原理：访问某个顶点后只有当某个节点是叶结点后才会访问其余相邻节点。</li>\n<li>步骤：<ol>\n<li>选择一个结点作为起始结点，标记为灰色</li>\n<li>从该节点的邻居结点中选择一个结点，标记为灰色，继续这个操作</li>\n<li>当选中的结点时叶子结点时，将其涂黑并返回到上一个父节点。</li>\n<li>重复2,3直到所有结点都被访问。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>BFS   （DFS，BFS不是图的遍历算法吗）。<ol>\n<li>原理：在进一步遍历中顶点之前，先访问当前结点的所有邻接结点。</li>\n<li>步骤：<ol>\n<li>选择一个顶点作为起始节点，放入队列，标记为灰色，其余标记为白色</li>\n<li>寻找队列首部结点的所有邻居节点，将其放入队列中并标记为灰色，将队列首部结点出队，并标记为黑色  </li>\n<li>重复2步骤，直到队列中的节点全部为空。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"SSSP-single-source-shortest-paths\"><a href=\"#SSSP-single-source-shortest-paths\" class=\"headerlink\" title=\"SSSP (single-source shortest paths)\"></a>SSSP (single-source shortest paths)</h3><ol>\n<li>单独的起点与目标点之间最短路径的计算。起点固定，寻找与其他所有结点之间的最短路径。包括单源单汇，单源多汇</li>\n<li>常见算法<ol>\n<li>Dijkstra<ol>\n<li>步骤<ol>\n<li>将所有顶点分成两个集合A、B，其中集合A表示已经求得从V0出发的最短路径的顶点集合，集合B为为待求解的顶点集合。初始时有A={V0}</li>\n<li>将集合A与集合B相连的边（A中的所有结点与B中所有的结点形成的边）按照从V0出发的最短权重和递增次序排序，取最短的边，将该条边在集合B中所对应的顶点加入到集合A中</li>\n<li>重复第二步，直至B为空集。</li>\n</ol>\n</li>\n<li>总结：<ol>\n<li>最短中的最短：每次迭代时比较的是当前状态下以V0为起点，A中顶点为中间点的到各顶点之间的最短路径权重，最后再选择在当前所有最短路径中路径最短的一个顶点加入A。也就是说每次加入A集合的点是最短路径中的最短。</li>\n<li>给定目标点，在每次迭代时，并不知道能否到达最后的目标点，所以把到所有结点的最短距离都算出来了。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Betweenness-Centrality（中介中心性）\"><a href=\"#Betweenness-Centrality（中介中心性）\" class=\"headerlink\" title=\"Betweenness Centrality（中介中心性）\"></a>Betweenness Centrality（中介中心性）</h3><ol>\n<li><p>定义 ：中心性用来衡量节结点的重要性。Betweenness Centrality ：考虑的是该节点出现在其他两节点之间的最短路径上的比率。</p>\n</li>\n<li><p>思想：如果一个成员位于其他成员的多条最短路上，那么该成员就是核心成员，就具有较大的中介中心性。</p>\n</li>\n<li><p>步骤</p>\n<p>其中<a href=\"https://i2.wp.com/upload.wikimedia.org/math/b/b/7/bb79bd91213d03edf0c8fc04fbd51085.png\" data-fancybox=\"group\" data-caption=\"\\sigma_{st}\" class=\"fancybox\"><img alt=\"\\sigma_{st}\" title=\"\\sigma_{st}\" data-src=\"https://i2.wp.com/upload.wikimedia.org/math/b/b/7/bb79bd91213d03edf0c8fc04fbd51085.png\" class=\"lazyload\"></a>表示的是节点s和t之间的最短路径的数量，而<a href=\"https://i2.wp.com/upload.wikimedia.org/math/4/2/c/42c33f5f78864175f0d9c9af1c492f5d.png\" data-fancybox=\"group\" data-caption=\"\\sigma_{st}(v)\" class=\"fancybox\"><img alt=\"\\sigma_{st}(v)\" title=\"\\sigma_{st}(v)\" data-src=\"https://i2.wp.com/upload.wikimedia.org/math/4/2/c/42c33f5f78864175f0d9c9af1c492f5d.png\" class=\"lazyload\"></a>是最短路径中经过节点v的数量。</p>\n<ol>\n<li><p>计算各个点对之间最短路径的长度和条数，用于计算pair-dependencies: δst(v) =σst(v)/σst</p>\n<p><a href=\"http://static.oschina.net/uploads/img/201305/11121047_IQnh.jpg\" data-fancybox=\"group\" data-caption=\"clip_image004\" class=\"fancybox\"><img alt=\"clip_image004\" title=\"clip_image004\" data-src=\"http://static.oschina.net/uploads/img/201305/11121047_IQnh.jpg\" class=\"lazyload\"></a></p>\n</li>\n<li><p>对于每个节点，累积属于自己的pair-dependencies</p>\n</li>\n</ol>\n<p><a href=\"https://i2.wp.com/upload.wikimedia.org/math/4/c/c/4cc6eaa2dce9d504feeed5bd88b96d73.png\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://i2.wp.com/upload.wikimedia.org/math/4/c/c/4cc6eaa2dce9d504feeed5bd88b96d73.png\" class=\"lazyload\"></a></p>\n</li>\n</ol>\n<h3 id=\"LBP算法-Local-Binary-Pattern-局部二值模式\"><a href=\"#LBP算法-Local-Binary-Pattern-局部二值模式\" class=\"headerlink\" title=\"LBP算法(Local Binary Pattern, 局部二值模式)\"></a>LBP算法(Local Binary Pattern, 局部二值模式)</h3><ol>\n<li><p>定义：LBP是一种用来描述图像局部纹理特征的算子。</p>\n<ol>\n<li>原始的LBP算子定义为在3*3的窗口内，以窗口中心像素为阈值，将相邻的8个像素的灰度值与其进行比较，若周围像素值大于中心像素值，则该像素点的位置被标记为1，否则为0</li>\n</ol>\n<p><a href=\"http://hi.csdn.net/attachment/201104/13/0_1302700245WllL.gif\" data-fancybox=\"group\" data-caption=\"img\" class=\"fancybox\"><img alt=\"img\" title=\"img\" data-src=\"http://hi.csdn.net/attachment/201104/13/0_1302700245WllL.gif\" class=\"lazyload\"></a></p>\n</li>\n<li><p>作用是进行特征提取，而且，提取的特征是图像的纹理特征，并且，是局部的纹理特征.</p>\n</li>\n<li><p>改进版本</p>\n<ol>\n<li>原型LBP算子 </li>\n<li>LBP等价模式</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h3><ol>\n<li>定义：无环连通图，图中所有结点均参与，所有边的权重加起来最小。</li>\n<li>算法<ol>\n<li>Prim算法  <ol>\n<li>步骤：设N=(V,{E})是连通网， TE是N上最小生成树中边的集合 <ol>\n<li>初始令U={u0},(u0V), TE=φ</li>\n<li>在所有uU,vV-U的边(u,v)E中，找一条代价最小<br>的边(u0,v0), 并保证不形成回路 </li>\n<li>将(u0,v0)并入集合TE，同时v0并入U </li>\n<li>重复上述操作直至U=V为止，则T=(V,{TE})为N的<br>最小生成树  </li>\n</ol>\n</li>\n<li>总结：每次迭代加入所有连通边中权值最小的。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"三角计数\"><a href=\"#三角计数\" class=\"headerlink\" title=\"三角计数\"></a>三角计数</h3><ol>\n<li>定义：寻找无向图中的所有三角形</li>\n<li>步骤<ol>\n<li>建立邻接表：<ol>\n<li>如果A-B &amp; A &lt; B，则将B加入A的邻接表 如果A-B &amp; B &lt; A，则将A加入B的邻接表  A&lt;B比较的是id</li>\n</ol>\n</li>\n<li>遍历每个节点，对于结点A，遍历A邻接表中的结点，如果邻接结点B,C两两之间存在边，则A、B、C三者之间存在三角形</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"社区发现\"><a href=\"#社区发现\" class=\"headerlink\" title=\"社区发现\"></a>社区发现</h3><ol>\n<li><p>社区定义：同一社区内的节点与节点之间的连接很紧密，而社区与社区之间的连接比较稀疏。社区是一个子图</p>\n</li>\n<li><p>数学描述：<a href=\"https://img-blog.csdn.net/20130710080910046\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://img-blog.csdn.net/20130710080910046\" class=\"lazyload\"></a></p>\n</li>\n<li><p>衡量标准：模块度</p>\n<ol>\n<li>计算公式</li>\n</ol>\n<p><a href=\"https://img-blog.csdn.net/20130710081032203\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://img-blog.csdn.net/20130710081032203\" class=\"lazyload\"></a></p>\n</li>\n<li><p>常见算法</p>\n<ol>\n<li>GN算法<ol>\n<li>思想：在一个网络之中，通过社区内部的边的最短路径相对较少，而通过社区之间的边的最短路径的数目则相对较多。从社区内部走大概率会走很多条边。</li>\n<li>步骤<ol>\n<li>计算每一条边的边介数。边介数（betweenness）：网络中任意两个节点通过此边的最短路径的数目。</li>\n<li>删除边介数最大的边</li>\n<li>重复（1）（2），直到网络中的任一顶点作为一个社区为止。</li>\n</ol>\n</li>\n<li>缺陷<ol>\n<li>不知道最后会有多少个社区</li>\n<li>在计算边介数的时候可能会有很对重复计算最短路径的情况，时间复杂度太高</li>\n<li>GN算法不能判断算法终止位置</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>LPA算法（标签传播算法）<ol>\n<li>思路<ol>\n<li>自己是什么标签，由邻居决定。邻居中什么标签最多，则此结点是什么标签</li>\n</ol>\n</li>\n<li>步骤<ol>\n<li>为所有结点指定一个唯一的标签</li>\n<li>逐轮刷新所有结点的标签，直到达到收敛要求位置。刷新规则： 对于某一个节点，考察其所有邻居节点的标签，并进行统计，将出现个数最多的那个标签赋给当前节点。当个数最多的标签不唯一时，随机选一个。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><ol>\n<li>定义 ：<strong>拓扑排序（Topological Sorting）</strong>是一个<strong>有向无环图（DAG, Directed Acyclic Graph）</strong>的所有顶点的线性序列。且该序列必须满足下面两个条件：<ol>\n<li>每个顶点出现且只出现一次</li>\n<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面</li>\n</ol>\n</li>\n<li>步骤<ol>\n<li>从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出</li>\n<li>从图中删除该顶点和所有以它为起点的有向边</li>\n<li>重复 1 和 2 直到当前的 DAG 图为空或<strong>当前图中不存在无前驱的顶点为止</strong>。后一种情况说明有向图中必然存在环<br><a href=\"http://img.blog.csdn.net/20150507001759702\" data-fancybox=\"group\" data-caption=\"img\" class=\"fancybox\"><img alt=\"img\" title=\"img\" data-src=\"http://img.blog.csdn.net/20150507001759702\" class=\"lazyload\"></a></li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/868097/pexels-photo-868097.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":2613,"excerpt":"<h1 id=\"图算法的典型操作\"><a href=\"#图算法的典型操作\" class=\"headerlink\" title=\"图算法的典型操作\"></a>图算法的典型操作</h1><p>关于一些常见图算法的调研与学习。</p>","more":"<h2 id=\"常用图算法\"><a href=\"#常用图算法\" class=\"headerlink\" title=\"常用图算法\"></a>常用图算法</h2><h3 id=\"PageRank\"><a href=\"#PageRank\" class=\"headerlink\" title=\"PageRank\"></a>PageRank</h3><ol>\n<li><p>背景    </p>\n<ol>\n<li>既考虑入链数量，又考虑了网页质量因素，二者相结合 数量与权重的结合</li>\n<li>算法与主题无关，因为PR值是根据图计算出来的</li>\n</ol>\n</li>\n<li><p>算法原理</p>\n<ol>\n<li><p>基本思想</p>\n<p>A有链接指向B，表明A认为B比A重要。A将自身权重分配一部分给B。</p>\n<p>$W(B)=W(A)/N$   W(A) 是A的PR值，W(B)是A 分配的权重，N是A的出链数</p>\n</li>\n<li><p>PageRank公式修正</p>\n<p>存在出链为0的孤立网页，增加阻力系数q ，一般取q=0.85，其意义是用户有1-q的概率不点击此页面上面的所有链接。同时还有随机直接跳转的概率，如直接输入网址，点击书签等。完整公式如下：</p>\n<p><img src=\"E:\\data\\ict\\docs\\page rank.png\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Connected-component\"><a href=\"#Connected-component\" class=\"headerlink\" title=\"Connected component\"></a>Connected component</h3><ol>\n<li>定义<ol>\n<li>连通分支：图中，某个子图的任意两点有边连接，而子图之间无边连接</li>\n<li>问题：cc是寻找连通分支的算法？？</li>\n</ol>\n</li>\n<li>通过BFS、DFS算法的便利就可以找到连通分支，每个白色节点开始的就是一个连通分支。</li>\n<li>常见算法<ol>\n<li>DFS<ol>\n<li>原理：访问某个顶点后只有当某个节点是叶结点后才会访问其余相邻节点。</li>\n<li>步骤：<ol>\n<li>选择一个结点作为起始结点，标记为灰色</li>\n<li>从该节点的邻居结点中选择一个结点，标记为灰色，继续这个操作</li>\n<li>当选中的结点时叶子结点时，将其涂黑并返回到上一个父节点。</li>\n<li>重复2,3直到所有结点都被访问。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>BFS   （DFS，BFS不是图的遍历算法吗）。<ol>\n<li>原理：在进一步遍历中顶点之前，先访问当前结点的所有邻接结点。</li>\n<li>步骤：<ol>\n<li>选择一个顶点作为起始节点，放入队列，标记为灰色，其余标记为白色</li>\n<li>寻找队列首部结点的所有邻居节点，将其放入队列中并标记为灰色，将队列首部结点出队，并标记为黑色  </li>\n<li>重复2步骤，直到队列中的节点全部为空。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"SSSP-single-source-shortest-paths\"><a href=\"#SSSP-single-source-shortest-paths\" class=\"headerlink\" title=\"SSSP (single-source shortest paths)\"></a>SSSP (single-source shortest paths)</h3><ol>\n<li>单独的起点与目标点之间最短路径的计算。起点固定，寻找与其他所有结点之间的最短路径。包括单源单汇，单源多汇</li>\n<li>常见算法<ol>\n<li>Dijkstra<ol>\n<li>步骤<ol>\n<li>将所有顶点分成两个集合A、B，其中集合A表示已经求得从V0出发的最短路径的顶点集合，集合B为为待求解的顶点集合。初始时有A={V0}</li>\n<li>将集合A与集合B相连的边（A中的所有结点与B中所有的结点形成的边）按照从V0出发的最短权重和递增次序排序，取最短的边，将该条边在集合B中所对应的顶点加入到集合A中</li>\n<li>重复第二步，直至B为空集。</li>\n</ol>\n</li>\n<li>总结：<ol>\n<li>最短中的最短：每次迭代时比较的是当前状态下以V0为起点，A中顶点为中间点的到各顶点之间的最短路径权重，最后再选择在当前所有最短路径中路径最短的一个顶点加入A。也就是说每次加入A集合的点是最短路径中的最短。</li>\n<li>给定目标点，在每次迭代时，并不知道能否到达最后的目标点，所以把到所有结点的最短距离都算出来了。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Betweenness-Centrality（中介中心性）\"><a href=\"#Betweenness-Centrality（中介中心性）\" class=\"headerlink\" title=\"Betweenness Centrality（中介中心性）\"></a>Betweenness Centrality（中介中心性）</h3><ol>\n<li><p>定义 ：中心性用来衡量节结点的重要性。Betweenness Centrality ：考虑的是该节点出现在其他两节点之间的最短路径上的比率。</p>\n</li>\n<li><p>思想：如果一个成员位于其他成员的多条最短路上，那么该成员就是核心成员，就具有较大的中介中心性。</p>\n</li>\n<li><p>步骤</p>\n<p>其中<img src=\"https://i2.wp.com/upload.wikimedia.org/math/b/b/7/bb79bd91213d03edf0c8fc04fbd51085.png\" alt=\"\\sigma_{st}\">表示的是节点s和t之间的最短路径的数量，而<img src=\"https://i2.wp.com/upload.wikimedia.org/math/4/2/c/42c33f5f78864175f0d9c9af1c492f5d.png\" alt=\"\\sigma_{st}(v)\">是最短路径中经过节点v的数量。</p>\n<ol>\n<li><p>计算各个点对之间最短路径的长度和条数，用于计算pair-dependencies: δst(v) =σst(v)/σst</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201305/11121047_IQnh.jpg\" alt=\"clip_image004\"></p>\n</li>\n<li><p>对于每个节点，累积属于自己的pair-dependencies</p>\n</li>\n</ol>\n<p><img src=\"https://i2.wp.com/upload.wikimedia.org/math/4/c/c/4cc6eaa2dce9d504feeed5bd88b96d73.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"LBP算法-Local-Binary-Pattern-局部二值模式\"><a href=\"#LBP算法-Local-Binary-Pattern-局部二值模式\" class=\"headerlink\" title=\"LBP算法(Local Binary Pattern, 局部二值模式)\"></a>LBP算法(Local Binary Pattern, 局部二值模式)</h3><ol>\n<li><p>定义：LBP是一种用来描述图像局部纹理特征的算子。</p>\n<ol>\n<li>原始的LBP算子定义为在3*3的窗口内，以窗口中心像素为阈值，将相邻的8个像素的灰度值与其进行比较，若周围像素值大于中心像素值，则该像素点的位置被标记为1，否则为0</li>\n</ol>\n<p><img src=\"http://hi.csdn.net/attachment/201104/13/0_1302700245WllL.gif\" alt=\"img\"></p>\n</li>\n<li><p>作用是进行特征提取，而且，提取的特征是图像的纹理特征，并且，是局部的纹理特征.</p>\n</li>\n<li><p>改进版本</p>\n<ol>\n<li>原型LBP算子 </li>\n<li>LBP等价模式</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h3><ol>\n<li>定义：无环连通图，图中所有结点均参与，所有边的权重加起来最小。</li>\n<li>算法<ol>\n<li>Prim算法  <ol>\n<li>步骤：设N=(V,{E})是连通网， TE是N上最小生成树中边的集合 <ol>\n<li>初始令U={u0},(u0V), TE=φ</li>\n<li>在所有uU,vV-U的边(u,v)E中，找一条代价最小<br>的边(u0,v0), 并保证不形成回路 </li>\n<li>将(u0,v0)并入集合TE，同时v0并入U </li>\n<li>重复上述操作直至U=V为止，则T=(V,{TE})为N的<br>最小生成树  </li>\n</ol>\n</li>\n<li>总结：每次迭代加入所有连通边中权值最小的。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"三角计数\"><a href=\"#三角计数\" class=\"headerlink\" title=\"三角计数\"></a>三角计数</h3><ol>\n<li>定义：寻找无向图中的所有三角形</li>\n<li>步骤<ol>\n<li>建立邻接表：<ol>\n<li>如果A-B &amp; A &lt; B，则将B加入A的邻接表 如果A-B &amp; B &lt; A，则将A加入B的邻接表  A&lt;B比较的是id</li>\n</ol>\n</li>\n<li>遍历每个节点，对于结点A，遍历A邻接表中的结点，如果邻接结点B,C两两之间存在边，则A、B、C三者之间存在三角形</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"社区发现\"><a href=\"#社区发现\" class=\"headerlink\" title=\"社区发现\"></a>社区发现</h3><ol>\n<li><p>社区定义：同一社区内的节点与节点之间的连接很紧密，而社区与社区之间的连接比较稀疏。社区是一个子图</p>\n</li>\n<li><p>数学描述：<img src=\"https://img-blog.csdn.net/20130710080910046\" alt=\"\"></p>\n</li>\n<li><p>衡量标准：模块度</p>\n<ol>\n<li>计算公式</li>\n</ol>\n<p><img src=\"https://img-blog.csdn.net/20130710081032203\" alt=\"\"></p>\n</li>\n<li><p>常见算法</p>\n<ol>\n<li>GN算法<ol>\n<li>思想：在一个网络之中，通过社区内部的边的最短路径相对较少，而通过社区之间的边的最短路径的数目则相对较多。从社区内部走大概率会走很多条边。</li>\n<li>步骤<ol>\n<li>计算每一条边的边介数。边介数（betweenness）：网络中任意两个节点通过此边的最短路径的数目。</li>\n<li>删除边介数最大的边</li>\n<li>重复（1）（2），直到网络中的任一顶点作为一个社区为止。</li>\n</ol>\n</li>\n<li>缺陷<ol>\n<li>不知道最后会有多少个社区</li>\n<li>在计算边介数的时候可能会有很对重复计算最短路径的情况，时间复杂度太高</li>\n<li>GN算法不能判断算法终止位置</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>LPA算法（标签传播算法）<ol>\n<li>思路<ol>\n<li>自己是什么标签，由邻居决定。邻居中什么标签最多，则此结点是什么标签</li>\n</ol>\n</li>\n<li>步骤<ol>\n<li>为所有结点指定一个唯一的标签</li>\n<li>逐轮刷新所有结点的标签，直到达到收敛要求位置。刷新规则： 对于某一个节点，考察其所有邻居节点的标签，并进行统计，将出现个数最多的那个标签赋给当前节点。当个数最多的标签不唯一时，随机选一个。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><ol>\n<li>定义 ：<strong>拓扑排序（Topological Sorting）</strong>是一个<strong>有向无环图（DAG, Directed Acyclic Graph）</strong>的所有顶点的线性序列。且该序列必须满足下面两个条件：<ol>\n<li>每个顶点出现且只出现一次</li>\n<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面</li>\n</ol>\n</li>\n<li>步骤<ol>\n<li>从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出</li>\n<li>从图中删除该顶点和所有以它为起点的有向边</li>\n<li>重复 1 和 2 直到当前的 DAG 图为空或<strong>当前图中不存在无前驱的顶点为止</strong>。后一种情况说明有向图中必然存在环<br><img src=\"http://img.blog.csdn.net/20150507001759702\" alt=\"img\"></li>\n</ol>\n</li>\n</ol>"},{"title":"Redis源码阅读——SDS","date":"2019-03-22T07:58:45.000Z","copyright":true,"_content":"\n# Redis源码阅读——SDS\n\n参考Redis设计与实现 以及网上博客阅读Redis源码。\n\n<!--more-->\n\nSDS相关知识点见读书笔记。\n\n## 创建和销毁\n\n为了能够对sds进行相关API的测试，因此把sds模块单独提出来。阅读Redis的Makefile发现，编译sds模块需要的源文件包括`sds.c`, `sds.h` `zmalloc.c` \n\n```Make\ntest-sds: sds.c sds.h\n        $(REDIS_CC) sds.c zmalloc.c -DSDS_TEST_MAIN $(FINAL_LIBS) -o /tmp/sds_test\n        /tmp/sds_test\n```\n\n但是实际编译后会发现会报很多函数未定义的错。原因是redis源码里面sds的内存分配、释放、重分配这些函数是封装成zmalloc,zfee这些函数的，只单纯的把zmalloc.c提取出来是远远不够的。后面发现redis的作者已经把sds给单独提出来了。包括三个源文件`sds.c`,`sds.h`,`sdsalloc.h` 因此执行如下操作即可单独把redis的sds模块提取出来。\n\n### 提取sds模块\n\n1. 新建redis_sds测试目录\n\n   选择合适的目录下新建\n\n   `mkdir redis_sds`\n\n2. 复制源文件至redis_sds目录下\n\n   在redis源码的src目录下执行：\n\n   `cp sds.c ~/redis_sds/`\n\n   `cp sds.h ~/redis_sds/`\n\n   `cp sdsalloc.h ~/redis_sds/`\n\n3. 修改sdsalloc.h \n\n   复制过来的sdsalloc.h 将sds模块的内存函数封装为使用zmalloc函数。为了简化处理直接使用libc的malloc函数来进行内存管理，同时将zmalloc.h给注释掉。\n\n   ```c\n   //#include \"zmalloc.h\"\n   #define s_malloc malloc\n   #define s_realloc realloc\n   #define s_free free\n   ```\n\n4. 新建主函数\n\n   新建主函数sds_test.c\n\n   ```c\n   #include <stdio.h>\n   #include <stdlib.h>\n   #include \"sds.c\"\n   //#include \"sds.h\"\n   int main(int argc, char *argv[]) {\n       sds s = sdsnew(\"Hello World!\");\n       printf(\"Length:%d, Type:%d\\n\", sdslen(s), sdsReqType(sdslen(s)));\n   \n       s = sdscat(s, \"The length of this sentence is greater than 32 bytes\");\n       printf(\"Length:%d, Type:%d\\n\", sdslen(s), sdsReqType(sdslen(s)));\n   \n       sdsfree(s);\n       return 0;\n   }\n   ```\n\n   直接include sds.c 即可，因为如果#include “sds.h” 的话，sdsReqType这个函数并没有在sds.h里面声明，而且因为sdsReqType的申明是：\n\n   `static inline char sdsReqType(size_t string_size) {`  有static限制所以不能在sds.h中先声明，所以为了简单就直接#include 了sds.c了\n\n5. 编译  \n\n   为了方便重复编译，所以写了个简单的Makefile。\n\n   ```\n   test : sds_test.c sds.h sds.c sdsalloc.h\n           gcc -o sdstest sds_test.c\n   ```\n\n   只需要编译sds_test.c 即可。因为sds_test.c 里面是直接#include sds.c 了所以再\n\n   `gcc -o sdstest sds_test.c sds.c` 会将sds.c 里面的函数重复编译两次，造成Multiple definition 问题。\n\n   之后只需要执行make命令就可以生成可执行文件sdstest。\n\n   执行后输出为：\n\n   ```\n   ./sdstest \n   Length:12, Type:0\n   Length:64, Type:1\n   ```\n\n   ### sds的创建\n\n   通过`sdsnew` 来创建了一个sds。sdsnew源码为：\n\n   ```c\n   /* Create a new sds string starting from a null terminated C string. */\n   sds sdsnew(const char *init) {\n       //使用？条件判断符来简化if语句对NULL的判断，直接使用strlen来返回字符指针的长度。\n       size_t initlen = (init == NULL) ? 0 : strlen(init); \n       return sdsnewlen(init, initlen);\n   }\n   ```\n\n   需要注意的是字符数组和字符指针是有区别的：字符指针的数据是存放在进程的虚拟地址空间的程序代码和数据段，是只读的不能修改。字符数组存放的字符串数据是存放在用户栈的，是可以更改的。且字符指针的数据没有\"\\0\"这个结束符。\n\n   参考博客讲的很好：<https://blog.csdn.net/on_1y/article/details/13030439>\n\n   `sdsnew` 通过把字符串长度和字符串传递给`sdsnewlen`，来完成创建。\n\n   ```c\n   \n   /* Create a new sds string with the content specified by the 'init' pointer\n    * and 'initlen'.\n    * If NULL is used for 'init' the string is initialized with zero bytes.\n    *\n    * The string is always null-termined (all the sds strings are, always) so\n    * even if you create an sds string with:\n    *\n    * mystring = n(\"abc\",3);\n    *\n    * You can print the string with printf() as there is an implicit \\0 at the\n    * end of the string. However the string is binary safe and can contain\n    * \\0 characters in the middle, as the length is stored in the sds header. */\n   sds sdsnewlen(const void *init, size_t initlen) {\n       void *sh;\n       sds s;\n       char type = sdsReqType(initlen);  //返回字符串对应的type\n       /* Empty strings are usually created in order to append. Use type 8\n        * since type 5 is not good at this. */\n       /*\n       空字符串使用sdshdr8来存储，而不是sdshdr5,（虽然长度小于32），因为sdshdr5不适合扩容。\n       */\n       if (type == SDS_TYPE_5 && initlen == 0) type = SDS_TYPE_8;\n       int hdrlen = sdsHdrSize(type); // 返回对应类型的sdsheader长度。\n       unsigned char *fp; /* flags pointer. */\n   \n       sh = s_malloc(hdrlen+initlen+1); // 申请头部+字符串+NULL的大小。(单位为byte)\n       if (!init)\n           memset(sh, 0, hdrlen+initlen+1); // 将sh后面对应大小的字节全部置为0；\n       if (sh == NULL) return NULL;\n       s = (char*)sh+hdrlen; //s指针指向字符串的首字节。\n       fp = ((unsigned char*)s)-1; // fp指针指向flag\n       switch(type) {  // 初始化sdshdr\n           case SDS_TYPE_5: {\n               *fp = type | (initlen << SDS_TYPE_BITS);// 设置flag这个字节的具体值\n               break;\n           }\n           case SDS_TYPE_8: {\n               SDS_HDR_VAR(8,s); // 获取header指针sh\n               sh->len = initlen; //header中len的初始\n               sh->alloc = initlen; //header 中alloc的初试\n               *fp = type;  //flag 的初始。\n               break;\n           }\n           case SDS_TYPE_16: {\n               SDS_HDR_VAR(16,s);\n               sh->len = initlen;\n               sh->alloc = initlen;\n               *fp = type; \n               break;\n           }\n           case SDS_TYPE_32: {\n               SDS_HDR_VAR(32,s);\n               sh->len = initlen;\n               sh->alloc = initlen;\n               *fp = type;\n               break;\n           }\n           case SDS_TYPE_64: {\n               SDS_HDR_VAR(64,s);\n               sh->len = initlen;\n               sh->alloc = initlen;\n               *fp = type;\n               break;\n           }\n       }\n       if (initlen && init)\n           memcpy(s, init, initlen); // 将字符串拷贝到s(也就是buf数组)\n       s[initlen] = '\\0'; //在字符串后面添加终止符\n       return s;\n   }\n   ```\n\n   `    char type = sdsReqType(initlen);` 获取sds类型，源码分析在读书笔记里面有记录。源码为\n\n   ```c\n   static inline char sdsReqType(size_t string_size) {\n       if (string_size < 1<<5) // string_size < 2^5\n           return SDS_TYPE_5;\n       if (string_size < 1<<8)  //string_size < 2^8\n           return SDS_TYPE_8;\n       if (string_size < 1<<16)\t//string_size < 2^16\n           return SDS_TYPE_16;\n   #if (LONG_MAX == LLONG_MAX)\n       if (string_size < 1ll<<32)  //string_size < 2^32\n           return SDS_TYPE_32;\n   #endif\n       return SDS_TYPE_64; \n   }\n   ```\n\n   采用左移来计算对应多少位的范围，而不是用2^5 这样的乘法。**直接移位比使用幂来计算快很多**。\n\n   `1<<5`   计算出来就是2^5 次方。1是int型，4byte32位。最低8bit位的二进制为：00000001 左移5位后变成了：00100000 对应的十进制既是32。\n\n   计算n个bit位的最大值：(1<<n) -1\n\n   但是需要注意位数不够的情况。因为1是int型，只有32个bit。所以在左移32个bit时，需要使用long long int型。用1ll来表示，此时1ll为64个bit。\n\n   还得考虑机器是否为64位机器，在32位机器上LONG_MAX = 2147483647L，64位机器上LONG_MAX = 9223372036854775807L 。不论32位机器还是64位机器上 LLONG_MAX 都是9223372036854775807L 。所以当LONG_MAX == LLONG_MAX 说明字长为64bit。加上条件编译，说明在32位机器上不使用sdshdr32而直接跳到了sdshdr64，仅仅在64位机器上使用sdshdr32。原因是什么？还没想通\n\n   ```c\n   static inline int sdsHdrSize(char type) {\n       switch(type&SDS_TYPE_MASK) {\n           case SDS_TYPE_5:\n               return sizeof(struct sdshdr5);\n           case SDS_TYPE_8:\n               return sizeof(struct sdshdr8);\n           case SDS_TYPE_16:\n               return sizeof(struct sdshdr16);\n           case SDS_TYPE_32:\n               return sizeof(struct sdshdr32);\n           case SDS_TYPE_64:\n               return sizeof(struct sdshdr64);\n       }\n       return 0;\n   }\n   ```\n\n   因为struct里面的buf数组是柔性数组，计算结构体的大小的时候不会计算在内。\n\n   `memset(sh, 0, hdrlen+initlen+1);`  memset函数会将sh中当前位置后面的`hdrlen+initlen+1`个字节全部置于0。 注意sh指向的是`hdrlen+initlen+1` 个字节的首个字节。（sh指针存储的地址就是首个字节的地址。） \n\n   memset源码为：<https://github.com/gcc-mirror/gcc/blob/master/libgcc/memset.c>\n\n   ```c\n   /* Public domain.  */\n   #include <stddef.h>\n   \n   void *\n   memset (void *dest, int val, size_t len)\n   {\n     unsigned char *ptr = dest; // 用char来限定每次指针+1只移动一个字节。\n     while (len-- > 0)\n       *ptr++ = val;\n     return dest;\n   }\n   ```\n\n   假设`hdrlen+initlen+1` 为8 ，经过memset后，从sh首字节开始共有8个字节都被置为0。\n\n   ![](https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/memset.png)\n\n   指针的类型时用来确定指针需要从首地址寻址（偏移）多少个字节。比如int * 指针说明指针存储的地址朝后面偏移3个字节才是这个int类型的所有数据。即指针存储的地址时起点，而终点是由类型来确定的。此外，类型也是指针加减的步长，比如char类型的步长就是1byte，而uint_16类型的指针步长就是2byte。\n\n   随后用switch语句对不同类型的sdshdr设置初始值。\n\n   首先是sdshdr5\n\n    `*fp = type | (initlen << SDS_TYPE_BITS)` 使用移位和或操作的方式来对8个bit位赋值。(不得不感慨这些操作真的是太巧妙了)\n\n   假设initlen为3。则initlen的二进制为0000 0011（应该是8byte（64位机器）或者4byte（32位机器），为了简单用1byte的二进制表示）而SDS_TYPE_BITS 为3。所以先将initlen 左移3个bit 变成0000 0001 1000(共有8byte或者4byte)。再与type进行或运算。type为0000 0000 进行或运算后，得到的内容是8bit的，因为type是char类型，即0001 1000 。\n\n   其他sdshdr类型的设置都差不多，详解下sdshdr8.\n\n   `SDS_HDR_VAR(8,s)`  `SDS_HDR_VAR` 是个宏定义的函数\n\n   `#define SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));`\n\n   采用宏定义函数的好处是\n\n   1. 能够减少额外的开销 因为如果写成普通函数的话，函数的调用会在用户栈开辟空间，形参压栈，返回时还需要释放栈，可想而知的开销。使用宏定义函数则在代码规模和速度方面都比函数更胜一筹。宏定义的本质就是替换，所以在使用宏定义函数的地方，执行的时候相当于是在直接执行`struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)))` 这句代码\n   2. 函数的参数必须被声明为一种特定的类型，所以它只能在类型合适的表达式上使用。而宏定义则可以用于整形、长整形、单浮点型、双浮点型以及其他任何可以用“>”操作符比较值大小的类型，也就是说，宏是与类型无关的。（有点C++模版类的感觉）\n\n   宏定义函数中的## 是（token-pasting）**符号连接操作符** 直接将形参T链接到sdshdr上面。也就是sdshdrT。\n\n   所以这句代码也就很简单了，将字符串指针s向后移动header的大小，也就得到了header的指针。（不过有个疑问是为什么还要重新获取headr的地址，最开始不就是指向了header吗？，难道memset是直接对sh进行操作的？测试过了，memset不会修改sh的地址，所以应该是为了再次确保sh一定指向header）\n\n   解释一下：SDS_HDR_VAR 的作用是将sh的类型修改为结构体指针，因为之前sh 一直都是空指针，(虽然指针的指向地址是headr，但是没有限定它类型)不然后面没法用sh->len, sh->alloc 来访问对应的结构体成员。\n\n   最开始创建的时候alloc 和len是一样大的，没有分配多余空间）\n\n   `memcpy(s, init, initlen);` 函数将init的前initlen个字符拷贝给s。\n\n   memcpy源码为：\n\n   ```\n   /* Public domain.  */\n   #include <stddef.h>\n   \n   void *\n   memcpy (void *dest, const void *src, size_t len)\n   {\n     char *d = dest;\n     const char *s = src;\n     while (len--)\n       *d++ = *s++;\n     return dest;\n   }\n   ```\n\n   整个过程中的三个指针sh,s,fp对应关系如下图\n\n   ![](https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/sds.png)\n\n\n\n## 销毁\n\n销毁使用sdsfree来实现\n\n源码为：\n\n```c\n/* Free an sds string. No operation is performed if 's' is NULL. */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    s_free((char*)s-sdsHdrSize(s[-1]));\n}\n```\n\ns[-1],就是指针s向后移动移位，也就是flag的位置。将s移动到sh的位置，释放sh指针也就释放了整个sds内存。\n\n疑惑：sh指针在sdsnewlen函数中是个局部变量，在sdsnewlen函数中是自动释放的，这里并没有传递sh指针为什么也可以释放对应的空间？\n\n自己想了下：malloc 函数传递的参数是需要分配的内存大小(len)，返回的是指针也就是地址。free()函数只用将malloc函数返回的指针(地址)作为参数传入，就可以释放之前该地址分配到的内存空间。而地址只是首地址，总共的偏移量（大小），应该是由操作系统在内存分配的时候就记录了的。\n\n博客中记录：申请的时候实际上占用的内存要比申请的大。因为超出的空间是用来记录对这块内存的管理信息。额外的空间用来记录管理信息——分配块的长度，指向下一个分配块的指针等等。果然malloc的时候用来一个struct来记录分配的信息。\n\n```c\n  struct mem_control_block { \n    int is_available;    //一般来说应该是一个可用空间的首地址，但这里英文单词却显示出空间是否可用的一个标记\n    int size;            //这是实际空间的大小 \n    };\n```\n\n<http://www.cnblogs.com/hanyonglu/archive/2011/04/28/2031271.html>\n\nfree()就是根据这个结构体的信息来释放malloc()申请的空间\n\n另外的疑惑：释放完空间后，s 指针不用把它指向null吗？  \n\n\n\n暂时就只是创建和销毁的源码把，看了两天，阅读源码真的是酣畅淋漓，收获良多。学到了很多奇妙的C技巧，还对操作系统的知识有了更具象的理解。\n\n## 其他\n\n阅读sdsfromlonglong部分的源码：\n\nsdsfromlonglong 函数用于将一个long long 类型的整形数字转换为字符数组。\n\n```c\n/* Create an sds string from a long long value. It is much faster than:\n *\n * sdscatprintf(sdsempty(),\"%lld\\n\", value);\n */\nsds sdsfromlonglong(long long value) {\n    char buf[SDS_LLSTR_SIZE];  // 给buf数组分配最小的空间，21的长度\n    int len = sdsll2str(buf,value); //将long long 转为字符数组存储在buf中，并返回字符串的长度\n\n    return sdsnewlen(buf,len);\n}\n```\n\n可以看到主要的转换操作在sdsll2str这个函数中：\n\n```c\n/* Helper for sdscatlonglong() doing the actual number -> string\n * conversion. 's' must point to a string with room for at least\n * SDS_LLSTR_SIZE bytes.\n *\n * The function returns the length of the null-terminated string\n * representation stored at 's'. */\n#define SDS_LLSTR_SIZE 21\nint sdsll2str(char *s, long long value) {\n    char *p, aux;\n    unsigned long long v; \n    size_t l;\n\n    /* Generate the string representation, this method produces\n     * an reversed string. */\n    v = (value < 0) ? -value : value;  //判断是否为负数\n    p = s;\n    do {\n        *p++ = '0'+(v%10); // 除以10取余数\n        v /= 10;     //去除个位\n    } while(v);\n    if (value < 0) *p++ = '-';\n\n    /* Compute length and add null term. */\n    l = p-s;   // 计算出字符串的长度 不含终止符\n    *p = '\\0'; // 首地址填终止符。\n\n    /* Reverse the string. */\n    p--;\n    while(s < p) {\n        aux = *s;\n        *s = *p;\n        *p = aux;\n        s++;\n        p--;\n    }\n    return l;\n}\n```\n\n```c\n    do {\n        *p++ = '0'+(v%10); // 除以10取余数\n        v /= 10;     //去除个位\n    } while(v);\n```\n\n假设v是352，变成字符串是将每一个对应的10进制上面的3,5,2这三个个位、十位、百位的数字给单独变成字符。\n\n`*p++ = '0'+(v%10); ` p 指针是字符数组buf的首地址，而将整型变成字符型的操作就是与字符'0' 相加，这样就可以对应的数字变成字符类型。同时p相应的加1来指向下一个byte用来存储下一个被转换的char。\n\nchar类型存储的是对应字符的ascii值，ASCII表为：<https://baike.baidu.com/item/ASCII/309296> ，所以字符的运算实际上是对应的ASCII的值的运算。\nv%10是除以10取余数，352%10 =2； 35%10=5，所以也就是取得v值的10进制上面的个位数。\n所以在while循环里面每次对v除以10并取余，就可以得到对应long long 型的字符串。\n但是因为每次得到的字符都是最后面的个位数，所以352，所输出的字符串数组为：‘2’， ‘3’， ‘5’ 是一个倒序的，因此还需要再反转一次。\n\n```c\n/* Reverse the string. */ \np--;\nwhile(s < p) {\n    aux = *s;\n    *s = *p;\n    *p = aux;\n    s++;\n    p--;\n}\n```\n字符串反转，首尾各有一个指针，当首指针小于尾指针的时候，交换数字，并同时向中间移动\n\n## 参考资料\n\n<https://blog.csdn.net/yangbodong22011/article/details/78419966>","source":"_posts/Redis源码阅读——SDS/2019-03-22-Redis源码阅读——SDS.md","raw":"---\ntitle: Redis源码阅读——SDS\ndate: 2019-03-22 15:58:45\ncategories: 源码阅读\ntags:\n- redis\n- 源码阅读\ncopyright: true\n---\n\n# Redis源码阅读——SDS\n\n参考Redis设计与实现 以及网上博客阅读Redis源码。\n\n<!--more-->\n\nSDS相关知识点见读书笔记。\n\n## 创建和销毁\n\n为了能够对sds进行相关API的测试，因此把sds模块单独提出来。阅读Redis的Makefile发现，编译sds模块需要的源文件包括`sds.c`, `sds.h` `zmalloc.c` \n\n```Make\ntest-sds: sds.c sds.h\n        $(REDIS_CC) sds.c zmalloc.c -DSDS_TEST_MAIN $(FINAL_LIBS) -o /tmp/sds_test\n        /tmp/sds_test\n```\n\n但是实际编译后会发现会报很多函数未定义的错。原因是redis源码里面sds的内存分配、释放、重分配这些函数是封装成zmalloc,zfee这些函数的，只单纯的把zmalloc.c提取出来是远远不够的。后面发现redis的作者已经把sds给单独提出来了。包括三个源文件`sds.c`,`sds.h`,`sdsalloc.h` 因此执行如下操作即可单独把redis的sds模块提取出来。\n\n### 提取sds模块\n\n1. 新建redis_sds测试目录\n\n   选择合适的目录下新建\n\n   `mkdir redis_sds`\n\n2. 复制源文件至redis_sds目录下\n\n   在redis源码的src目录下执行：\n\n   `cp sds.c ~/redis_sds/`\n\n   `cp sds.h ~/redis_sds/`\n\n   `cp sdsalloc.h ~/redis_sds/`\n\n3. 修改sdsalloc.h \n\n   复制过来的sdsalloc.h 将sds模块的内存函数封装为使用zmalloc函数。为了简化处理直接使用libc的malloc函数来进行内存管理，同时将zmalloc.h给注释掉。\n\n   ```c\n   //#include \"zmalloc.h\"\n   #define s_malloc malloc\n   #define s_realloc realloc\n   #define s_free free\n   ```\n\n4. 新建主函数\n\n   新建主函数sds_test.c\n\n   ```c\n   #include <stdio.h>\n   #include <stdlib.h>\n   #include \"sds.c\"\n   //#include \"sds.h\"\n   int main(int argc, char *argv[]) {\n       sds s = sdsnew(\"Hello World!\");\n       printf(\"Length:%d, Type:%d\\n\", sdslen(s), sdsReqType(sdslen(s)));\n   \n       s = sdscat(s, \"The length of this sentence is greater than 32 bytes\");\n       printf(\"Length:%d, Type:%d\\n\", sdslen(s), sdsReqType(sdslen(s)));\n   \n       sdsfree(s);\n       return 0;\n   }\n   ```\n\n   直接include sds.c 即可，因为如果#include “sds.h” 的话，sdsReqType这个函数并没有在sds.h里面声明，而且因为sdsReqType的申明是：\n\n   `static inline char sdsReqType(size_t string_size) {`  有static限制所以不能在sds.h中先声明，所以为了简单就直接#include 了sds.c了\n\n5. 编译  \n\n   为了方便重复编译，所以写了个简单的Makefile。\n\n   ```\n   test : sds_test.c sds.h sds.c sdsalloc.h\n           gcc -o sdstest sds_test.c\n   ```\n\n   只需要编译sds_test.c 即可。因为sds_test.c 里面是直接#include sds.c 了所以再\n\n   `gcc -o sdstest sds_test.c sds.c` 会将sds.c 里面的函数重复编译两次，造成Multiple definition 问题。\n\n   之后只需要执行make命令就可以生成可执行文件sdstest。\n\n   执行后输出为：\n\n   ```\n   ./sdstest \n   Length:12, Type:0\n   Length:64, Type:1\n   ```\n\n   ### sds的创建\n\n   通过`sdsnew` 来创建了一个sds。sdsnew源码为：\n\n   ```c\n   /* Create a new sds string starting from a null terminated C string. */\n   sds sdsnew(const char *init) {\n       //使用？条件判断符来简化if语句对NULL的判断，直接使用strlen来返回字符指针的长度。\n       size_t initlen = (init == NULL) ? 0 : strlen(init); \n       return sdsnewlen(init, initlen);\n   }\n   ```\n\n   需要注意的是字符数组和字符指针是有区别的：字符指针的数据是存放在进程的虚拟地址空间的程序代码和数据段，是只读的不能修改。字符数组存放的字符串数据是存放在用户栈的，是可以更改的。且字符指针的数据没有\"\\0\"这个结束符。\n\n   参考博客讲的很好：<https://blog.csdn.net/on_1y/article/details/13030439>\n\n   `sdsnew` 通过把字符串长度和字符串传递给`sdsnewlen`，来完成创建。\n\n   ```c\n   \n   /* Create a new sds string with the content specified by the 'init' pointer\n    * and 'initlen'.\n    * If NULL is used for 'init' the string is initialized with zero bytes.\n    *\n    * The string is always null-termined (all the sds strings are, always) so\n    * even if you create an sds string with:\n    *\n    * mystring = n(\"abc\",3);\n    *\n    * You can print the string with printf() as there is an implicit \\0 at the\n    * end of the string. However the string is binary safe and can contain\n    * \\0 characters in the middle, as the length is stored in the sds header. */\n   sds sdsnewlen(const void *init, size_t initlen) {\n       void *sh;\n       sds s;\n       char type = sdsReqType(initlen);  //返回字符串对应的type\n       /* Empty strings are usually created in order to append. Use type 8\n        * since type 5 is not good at this. */\n       /*\n       空字符串使用sdshdr8来存储，而不是sdshdr5,（虽然长度小于32），因为sdshdr5不适合扩容。\n       */\n       if (type == SDS_TYPE_5 && initlen == 0) type = SDS_TYPE_8;\n       int hdrlen = sdsHdrSize(type); // 返回对应类型的sdsheader长度。\n       unsigned char *fp; /* flags pointer. */\n   \n       sh = s_malloc(hdrlen+initlen+1); // 申请头部+字符串+NULL的大小。(单位为byte)\n       if (!init)\n           memset(sh, 0, hdrlen+initlen+1); // 将sh后面对应大小的字节全部置为0；\n       if (sh == NULL) return NULL;\n       s = (char*)sh+hdrlen; //s指针指向字符串的首字节。\n       fp = ((unsigned char*)s)-1; // fp指针指向flag\n       switch(type) {  // 初始化sdshdr\n           case SDS_TYPE_5: {\n               *fp = type | (initlen << SDS_TYPE_BITS);// 设置flag这个字节的具体值\n               break;\n           }\n           case SDS_TYPE_8: {\n               SDS_HDR_VAR(8,s); // 获取header指针sh\n               sh->len = initlen; //header中len的初始\n               sh->alloc = initlen; //header 中alloc的初试\n               *fp = type;  //flag 的初始。\n               break;\n           }\n           case SDS_TYPE_16: {\n               SDS_HDR_VAR(16,s);\n               sh->len = initlen;\n               sh->alloc = initlen;\n               *fp = type; \n               break;\n           }\n           case SDS_TYPE_32: {\n               SDS_HDR_VAR(32,s);\n               sh->len = initlen;\n               sh->alloc = initlen;\n               *fp = type;\n               break;\n           }\n           case SDS_TYPE_64: {\n               SDS_HDR_VAR(64,s);\n               sh->len = initlen;\n               sh->alloc = initlen;\n               *fp = type;\n               break;\n           }\n       }\n       if (initlen && init)\n           memcpy(s, init, initlen); // 将字符串拷贝到s(也就是buf数组)\n       s[initlen] = '\\0'; //在字符串后面添加终止符\n       return s;\n   }\n   ```\n\n   `    char type = sdsReqType(initlen);` 获取sds类型，源码分析在读书笔记里面有记录。源码为\n\n   ```c\n   static inline char sdsReqType(size_t string_size) {\n       if (string_size < 1<<5) // string_size < 2^5\n           return SDS_TYPE_5;\n       if (string_size < 1<<8)  //string_size < 2^8\n           return SDS_TYPE_8;\n       if (string_size < 1<<16)\t//string_size < 2^16\n           return SDS_TYPE_16;\n   #if (LONG_MAX == LLONG_MAX)\n       if (string_size < 1ll<<32)  //string_size < 2^32\n           return SDS_TYPE_32;\n   #endif\n       return SDS_TYPE_64; \n   }\n   ```\n\n   采用左移来计算对应多少位的范围，而不是用2^5 这样的乘法。**直接移位比使用幂来计算快很多**。\n\n   `1<<5`   计算出来就是2^5 次方。1是int型，4byte32位。最低8bit位的二进制为：00000001 左移5位后变成了：00100000 对应的十进制既是32。\n\n   计算n个bit位的最大值：(1<<n) -1\n\n   但是需要注意位数不够的情况。因为1是int型，只有32个bit。所以在左移32个bit时，需要使用long long int型。用1ll来表示，此时1ll为64个bit。\n\n   还得考虑机器是否为64位机器，在32位机器上LONG_MAX = 2147483647L，64位机器上LONG_MAX = 9223372036854775807L 。不论32位机器还是64位机器上 LLONG_MAX 都是9223372036854775807L 。所以当LONG_MAX == LLONG_MAX 说明字长为64bit。加上条件编译，说明在32位机器上不使用sdshdr32而直接跳到了sdshdr64，仅仅在64位机器上使用sdshdr32。原因是什么？还没想通\n\n   ```c\n   static inline int sdsHdrSize(char type) {\n       switch(type&SDS_TYPE_MASK) {\n           case SDS_TYPE_5:\n               return sizeof(struct sdshdr5);\n           case SDS_TYPE_8:\n               return sizeof(struct sdshdr8);\n           case SDS_TYPE_16:\n               return sizeof(struct sdshdr16);\n           case SDS_TYPE_32:\n               return sizeof(struct sdshdr32);\n           case SDS_TYPE_64:\n               return sizeof(struct sdshdr64);\n       }\n       return 0;\n   }\n   ```\n\n   因为struct里面的buf数组是柔性数组，计算结构体的大小的时候不会计算在内。\n\n   `memset(sh, 0, hdrlen+initlen+1);`  memset函数会将sh中当前位置后面的`hdrlen+initlen+1`个字节全部置于0。 注意sh指向的是`hdrlen+initlen+1` 个字节的首个字节。（sh指针存储的地址就是首个字节的地址。） \n\n   memset源码为：<https://github.com/gcc-mirror/gcc/blob/master/libgcc/memset.c>\n\n   ```c\n   /* Public domain.  */\n   #include <stddef.h>\n   \n   void *\n   memset (void *dest, int val, size_t len)\n   {\n     unsigned char *ptr = dest; // 用char来限定每次指针+1只移动一个字节。\n     while (len-- > 0)\n       *ptr++ = val;\n     return dest;\n   }\n   ```\n\n   假设`hdrlen+initlen+1` 为8 ，经过memset后，从sh首字节开始共有8个字节都被置为0。\n\n   ![](https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/memset.png)\n\n   指针的类型时用来确定指针需要从首地址寻址（偏移）多少个字节。比如int * 指针说明指针存储的地址朝后面偏移3个字节才是这个int类型的所有数据。即指针存储的地址时起点，而终点是由类型来确定的。此外，类型也是指针加减的步长，比如char类型的步长就是1byte，而uint_16类型的指针步长就是2byte。\n\n   随后用switch语句对不同类型的sdshdr设置初始值。\n\n   首先是sdshdr5\n\n    `*fp = type | (initlen << SDS_TYPE_BITS)` 使用移位和或操作的方式来对8个bit位赋值。(不得不感慨这些操作真的是太巧妙了)\n\n   假设initlen为3。则initlen的二进制为0000 0011（应该是8byte（64位机器）或者4byte（32位机器），为了简单用1byte的二进制表示）而SDS_TYPE_BITS 为3。所以先将initlen 左移3个bit 变成0000 0001 1000(共有8byte或者4byte)。再与type进行或运算。type为0000 0000 进行或运算后，得到的内容是8bit的，因为type是char类型，即0001 1000 。\n\n   其他sdshdr类型的设置都差不多，详解下sdshdr8.\n\n   `SDS_HDR_VAR(8,s)`  `SDS_HDR_VAR` 是个宏定义的函数\n\n   `#define SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));`\n\n   采用宏定义函数的好处是\n\n   1. 能够减少额外的开销 因为如果写成普通函数的话，函数的调用会在用户栈开辟空间，形参压栈，返回时还需要释放栈，可想而知的开销。使用宏定义函数则在代码规模和速度方面都比函数更胜一筹。宏定义的本质就是替换，所以在使用宏定义函数的地方，执行的时候相当于是在直接执行`struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)))` 这句代码\n   2. 函数的参数必须被声明为一种特定的类型，所以它只能在类型合适的表达式上使用。而宏定义则可以用于整形、长整形、单浮点型、双浮点型以及其他任何可以用“>”操作符比较值大小的类型，也就是说，宏是与类型无关的。（有点C++模版类的感觉）\n\n   宏定义函数中的## 是（token-pasting）**符号连接操作符** 直接将形参T链接到sdshdr上面。也就是sdshdrT。\n\n   所以这句代码也就很简单了，将字符串指针s向后移动header的大小，也就得到了header的指针。（不过有个疑问是为什么还要重新获取headr的地址，最开始不就是指向了header吗？，难道memset是直接对sh进行操作的？测试过了，memset不会修改sh的地址，所以应该是为了再次确保sh一定指向header）\n\n   解释一下：SDS_HDR_VAR 的作用是将sh的类型修改为结构体指针，因为之前sh 一直都是空指针，(虽然指针的指向地址是headr，但是没有限定它类型)不然后面没法用sh->len, sh->alloc 来访问对应的结构体成员。\n\n   最开始创建的时候alloc 和len是一样大的，没有分配多余空间）\n\n   `memcpy(s, init, initlen);` 函数将init的前initlen个字符拷贝给s。\n\n   memcpy源码为：\n\n   ```\n   /* Public domain.  */\n   #include <stddef.h>\n   \n   void *\n   memcpy (void *dest, const void *src, size_t len)\n   {\n     char *d = dest;\n     const char *s = src;\n     while (len--)\n       *d++ = *s++;\n     return dest;\n   }\n   ```\n\n   整个过程中的三个指针sh,s,fp对应关系如下图\n\n   ![](https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/sds.png)\n\n\n\n## 销毁\n\n销毁使用sdsfree来实现\n\n源码为：\n\n```c\n/* Free an sds string. No operation is performed if 's' is NULL. */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    s_free((char*)s-sdsHdrSize(s[-1]));\n}\n```\n\ns[-1],就是指针s向后移动移位，也就是flag的位置。将s移动到sh的位置，释放sh指针也就释放了整个sds内存。\n\n疑惑：sh指针在sdsnewlen函数中是个局部变量，在sdsnewlen函数中是自动释放的，这里并没有传递sh指针为什么也可以释放对应的空间？\n\n自己想了下：malloc 函数传递的参数是需要分配的内存大小(len)，返回的是指针也就是地址。free()函数只用将malloc函数返回的指针(地址)作为参数传入，就可以释放之前该地址分配到的内存空间。而地址只是首地址，总共的偏移量（大小），应该是由操作系统在内存分配的时候就记录了的。\n\n博客中记录：申请的时候实际上占用的内存要比申请的大。因为超出的空间是用来记录对这块内存的管理信息。额外的空间用来记录管理信息——分配块的长度，指向下一个分配块的指针等等。果然malloc的时候用来一个struct来记录分配的信息。\n\n```c\n  struct mem_control_block { \n    int is_available;    //一般来说应该是一个可用空间的首地址，但这里英文单词却显示出空间是否可用的一个标记\n    int size;            //这是实际空间的大小 \n    };\n```\n\n<http://www.cnblogs.com/hanyonglu/archive/2011/04/28/2031271.html>\n\nfree()就是根据这个结构体的信息来释放malloc()申请的空间\n\n另外的疑惑：释放完空间后，s 指针不用把它指向null吗？  \n\n\n\n暂时就只是创建和销毁的源码把，看了两天，阅读源码真的是酣畅淋漓，收获良多。学到了很多奇妙的C技巧，还对操作系统的知识有了更具象的理解。\n\n## 其他\n\n阅读sdsfromlonglong部分的源码：\n\nsdsfromlonglong 函数用于将一个long long 类型的整形数字转换为字符数组。\n\n```c\n/* Create an sds string from a long long value. It is much faster than:\n *\n * sdscatprintf(sdsempty(),\"%lld\\n\", value);\n */\nsds sdsfromlonglong(long long value) {\n    char buf[SDS_LLSTR_SIZE];  // 给buf数组分配最小的空间，21的长度\n    int len = sdsll2str(buf,value); //将long long 转为字符数组存储在buf中，并返回字符串的长度\n\n    return sdsnewlen(buf,len);\n}\n```\n\n可以看到主要的转换操作在sdsll2str这个函数中：\n\n```c\n/* Helper for sdscatlonglong() doing the actual number -> string\n * conversion. 's' must point to a string with room for at least\n * SDS_LLSTR_SIZE bytes.\n *\n * The function returns the length of the null-terminated string\n * representation stored at 's'. */\n#define SDS_LLSTR_SIZE 21\nint sdsll2str(char *s, long long value) {\n    char *p, aux;\n    unsigned long long v; \n    size_t l;\n\n    /* Generate the string representation, this method produces\n     * an reversed string. */\n    v = (value < 0) ? -value : value;  //判断是否为负数\n    p = s;\n    do {\n        *p++ = '0'+(v%10); // 除以10取余数\n        v /= 10;     //去除个位\n    } while(v);\n    if (value < 0) *p++ = '-';\n\n    /* Compute length and add null term. */\n    l = p-s;   // 计算出字符串的长度 不含终止符\n    *p = '\\0'; // 首地址填终止符。\n\n    /* Reverse the string. */\n    p--;\n    while(s < p) {\n        aux = *s;\n        *s = *p;\n        *p = aux;\n        s++;\n        p--;\n    }\n    return l;\n}\n```\n\n```c\n    do {\n        *p++ = '0'+(v%10); // 除以10取余数\n        v /= 10;     //去除个位\n    } while(v);\n```\n\n假设v是352，变成字符串是将每一个对应的10进制上面的3,5,2这三个个位、十位、百位的数字给单独变成字符。\n\n`*p++ = '0'+(v%10); ` p 指针是字符数组buf的首地址，而将整型变成字符型的操作就是与字符'0' 相加，这样就可以对应的数字变成字符类型。同时p相应的加1来指向下一个byte用来存储下一个被转换的char。\n\nchar类型存储的是对应字符的ascii值，ASCII表为：<https://baike.baidu.com/item/ASCII/309296> ，所以字符的运算实际上是对应的ASCII的值的运算。\nv%10是除以10取余数，352%10 =2； 35%10=5，所以也就是取得v值的10进制上面的个位数。\n所以在while循环里面每次对v除以10并取余，就可以得到对应long long 型的字符串。\n但是因为每次得到的字符都是最后面的个位数，所以352，所输出的字符串数组为：‘2’， ‘3’， ‘5’ 是一个倒序的，因此还需要再反转一次。\n\n```c\n/* Reverse the string. */ \np--;\nwhile(s < p) {\n    aux = *s;\n    *s = *p;\n    *p = aux;\n    s++;\n    p--;\n}\n```\n字符串反转，首尾各有一个指针，当首指针小于尾指针的时候，交换数字，并同时向中间移动\n\n## 参考资料\n\n<https://blog.csdn.net/yangbodong22011/article/details/78419966>","slug":"Redis源码阅读——SDS/2019-03-22-Redis源码阅读——SDS","published":1,"updated":"2020-03-29T01:52:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8i4kv2a002zsghdljet9r0s","content":"<h1 id=\"Redis源码阅读——SDS\"><a href=\"#Redis源码阅读——SDS\" class=\"headerlink\" title=\"Redis源码阅读——SDS\"></a>Redis源码阅读——SDS</h1><p>参考Redis设计与实现 以及网上博客阅读Redis源码。</p>\n<a id=\"more\"></a>\n<p>SDS相关知识点见读书笔记。</p>\n<h2 id=\"创建和销毁\"><a href=\"#创建和销毁\" class=\"headerlink\" title=\"创建和销毁\"></a>创建和销毁</h2><p>为了能够对sds进行相关API的测试，因此把sds模块单独提出来。阅读Redis的Makefile发现，编译sds模块需要的源文件包括<code>sds.c</code>, <code>sds.h</code> <code>zmalloc.c</code> </p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test-sds: sds.c sds.h</span><br><span class=\"line\">        $(REDIS_CC) sds.c zmalloc.c -DSDS_TEST_MAIN $(FINAL_LIBS) -o /tmp/sds_test</span><br><span class=\"line\">        /tmp/sds_test</span><br></pre></td></tr></table></figure></div>\n<p>但是实际编译后会发现会报很多函数未定义的错。原因是redis源码里面sds的内存分配、释放、重分配这些函数是封装成zmalloc,zfee这些函数的，只单纯的把zmalloc.c提取出来是远远不够的。后面发现redis的作者已经把sds给单独提出来了。包括三个源文件<code>sds.c</code>,<code>sds.h</code>,<code>sdsalloc.h</code> 因此执行如下操作即可单独把redis的sds模块提取出来。</p>\n<h3 id=\"提取sds模块\"><a href=\"#提取sds模块\" class=\"headerlink\" title=\"提取sds模块\"></a>提取sds模块</h3><ol>\n<li><p>新建redis_sds测试目录</p>\n<p>选择合适的目录下新建</p>\n<p><code>mkdir redis_sds</code></p>\n</li>\n<li><p>复制源文件至redis_sds目录下</p>\n<p>在redis源码的src目录下执行：</p>\n<p><code>cp sds.c ~/redis_sds/</code></p>\n<p><code>cp sds.h ~/redis_sds/</code></p>\n<p><code>cp sdsalloc.h ~/redis_sds/</code></p>\n</li>\n<li><p>修改sdsalloc.h </p>\n<p>复制过来的sdsalloc.h 将sds模块的内存函数封装为使用zmalloc函数。为了简化处理直接使用libc的malloc函数来进行内存管理，同时将zmalloc.h给注释掉。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include \"zmalloc.h\"</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> s_malloc malloc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> s_realloc realloc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> s_free free</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>新建主函数</p>\n<p>新建主函数sds_test.c</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"sds.c\"</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include \"sds.h\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    sds s = sdsnew(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Length:%d, Type:%d\\n\"</span>, sdslen(s), sdsReqType(sdslen(s)));</span><br><span class=\"line\"></span><br><span class=\"line\">    s = sdscat(s, <span class=\"string\">\"The length of this sentence is greater than 32 bytes\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Length:%d, Type:%d\\n\"</span>, sdslen(s), sdsReqType(sdslen(s)));</span><br><span class=\"line\"></span><br><span class=\"line\">    sdsfree(s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>直接include sds.c 即可，因为如果#include “sds.h” 的话，sdsReqType这个函数并没有在sds.h里面声明，而且因为sdsReqType的申明是：</p>\n<p><code>static inline char sdsReqType(size_t string_size) {</code>  有static限制所以不能在sds.h中先声明，所以为了简单就直接#include 了sds.c了</p>\n</li>\n<li><p>编译  </p>\n<p>为了方便重复编译，所以写了个简单的Makefile。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test : sds_test.c sds.h sds.c sdsalloc.h</span><br><span class=\"line\">        gcc -o sdstest sds_test.c</span><br></pre></td></tr></table></figure></div>\n<p>只需要编译sds_test.c 即可。因为sds_test.c 里面是直接#include sds.c 了所以再</p>\n<p><code>gcc -o sdstest sds_test.c sds.c</code> 会将sds.c 里面的函数重复编译两次，造成Multiple definition 问题。</p>\n<p>之后只需要执行make命令就可以生成可执行文件sdstest。</p>\n<p>执行后输出为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sdstest </span><br><span class=\"line\">Length:12, Type:0</span><br><span class=\"line\">Length:64, Type:1</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"sds的创建\"><a href=\"#sds的创建\" class=\"headerlink\" title=\"sds的创建\"></a>sds的创建</h3><p>通过<code>sdsnew</code> 来创建了一个sds。sdsnew源码为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Create a new sds string starting from a null terminated C string. */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用？条件判断符来简化if语句对NULL的判断，直接使用strlen来返回字符指针的长度。</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>需要注意的是字符数组和字符指针是有区别的：字符指针的数据是存放在进程的虚拟地址空间的程序代码和数据段，是只读的不能修改。字符数组存放的字符串数据是存放在用户栈的，是可以更改的。且字符指针的数据没有”\\0”这个结束符。</p>\n<p>参考博客讲的很好：<a href=\"https://blog.csdn.net/on_1y/article/details/13030439\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/on_1y/article/details/13030439</a></p>\n<p><code>sdsnew</code> 通过把字符串长度和字符串传递给<code>sdsnewlen</code>，来完成创建。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Create a new sds string with the content specified by the 'init' pointer</span></span><br><span class=\"line\"><span class=\"comment\"> * and 'initlen'.</span></span><br><span class=\"line\"><span class=\"comment\"> * If NULL is used for 'init' the string is initialized with zero bytes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The string is always null-termined (all the sds strings are, always) so</span></span><br><span class=\"line\"><span class=\"comment\"> * even if you create an sds string with:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * mystring = n(\"abc\",3);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * You can print the string with printf() as there is an implicit \\0 at the</span></span><br><span class=\"line\"><span class=\"comment\"> * end of the string. However the string is binary safe and can contain</span></span><br><span class=\"line\"><span class=\"comment\"> * \\0 characters in the middle, as the length is stored in the sds header. */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *sh;</span><br><span class=\"line\">    sds s;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> type = sdsReqType(initlen);  <span class=\"comment\">//返回字符串对应的type</span></span><br><span class=\"line\">    <span class=\"comment\">/* Empty strings are usually created in order to append. Use type 8</span></span><br><span class=\"line\"><span class=\"comment\">     * since type 5 is not good at this. */</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    空字符串使用sdshdr8来存储，而不是sdshdr5,（虽然长度小于32），因为sdshdr5不适合扩容。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == SDS_TYPE_5 &amp;&amp; initlen == <span class=\"number\">0</span>) type = SDS_TYPE_8;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hdrlen = sdsHdrSize(type); <span class=\"comment\">// 返回对应类型的sdsheader长度。</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *fp; <span class=\"comment\">/* flags pointer. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sh = s_malloc(hdrlen+initlen+<span class=\"number\">1</span>); <span class=\"comment\">// 申请头部+字符串+NULL的大小。(单位为byte)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!init)</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(sh, <span class=\"number\">0</span>, hdrlen+initlen+<span class=\"number\">1</span>); <span class=\"comment\">// 将sh后面对应大小的字节全部置为0；</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    s = (<span class=\"keyword\">char</span>*)sh+hdrlen; <span class=\"comment\">//s指针指向字符串的首字节。</span></span><br><span class=\"line\">    fp = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)s)<span class=\"number\">-1</span>; <span class=\"comment\">// fp指针指向flag</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(type) &#123;  <span class=\"comment\">// 初始化sdshdr</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_5: &#123;</span><br><span class=\"line\">            *fp = type | (initlen &lt;&lt; SDS_TYPE_BITS);<span class=\"comment\">// 设置flag这个字节的具体值</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_8: &#123;</span><br><span class=\"line\">            SDS_HDR_VAR(<span class=\"number\">8</span>,s); <span class=\"comment\">// 获取header指针sh</span></span><br><span class=\"line\">            sh-&gt;len = initlen; <span class=\"comment\">//header中len的初始</span></span><br><span class=\"line\">            sh-&gt;alloc = initlen; <span class=\"comment\">//header 中alloc的初试</span></span><br><span class=\"line\">            *fp = type;  <span class=\"comment\">//flag 的初始。</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_16: &#123;</span><br><span class=\"line\">            SDS_HDR_VAR(<span class=\"number\">16</span>,s);</span><br><span class=\"line\">            sh-&gt;len = initlen;</span><br><span class=\"line\">            sh-&gt;alloc = initlen;</span><br><span class=\"line\">            *fp = type; </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_32: &#123;</span><br><span class=\"line\">            SDS_HDR_VAR(<span class=\"number\">32</span>,s);</span><br><span class=\"line\">            sh-&gt;len = initlen;</span><br><span class=\"line\">            sh-&gt;alloc = initlen;</span><br><span class=\"line\">            *fp = type;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_64: &#123;</span><br><span class=\"line\">            SDS_HDR_VAR(<span class=\"number\">64</span>,s);</span><br><span class=\"line\">            sh-&gt;len = initlen;</span><br><span class=\"line\">            sh-&gt;alloc = initlen;</span><br><span class=\"line\">            *fp = type;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(s, init, initlen); <span class=\"comment\">// 将字符串拷贝到s(也就是buf数组)</span></span><br><span class=\"line\">    s[initlen] = <span class=\"string\">'\\0'</span>; <span class=\"comment\">//在字符串后面添加终止符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>char type = sdsReqType(initlen);</code> 获取sds类型，源码分析在读书笔记里面有记录。源码为</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">sdsReqType</span><span class=\"params\">(<span class=\"keyword\">size_t</span> string_size)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string_size &lt; <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>) <span class=\"comment\">// string_size &lt; 2^5</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SDS_TYPE_5;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string_size &lt; <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>)  <span class=\"comment\">//string_size &lt; 2^8</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SDS_TYPE_8;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string_size &lt; <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">16</span>)\t<span class=\"comment\">//string_size &lt; 2^16</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SDS_TYPE_16;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> (LONG_MAX == LLONG_MAX)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string_size &lt; <span class=\"number\">1l</span>l&lt;&lt;<span class=\"number\">32</span>)  <span class=\"comment\">//string_size &lt; 2^32</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SDS_TYPE_32;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SDS_TYPE_64; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>采用左移来计算对应多少位的范围，而不是用2^5 这样的乘法。<strong>直接移位比使用幂来计算快很多</strong>。</p>\n<p><code>1&lt;&lt;5</code>   计算出来就是2^5 次方。1是int型，4byte32位。最低8bit位的二进制为：00000001 左移5位后变成了：00100000 对应的十进制既是32。</p>\n<p>计算n个bit位的最大值：(1&lt;&lt;n) -1</p>\n<p>但是需要注意位数不够的情况。因为1是int型，只有32个bit。所以在左移32个bit时，需要使用long long int型。用1ll来表示，此时1ll为64个bit。</p>\n<p>还得考虑机器是否为64位机器，在32位机器上LONG_MAX = 2147483647L，64位机器上LONG_MAX = 9223372036854775807L 。不论32位机器还是64位机器上 LLONG_MAX 都是9223372036854775807L 。所以当LONG_MAX == LLONG_MAX 说明字长为64bit。加上条件编译，说明在32位机器上不使用sdshdr32而直接跳到了sdshdr64，仅仅在64位机器上使用sdshdr32。原因是什么？还没想通</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">sdsHdrSize</span><span class=\"params\">(<span class=\"keyword\">char</span> type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(type&amp;SDS_TYPE_MASK) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_5:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr5);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_8:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr8);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_16:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr16);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_32:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr32);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_64:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr64);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>因为struct里面的buf数组是柔性数组，计算结构体的大小的时候不会计算在内。</p>\n<p><code>memset(sh, 0, hdrlen+initlen+1);</code>  memset函数会将sh中当前位置后面的<code>hdrlen+initlen+1</code>个字节全部置于0。 注意sh指向的是<code>hdrlen+initlen+1</code> 个字节的首个字节。（sh指针存储的地址就是首个字节的地址。） </p>\n<p>memset源码为：<a href=\"https://github.com/gcc-mirror/gcc/blob/master/libgcc/memset.c\" target=\"_blank\" rel=\"noopener\">https://github.com/gcc-mirror/gcc/blob/master/libgcc/memset.c</a></p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Public domain.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> *</span><br><span class=\"line\"><span class=\"built_in\">memset</span> (<span class=\"keyword\">void</span> *dest, <span class=\"keyword\">int</span> val, <span class=\"keyword\">size_t</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *ptr = dest; <span class=\"comment\">// 用char来限定每次指针+1只移动一个字节。</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (len-- &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    *ptr++ = val;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dest;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>假设<code>hdrlen+initlen+1</code> 为8 ，经过memset后，从sh首字节开始共有8个字节都被置为0。</p>\n<p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/memset.png\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/memset.png\" class=\"lazyload\"></a></p>\n<p>指针的类型时用来确定指针需要从首地址寻址（偏移）多少个字节。比如int * 指针说明指针存储的地址朝后面偏移3个字节才是这个int类型的所有数据。即指针存储的地址时起点，而终点是由类型来确定的。此外，类型也是指针加减的步长，比如char类型的步长就是1byte，而uint_16类型的指针步长就是2byte。</p>\n<p>随后用switch语句对不同类型的sdshdr设置初始值。</p>\n<p>首先是sdshdr5</p>\n<p> <code>*fp = type | (initlen &lt;&lt; SDS_TYPE_BITS)</code> 使用移位和或操作的方式来对8个bit位赋值。(不得不感慨这些操作真的是太巧妙了)</p>\n<p>假设initlen为3。则initlen的二进制为0000 0011（应该是8byte（64位机器）或者4byte（32位机器），为了简单用1byte的二进制表示）而SDS_TYPE_BITS 为3。所以先将initlen 左移3个bit 变成0000 0001 1000(共有8byte或者4byte)。再与type进行或运算。type为0000 0000 进行或运算后，得到的内容是8bit的，因为type是char类型，即0001 1000 。</p>\n<p>其他sdshdr类型的设置都差不多，详解下sdshdr8.</p>\n<p><code>SDS_HDR_VAR(8,s)</code>  <code>SDS_HDR_VAR</code> 是个宏定义的函数</p>\n<p><code>#define SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));</code></p>\n<p>采用宏定义函数的好处是</p>\n<ol>\n<li>能够减少额外的开销 因为如果写成普通函数的话，函数的调用会在用户栈开辟空间，形参压栈，返回时还需要释放栈，可想而知的开销。使用宏定义函数则在代码规模和速度方面都比函数更胜一筹。宏定义的本质就是替换，所以在使用宏定义函数的地方，执行的时候相当于是在直接执行<code>struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)))</code> 这句代码</li>\n<li>函数的参数必须被声明为一种特定的类型，所以它只能在类型合适的表达式上使用。而宏定义则可以用于整形、长整形、单浮点型、双浮点型以及其他任何可以用“&gt;”操作符比较值大小的类型，也就是说，宏是与类型无关的。（有点C++模版类的感觉）</li>\n</ol>\n<p>宏定义函数中的## 是（token-pasting）<strong>符号连接操作符</strong> 直接将形参T链接到sdshdr上面。也就是sdshdrT。</p>\n<p>所以这句代码也就很简单了，将字符串指针s向后移动header的大小，也就得到了header的指针。（不过有个疑问是为什么还要重新获取headr的地址，最开始不就是指向了header吗？，难道memset是直接对sh进行操作的？测试过了，memset不会修改sh的地址，所以应该是为了再次确保sh一定指向header）</p>\n<p>解释一下：SDS_HDR_VAR 的作用是将sh的类型修改为结构体指针，因为之前sh 一直都是空指针，(虽然指针的指向地址是headr，但是没有限定它类型)不然后面没法用sh-&gt;len, sh-&gt;alloc 来访问对应的结构体成员。</p>\n<p>最开始创建的时候alloc 和len是一样大的，没有分配多余空间）</p>\n<p><code>memcpy(s, init, initlen);</code> 函数将init的前initlen个字符拷贝给s。</p>\n<p>memcpy源码为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">Code</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Public domain.  */</span><br><span class=\"line\">#include &lt;stddef.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void *</span><br><span class=\"line\">memcpy (void *dest, const void *src, size_t len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char *d = dest;</span><br><span class=\"line\">  const char *s = src;</span><br><span class=\"line\">  while (len--)</span><br><span class=\"line\">    *d++ = *s++;</span><br><span class=\"line\">  return dest;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>整个过程中的三个指针sh,s,fp对应关系如下图</p>\n<p><a href=\"https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/sds.png\" data-fancybox=\"group\" data-caption=\"\" class=\"fancybox\"><img alt=\"\" title=\"\" data-src=\"https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/sds.png\" class=\"lazyload\"></a></p>\n</li>\n</ol>\n<h2 id=\"销毁\"><a href=\"#销毁\" class=\"headerlink\" title=\"销毁\"></a>销毁</h2><p>销毁使用sdsfree来实现</p>\n<p>源码为：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Free an sds string. No operation is performed if 's' is NULL. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    s_free((<span class=\"keyword\">char</span>*)s-sdsHdrSize(s[<span class=\"number\">-1</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>s[-1],就是指针s向后移动移位，也就是flag的位置。将s移动到sh的位置，释放sh指针也就释放了整个sds内存。</p>\n<p>疑惑：sh指针在sdsnewlen函数中是个局部变量，在sdsnewlen函数中是自动释放的，这里并没有传递sh指针为什么也可以释放对应的空间？</p>\n<p>自己想了下：malloc 函数传递的参数是需要分配的内存大小(len)，返回的是指针也就是地址。free()函数只用将malloc函数返回的指针(地址)作为参数传入，就可以释放之前该地址分配到的内存空间。而地址只是首地址，总共的偏移量（大小），应该是由操作系统在内存分配的时候就记录了的。</p>\n<p>博客中记录：申请的时候实际上占用的内存要比申请的大。因为超出的空间是用来记录对这块内存的管理信息。额外的空间用来记录管理信息——分配块的长度，指向下一个分配块的指针等等。果然malloc的时候用来一个struct来记录分配的信息。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mem_control_block</span> &#123;</span> </span><br><span class=\"line\">  <span class=\"keyword\">int</span> is_available;    <span class=\"comment\">//一般来说应该是一个可用空间的首地址，但这里英文单词却显示出空间是否可用的一个标记</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;            <span class=\"comment\">//这是实际空间的大小 </span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure></div>\n<p><a href=\"http://www.cnblogs.com/hanyonglu/archive/2011/04/28/2031271.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hanyonglu/archive/2011/04/28/2031271.html</a></p>\n<p>free()就是根据这个结构体的信息来释放malloc()申请的空间</p>\n<p>另外的疑惑：释放完空间后，s 指针不用把它指向null吗？  </p>\n<p>暂时就只是创建和销毁的源码把，看了两天，阅读源码真的是酣畅淋漓，收获良多。学到了很多奇妙的C技巧，还对操作系统的知识有了更具象的理解。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>阅读sdsfromlonglong部分的源码：</p>\n<p>sdsfromlonglong 函数用于将一个long long 类型的整形数字转换为字符数组。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Create an sds string from a long long value. It is much faster than:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * sdscatprintf(sdsempty(),\"%lld\\n\", value);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsfromlonglong</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[SDS_LLSTR_SIZE];  <span class=\"comment\">// 给buf数组分配最小的空间，21的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = sdsll2str(buf,value); <span class=\"comment\">//将long long 转为字符数组存储在buf中，并返回字符串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(buf,len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>可以看到主要的转换操作在sdsll2str这个函数中：</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Helper for sdscatlonglong() doing the actual number -&gt; string</span></span><br><span class=\"line\"><span class=\"comment\"> * conversion. 's' must point to a string with room for at least</span></span><br><span class=\"line\"><span class=\"comment\"> * SDS_LLSTR_SIZE bytes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The function returns the length of the null-terminated string</span></span><br><span class=\"line\"><span class=\"comment\"> * representation stored at 's'. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_LLSTR_SIZE 21</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sdsll2str</span><span class=\"params\">(<span class=\"keyword\">char</span> *s, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p, aux;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> v; </span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> l;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Generate the string representation, this method produces</span></span><br><span class=\"line\"><span class=\"comment\">     * an reversed string. */</span></span><br><span class=\"line\">    v = (value &lt; <span class=\"number\">0</span>) ? -value : value;  <span class=\"comment\">//判断是否为负数</span></span><br><span class=\"line\">    p = s;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        *p++ = <span class=\"string\">'0'</span>+(v%<span class=\"number\">10</span>); <span class=\"comment\">// 除以10取余数</span></span><br><span class=\"line\">        v /= <span class=\"number\">10</span>;     <span class=\"comment\">//去除个位</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) *p++ = <span class=\"string\">'-'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Compute length and add null term. */</span></span><br><span class=\"line\">    l = p-s;   <span class=\"comment\">// 计算出字符串的长度 不含终止符</span></span><br><span class=\"line\">    *p = <span class=\"string\">'\\0'</span>; <span class=\"comment\">// 首地址填终止符。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Reverse the string. */</span></span><br><span class=\"line\">    p--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s &lt; p) &#123;</span><br><span class=\"line\">        aux = *s;</span><br><span class=\"line\">        *s = *p;</span><br><span class=\"line\">        *p = aux;</span><br><span class=\"line\">        s++;</span><br><span class=\"line\">        p--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    *p++ = <span class=\"string\">'0'</span>+(v%<span class=\"number\">10</span>); <span class=\"comment\">// 除以10取余数</span></span><br><span class=\"line\">    v /= <span class=\"number\">10</span>;     <span class=\"comment\">//去除个位</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span>(v);</span><br></pre></td></tr></table></figure></div>\n<p>假设v是352，变成字符串是将每一个对应的10进制上面的3,5,2这三个个位、十位、百位的数字给单独变成字符。</p>\n<p><code>*p++ = &#39;0&#39;+(v%10);</code> p 指针是字符数组buf的首地址，而将整型变成字符型的操作就是与字符’0’ 相加，这样就可以对应的数字变成字符类型。同时p相应的加1来指向下一个byte用来存储下一个被转换的char。</p>\n<p>char类型存储的是对应字符的ascii值，ASCII表为：<a href=\"https://baike.baidu.com/item/ASCII/309296\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/ASCII/309296</a> ，所以字符的运算实际上是对应的ASCII的值的运算。<br>v%10是除以10取余数，352%10 =2； 35%10=5，所以也就是取得v值的10进制上面的个位数。<br>所以在while循环里面每次对v除以10并取余，就可以得到对应long long 型的字符串。<br>但是因为每次得到的字符都是最后面的个位数，所以352，所输出的字符串数组为：‘2’， ‘3’， ‘5’ 是一个倒序的，因此还需要再反转一次。</p>\n<div class=\"code-area-wrap\"><div class=\"highlight-tools\"><i class=\"fa fa-angle-down code-expand\" aria-hidden=\"true\"></i><div class=\"code_lang\">c</div><div class=\"copy-notice\"></div><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Reverse the string. */</span> </span><br><span class=\"line\">p--;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(s &lt; p) &#123;</span><br><span class=\"line\">    aux = *s;</span><br><span class=\"line\">    *s = *p;</span><br><span class=\"line\">    *p = aux;</span><br><span class=\"line\">    s++;</span><br><span class=\"line\">    p--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>字符串反转，首尾各有一个指针，当首指针小于尾指针的时候，交换数字，并同时向中间移动</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/yangbodong22011/article/details/78419966\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yangbodong22011/article/details/78419966</a></p>\n","site":{"data":{}},"cover":"https://images.pexels.com/photos/390051/surfer-wave-sunset-the-indian-ocean-390051.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500","length":9911,"excerpt":"<h1 id=\"Redis源码阅读——SDS\"><a href=\"#Redis源码阅读——SDS\" class=\"headerlink\" title=\"Redis源码阅读——SDS\"></a>Redis源码阅读——SDS</h1><p>参考Redis设计与实现 以及网上博客阅读Redis源码。</p>","more":"<p>SDS相关知识点见读书笔记。</p>\n<h2 id=\"创建和销毁\"><a href=\"#创建和销毁\" class=\"headerlink\" title=\"创建和销毁\"></a>创建和销毁</h2><p>为了能够对sds进行相关API的测试，因此把sds模块单独提出来。阅读Redis的Makefile发现，编译sds模块需要的源文件包括<code>sds.c</code>, <code>sds.h</code> <code>zmalloc.c</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test-sds: sds.c sds.h</span><br><span class=\"line\">        $(REDIS_CC) sds.c zmalloc.c -DSDS_TEST_MAIN $(FINAL_LIBS) -o /tmp/sds_test</span><br><span class=\"line\">        /tmp/sds_test</span><br></pre></td></tr></table></figure>\n<p>但是实际编译后会发现会报很多函数未定义的错。原因是redis源码里面sds的内存分配、释放、重分配这些函数是封装成zmalloc,zfee这些函数的，只单纯的把zmalloc.c提取出来是远远不够的。后面发现redis的作者已经把sds给单独提出来了。包括三个源文件<code>sds.c</code>,<code>sds.h</code>,<code>sdsalloc.h</code> 因此执行如下操作即可单独把redis的sds模块提取出来。</p>\n<h3 id=\"提取sds模块\"><a href=\"#提取sds模块\" class=\"headerlink\" title=\"提取sds模块\"></a>提取sds模块</h3><ol>\n<li><p>新建redis_sds测试目录</p>\n<p>选择合适的目录下新建</p>\n<p><code>mkdir redis_sds</code></p>\n</li>\n<li><p>复制源文件至redis_sds目录下</p>\n<p>在redis源码的src目录下执行：</p>\n<p><code>cp sds.c ~/redis_sds/</code></p>\n<p><code>cp sds.h ~/redis_sds/</code></p>\n<p><code>cp sdsalloc.h ~/redis_sds/</code></p>\n</li>\n<li><p>修改sdsalloc.h </p>\n<p>复制过来的sdsalloc.h 将sds模块的内存函数封装为使用zmalloc函数。为了简化处理直接使用libc的malloc函数来进行内存管理，同时将zmalloc.h给注释掉。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include \"zmalloc.h\"</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> s_malloc malloc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> s_realloc realloc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> s_free free</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建主函数</p>\n<p>新建主函数sds_test.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"sds.c\"</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include \"sds.h\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    sds s = sdsnew(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Length:%d, Type:%d\\n\"</span>, sdslen(s), sdsReqType(sdslen(s)));</span><br><span class=\"line\"></span><br><span class=\"line\">    s = sdscat(s, <span class=\"string\">\"The length of this sentence is greater than 32 bytes\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Length:%d, Type:%d\\n\"</span>, sdslen(s), sdsReqType(sdslen(s)));</span><br><span class=\"line\"></span><br><span class=\"line\">    sdsfree(s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接include sds.c 即可，因为如果#include “sds.h” 的话，sdsReqType这个函数并没有在sds.h里面声明，而且因为sdsReqType的申明是：</p>\n<p><code>static inline char sdsReqType(size_t string_size) {</code>  有static限制所以不能在sds.h中先声明，所以为了简单就直接#include 了sds.c了</p>\n</li>\n<li><p>编译  </p>\n<p>为了方便重复编译，所以写了个简单的Makefile。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test : sds_test.c sds.h sds.c sdsalloc.h</span><br><span class=\"line\">        gcc -o sdstest sds_test.c</span><br></pre></td></tr></table></figure>\n<p>只需要编译sds_test.c 即可。因为sds_test.c 里面是直接#include sds.c 了所以再</p>\n<p><code>gcc -o sdstest sds_test.c sds.c</code> 会将sds.c 里面的函数重复编译两次，造成Multiple definition 问题。</p>\n<p>之后只需要执行make命令就可以生成可执行文件sdstest。</p>\n<p>执行后输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sdstest </span><br><span class=\"line\">Length:12, Type:0</span><br><span class=\"line\">Length:64, Type:1</span><br></pre></td></tr></table></figure>\n<h3 id=\"sds的创建\"><a href=\"#sds的创建\" class=\"headerlink\" title=\"sds的创建\"></a>sds的创建</h3><p>通过<code>sdsnew</code> 来创建了一个sds。sdsnew源码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Create a new sds string starting from a null terminated C string. */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用？条件判断符来简化if语句对NULL的判断，直接使用strlen来返回字符指针的长度。</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是字符数组和字符指针是有区别的：字符指针的数据是存放在进程的虚拟地址空间的程序代码和数据段，是只读的不能修改。字符数组存放的字符串数据是存放在用户栈的，是可以更改的。且字符指针的数据没有”\\0”这个结束符。</p>\n<p>参考博客讲的很好：<a href=\"https://blog.csdn.net/on_1y/article/details/13030439\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/on_1y/article/details/13030439</a></p>\n<p><code>sdsnew</code> 通过把字符串长度和字符串传递给<code>sdsnewlen</code>，来完成创建。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Create a new sds string with the content specified by the 'init' pointer</span></span><br><span class=\"line\"><span class=\"comment\"> * and 'initlen'.</span></span><br><span class=\"line\"><span class=\"comment\"> * If NULL is used for 'init' the string is initialized with zero bytes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The string is always null-termined (all the sds strings are, always) so</span></span><br><span class=\"line\"><span class=\"comment\"> * even if you create an sds string with:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * mystring = n(\"abc\",3);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * You can print the string with printf() as there is an implicit \\0 at the</span></span><br><span class=\"line\"><span class=\"comment\"> * end of the string. However the string is binary safe and can contain</span></span><br><span class=\"line\"><span class=\"comment\"> * \\0 characters in the middle, as the length is stored in the sds header. */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *sh;</span><br><span class=\"line\">    sds s;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> type = sdsReqType(initlen);  <span class=\"comment\">//返回字符串对应的type</span></span><br><span class=\"line\">    <span class=\"comment\">/* Empty strings are usually created in order to append. Use type 8</span></span><br><span class=\"line\"><span class=\"comment\">     * since type 5 is not good at this. */</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    空字符串使用sdshdr8来存储，而不是sdshdr5,（虽然长度小于32），因为sdshdr5不适合扩容。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == SDS_TYPE_5 &amp;&amp; initlen == <span class=\"number\">0</span>) type = SDS_TYPE_8;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hdrlen = sdsHdrSize(type); <span class=\"comment\">// 返回对应类型的sdsheader长度。</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *fp; <span class=\"comment\">/* flags pointer. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sh = s_malloc(hdrlen+initlen+<span class=\"number\">1</span>); <span class=\"comment\">// 申请头部+字符串+NULL的大小。(单位为byte)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!init)</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(sh, <span class=\"number\">0</span>, hdrlen+initlen+<span class=\"number\">1</span>); <span class=\"comment\">// 将sh后面对应大小的字节全部置为0；</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    s = (<span class=\"keyword\">char</span>*)sh+hdrlen; <span class=\"comment\">//s指针指向字符串的首字节。</span></span><br><span class=\"line\">    fp = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)s)<span class=\"number\">-1</span>; <span class=\"comment\">// fp指针指向flag</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(type) &#123;  <span class=\"comment\">// 初始化sdshdr</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_5: &#123;</span><br><span class=\"line\">            *fp = type | (initlen &lt;&lt; SDS_TYPE_BITS);<span class=\"comment\">// 设置flag这个字节的具体值</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_8: &#123;</span><br><span class=\"line\">            SDS_HDR_VAR(<span class=\"number\">8</span>,s); <span class=\"comment\">// 获取header指针sh</span></span><br><span class=\"line\">            sh-&gt;len = initlen; <span class=\"comment\">//header中len的初始</span></span><br><span class=\"line\">            sh-&gt;alloc = initlen; <span class=\"comment\">//header 中alloc的初试</span></span><br><span class=\"line\">            *fp = type;  <span class=\"comment\">//flag 的初始。</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_16: &#123;</span><br><span class=\"line\">            SDS_HDR_VAR(<span class=\"number\">16</span>,s);</span><br><span class=\"line\">            sh-&gt;len = initlen;</span><br><span class=\"line\">            sh-&gt;alloc = initlen;</span><br><span class=\"line\">            *fp = type; </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_32: &#123;</span><br><span class=\"line\">            SDS_HDR_VAR(<span class=\"number\">32</span>,s);</span><br><span class=\"line\">            sh-&gt;len = initlen;</span><br><span class=\"line\">            sh-&gt;alloc = initlen;</span><br><span class=\"line\">            *fp = type;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_64: &#123;</span><br><span class=\"line\">            SDS_HDR_VAR(<span class=\"number\">64</span>,s);</span><br><span class=\"line\">            sh-&gt;len = initlen;</span><br><span class=\"line\">            sh-&gt;alloc = initlen;</span><br><span class=\"line\">            *fp = type;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(s, init, initlen); <span class=\"comment\">// 将字符串拷贝到s(也就是buf数组)</span></span><br><span class=\"line\">    s[initlen] = <span class=\"string\">'\\0'</span>; <span class=\"comment\">//在字符串后面添加终止符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>char type = sdsReqType(initlen);</code> 获取sds类型，源码分析在读书笔记里面有记录。源码为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">sdsReqType</span><span class=\"params\">(<span class=\"keyword\">size_t</span> string_size)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string_size &lt; <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>) <span class=\"comment\">// string_size &lt; 2^5</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SDS_TYPE_5;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string_size &lt; <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>)  <span class=\"comment\">//string_size &lt; 2^8</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SDS_TYPE_8;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string_size &lt; <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">16</span>)\t<span class=\"comment\">//string_size &lt; 2^16</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SDS_TYPE_16;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> (LONG_MAX == LLONG_MAX)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (string_size &lt; <span class=\"number\">1l</span>l&lt;&lt;<span class=\"number\">32</span>)  <span class=\"comment\">//string_size &lt; 2^32</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SDS_TYPE_32;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SDS_TYPE_64; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>采用左移来计算对应多少位的范围，而不是用2^5 这样的乘法。<strong>直接移位比使用幂来计算快很多</strong>。</p>\n<p><code>1&lt;&lt;5</code>   计算出来就是2^5 次方。1是int型，4byte32位。最低8bit位的二进制为：00000001 左移5位后变成了：00100000 对应的十进制既是32。</p>\n<p>计算n个bit位的最大值：(1&lt;&lt;n) -1</p>\n<p>但是需要注意位数不够的情况。因为1是int型，只有32个bit。所以在左移32个bit时，需要使用long long int型。用1ll来表示，此时1ll为64个bit。</p>\n<p>还得考虑机器是否为64位机器，在32位机器上LONG_MAX = 2147483647L，64位机器上LONG_MAX = 9223372036854775807L 。不论32位机器还是64位机器上 LLONG_MAX 都是9223372036854775807L 。所以当LONG_MAX == LLONG_MAX 说明字长为64bit。加上条件编译，说明在32位机器上不使用sdshdr32而直接跳到了sdshdr64，仅仅在64位机器上使用sdshdr32。原因是什么？还没想通</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">sdsHdrSize</span><span class=\"params\">(<span class=\"keyword\">char</span> type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(type&amp;SDS_TYPE_MASK) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_5:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr5);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_8:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr8);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_16:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr16);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_32:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr32);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SDS_TYPE_64:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(struct sdshdr64);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为struct里面的buf数组是柔性数组，计算结构体的大小的时候不会计算在内。</p>\n<p><code>memset(sh, 0, hdrlen+initlen+1);</code>  memset函数会将sh中当前位置后面的<code>hdrlen+initlen+1</code>个字节全部置于0。 注意sh指向的是<code>hdrlen+initlen+1</code> 个字节的首个字节。（sh指针存储的地址就是首个字节的地址。） </p>\n<p>memset源码为：<a href=\"https://github.com/gcc-mirror/gcc/blob/master/libgcc/memset.c\" target=\"_blank\" rel=\"noopener\">https://github.com/gcc-mirror/gcc/blob/master/libgcc/memset.c</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Public domain.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> *</span><br><span class=\"line\"><span class=\"built_in\">memset</span> (<span class=\"keyword\">void</span> *dest, <span class=\"keyword\">int</span> val, <span class=\"keyword\">size_t</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *ptr = dest; <span class=\"comment\">// 用char来限定每次指针+1只移动一个字节。</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (len-- &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    *ptr++ = val;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dest;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设<code>hdrlen+initlen+1</code> 为8 ，经过memset后，从sh首字节开始共有8个字节都被置为0。</p>\n<p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/memset.png\" alt=\"\"></p>\n<p>指针的类型时用来确定指针需要从首地址寻址（偏移）多少个字节。比如int * 指针说明指针存储的地址朝后面偏移3个字节才是这个int类型的所有数据。即指针存储的地址时起点，而终点是由类型来确定的。此外，类型也是指针加减的步长，比如char类型的步长就是1byte，而uint_16类型的指针步长就是2byte。</p>\n<p>随后用switch语句对不同类型的sdshdr设置初始值。</p>\n<p>首先是sdshdr5</p>\n<p> <code>*fp = type | (initlen &lt;&lt; SDS_TYPE_BITS)</code> 使用移位和或操作的方式来对8个bit位赋值。(不得不感慨这些操作真的是太巧妙了)</p>\n<p>假设initlen为3。则initlen的二进制为0000 0011（应该是8byte（64位机器）或者4byte（32位机器），为了简单用1byte的二进制表示）而SDS_TYPE_BITS 为3。所以先将initlen 左移3个bit 变成0000 0001 1000(共有8byte或者4byte)。再与type进行或运算。type为0000 0000 进行或运算后，得到的内容是8bit的，因为type是char类型，即0001 1000 。</p>\n<p>其他sdshdr类型的设置都差不多，详解下sdshdr8.</p>\n<p><code>SDS_HDR_VAR(8,s)</code>  <code>SDS_HDR_VAR</code> 是个宏定义的函数</p>\n<p><code>#define SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));</code></p>\n<p>采用宏定义函数的好处是</p>\n<ol>\n<li>能够减少额外的开销 因为如果写成普通函数的话，函数的调用会在用户栈开辟空间，形参压栈，返回时还需要释放栈，可想而知的开销。使用宏定义函数则在代码规模和速度方面都比函数更胜一筹。宏定义的本质就是替换，所以在使用宏定义函数的地方，执行的时候相当于是在直接执行<code>struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)))</code> 这句代码</li>\n<li>函数的参数必须被声明为一种特定的类型，所以它只能在类型合适的表达式上使用。而宏定义则可以用于整形、长整形、单浮点型、双浮点型以及其他任何可以用“&gt;”操作符比较值大小的类型，也就是说，宏是与类型无关的。（有点C++模版类的感觉）</li>\n</ol>\n<p>宏定义函数中的## 是（token-pasting）<strong>符号连接操作符</strong> 直接将形参T链接到sdshdr上面。也就是sdshdrT。</p>\n<p>所以这句代码也就很简单了，将字符串指针s向后移动header的大小，也就得到了header的指针。（不过有个疑问是为什么还要重新获取headr的地址，最开始不就是指向了header吗？，难道memset是直接对sh进行操作的？测试过了，memset不会修改sh的地址，所以应该是为了再次确保sh一定指向header）</p>\n<p>解释一下：SDS_HDR_VAR 的作用是将sh的类型修改为结构体指针，因为之前sh 一直都是空指针，(虽然指针的指向地址是headr，但是没有限定它类型)不然后面没法用sh-&gt;len, sh-&gt;alloc 来访问对应的结构体成员。</p>\n<p>最开始创建的时候alloc 和len是一样大的，没有分配多余空间）</p>\n<p><code>memcpy(s, init, initlen);</code> 函数将init的前initlen个字符拷贝给s。</p>\n<p>memcpy源码为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Public domain.  */</span><br><span class=\"line\">#include &lt;stddef.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void *</span><br><span class=\"line\">memcpy (void *dest, const void *src, size_t len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char *d = dest;</span><br><span class=\"line\">  const char *s = src;</span><br><span class=\"line\">  while (len--)</span><br><span class=\"line\">    *d++ = *s++;</span><br><span class=\"line\">  return dest;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整个过程中的三个指针sh,s,fp对应关系如下图</p>\n<p><img src=\"https://res.cloudinary.com/bravey/image/upload/v1553525055/blog/sds.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"销毁\"><a href=\"#销毁\" class=\"headerlink\" title=\"销毁\"></a>销毁</h2><p>销毁使用sdsfree来实现</p>\n<p>源码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Free an sds string. No operation is performed if 's' is NULL. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    s_free((<span class=\"keyword\">char</span>*)s-sdsHdrSize(s[<span class=\"number\">-1</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>s[-1],就是指针s向后移动移位，也就是flag的位置。将s移动到sh的位置，释放sh指针也就释放了整个sds内存。</p>\n<p>疑惑：sh指针在sdsnewlen函数中是个局部变量，在sdsnewlen函数中是自动释放的，这里并没有传递sh指针为什么也可以释放对应的空间？</p>\n<p>自己想了下：malloc 函数传递的参数是需要分配的内存大小(len)，返回的是指针也就是地址。free()函数只用将malloc函数返回的指针(地址)作为参数传入，就可以释放之前该地址分配到的内存空间。而地址只是首地址，总共的偏移量（大小），应该是由操作系统在内存分配的时候就记录了的。</p>\n<p>博客中记录：申请的时候实际上占用的内存要比申请的大。因为超出的空间是用来记录对这块内存的管理信息。额外的空间用来记录管理信息——分配块的长度，指向下一个分配块的指针等等。果然malloc的时候用来一个struct来记录分配的信息。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mem_control_block</span> &#123;</span> </span><br><span class=\"line\">  <span class=\"keyword\">int</span> is_available;    <span class=\"comment\">//一般来说应该是一个可用空间的首地址，但这里英文单词却显示出空间是否可用的一个标记</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;            <span class=\"comment\">//这是实际空间的大小 </span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/hanyonglu/archive/2011/04/28/2031271.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hanyonglu/archive/2011/04/28/2031271.html</a></p>\n<p>free()就是根据这个结构体的信息来释放malloc()申请的空间</p>\n<p>另外的疑惑：释放完空间后，s 指针不用把它指向null吗？  </p>\n<p>暂时就只是创建和销毁的源码把，看了两天，阅读源码真的是酣畅淋漓，收获良多。学到了很多奇妙的C技巧，还对操作系统的知识有了更具象的理解。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>阅读sdsfromlonglong部分的源码：</p>\n<p>sdsfromlonglong 函数用于将一个long long 类型的整形数字转换为字符数组。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Create an sds string from a long long value. It is much faster than:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * sdscatprintf(sdsempty(),\"%lld\\n\", value);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsfromlonglong</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[SDS_LLSTR_SIZE];  <span class=\"comment\">// 给buf数组分配最小的空间，21的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = sdsll2str(buf,value); <span class=\"comment\">//将long long 转为字符数组存储在buf中，并返回字符串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(buf,len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到主要的转换操作在sdsll2str这个函数中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Helper for sdscatlonglong() doing the actual number -&gt; string</span></span><br><span class=\"line\"><span class=\"comment\"> * conversion. 's' must point to a string with room for at least</span></span><br><span class=\"line\"><span class=\"comment\"> * SDS_LLSTR_SIZE bytes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The function returns the length of the null-terminated string</span></span><br><span class=\"line\"><span class=\"comment\"> * representation stored at 's'. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_LLSTR_SIZE 21</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sdsll2str</span><span class=\"params\">(<span class=\"keyword\">char</span> *s, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p, aux;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> v; </span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> l;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Generate the string representation, this method produces</span></span><br><span class=\"line\"><span class=\"comment\">     * an reversed string. */</span></span><br><span class=\"line\">    v = (value &lt; <span class=\"number\">0</span>) ? -value : value;  <span class=\"comment\">//判断是否为负数</span></span><br><span class=\"line\">    p = s;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        *p++ = <span class=\"string\">'0'</span>+(v%<span class=\"number\">10</span>); <span class=\"comment\">// 除以10取余数</span></span><br><span class=\"line\">        v /= <span class=\"number\">10</span>;     <span class=\"comment\">//去除个位</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) *p++ = <span class=\"string\">'-'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Compute length and add null term. */</span></span><br><span class=\"line\">    l = p-s;   <span class=\"comment\">// 计算出字符串的长度 不含终止符</span></span><br><span class=\"line\">    *p = <span class=\"string\">'\\0'</span>; <span class=\"comment\">// 首地址填终止符。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Reverse the string. */</span></span><br><span class=\"line\">    p--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s &lt; p) &#123;</span><br><span class=\"line\">        aux = *s;</span><br><span class=\"line\">        *s = *p;</span><br><span class=\"line\">        *p = aux;</span><br><span class=\"line\">        s++;</span><br><span class=\"line\">        p--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    *p++ = <span class=\"string\">'0'</span>+(v%<span class=\"number\">10</span>); <span class=\"comment\">// 除以10取余数</span></span><br><span class=\"line\">    v /= <span class=\"number\">10</span>;     <span class=\"comment\">//去除个位</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span>(v);</span><br></pre></td></tr></table></figure>\n<p>假设v是352，变成字符串是将每一个对应的10进制上面的3,5,2这三个个位、十位、百位的数字给单独变成字符。</p>\n<p><code>*p++ = &#39;0&#39;+(v%10);</code> p 指针是字符数组buf的首地址，而将整型变成字符型的操作就是与字符’0’ 相加，这样就可以对应的数字变成字符类型。同时p相应的加1来指向下一个byte用来存储下一个被转换的char。</p>\n<p>char类型存储的是对应字符的ascii值，ASCII表为：<a href=\"https://baike.baidu.com/item/ASCII/309296\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/ASCII/309296</a> ，所以字符的运算实际上是对应的ASCII的值的运算。<br>v%10是除以10取余数，352%10 =2； 35%10=5，所以也就是取得v值的10进制上面的个位数。<br>所以在while循环里面每次对v除以10并取余，就可以得到对应long long 型的字符串。<br>但是因为每次得到的字符都是最后面的个位数，所以352，所输出的字符串数组为：‘2’， ‘3’， ‘5’ 是一个倒序的，因此还需要再反转一次。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Reverse the string. */</span> </span><br><span class=\"line\">p--;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(s &lt; p) &#123;</span><br><span class=\"line\">    aux = *s;</span><br><span class=\"line\">    *s = *p;</span><br><span class=\"line\">    *p = aux;</span><br><span class=\"line\">    s++;</span><br><span class=\"line\">    p--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字符串反转，首尾各有一个指针，当首指针小于尾指针的时候，交换数字，并同时向中间移动</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/yangbodong22011/article/details/78419966\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yangbodong22011/article/details/78419966</a></p>"}],"PostAsset":[{"_id":"source/_posts/BigdataBench-deploy/runcc.png","slug":"runcc.png","post":"ck8i4ktw80008sghden6or1kb","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck8i4ktvt0001sghdylj29wb4","category_id":"ck8i4ktw30005sghdqn0xmuq6","_id":"ck8i4ktwf000esghd3uab4yos"},{"post_id":"ck8i4ktvz0003sghd1jigkjny","category_id":"ck8i4ktwb000asghduaj13rmq","_id":"ck8i4ktwl000ksghd2uc1kvef"},{"post_id":"ck8i4ktw50007sghdwuwl6f0h","category_id":"ck8i4ktw30005sghdqn0xmuq6","_id":"ck8i4ktwo000osghdyumz367h"},{"post_id":"ck8i4ktw80008sghden6or1kb","category_id":"ck8i4ktwk000jsghdf4aibcsn","_id":"ck8i4ktwu000vsghdplo9y8pk"},{"post_id":"ck8i4ktwa0009sghd3kjzl8nr","category_id":"ck8i4ktwb000asghduaj13rmq","_id":"ck8i4ktwy0011sghdrndidli3"},{"post_id":"ck8i4ktwc000csghd6wk6oyp3","category_id":"ck8i4ktwk000jsghdf4aibcsn","_id":"ck8i4ktx00014sghdci59r54s"},{"post_id":"ck8i4ktwd000dsghd39y5ylv8","category_id":"ck8i4ktwy0010sghd2wmjmt9g","_id":"ck8i4ktx20018sghd2e2tl8n5"},{"post_id":"ck8i4ktwh000hsghdfkz7dgaq","category_id":"ck8i4ktwy0010sghd2wmjmt9g","_id":"ck8i4ktx4001bsghdbswxz85j"},{"post_id":"ck8i4ktwj000isghd0rhp7kum","category_id":"ck8i4ktwy0010sghd2wmjmt9g","_id":"ck8i4ktx5001dsghdnn3zj8mi"},{"post_id":"ck8i4ktwm000msghdqd053jnp","category_id":"ck8i4ktx3001asghdhl5iymoy","_id":"ck8i4ktx9001ksghdv3m3hog7"},{"post_id":"ck8i4ktwn000nsghde5ia4wcc","category_id":"ck8i4ktwy0010sghd2wmjmt9g","_id":"ck8i4ktxc001psghdn8385e7l"},{"post_id":"ck8i4ktws000tsghdkofhgd8e","category_id":"ck8i4ktwy0010sghd2wmjmt9g","_id":"ck8i4ktxd001rsghdku3exktd"},{"post_id":"ck8i4ktwv000xsghd1bonr8ll","category_id":"ck8i4ktxc001osghdopzautb1","_id":"ck8i4ktxe001tsghd86edu5k1"},{"post_id":"ck8i4kv2a002zsghdljet9r0s","category_id":"ck8i4kv2c0030sghdokzh2qwf","_id":"ck8i4kv2e0034sghdkew8cyll"}],"PostTag":[{"post_id":"ck8i4ktvt0001sghdylj29wb4","tag_id":"ck8i4ktw40006sghdcarnhg73","_id":"ck8i4ktwr000ssghd20avr5ij"},{"post_id":"ck8i4ktvt0001sghdylj29wb4","tag_id":"ck8i4ktwb000bsghd908t9fey","_id":"ck8i4ktwu000wsghd4glgt5ei"},{"post_id":"ck8i4ktvt0001sghdylj29wb4","tag_id":"ck8i4ktwg000gsghdlk6o9d9x","_id":"ck8i4ktwx000zsghdo9euyylg"},{"post_id":"ck8i4ktvt0001sghdylj29wb4","tag_id":"ck8i4ktwl000lsghdkn9lkzox","_id":"ck8i4ktwy0012sghdj02ywseu"},{"post_id":"ck8i4ktvz0003sghd1jigkjny","tag_id":"ck8i4ktwp000qsghdj0sjsssv","_id":"ck8i4ktx6001esghd3cgo7dtj"},{"post_id":"ck8i4ktvz0003sghd1jigkjny","tag_id":"ck8i4ktww000ysghdlsjen0mv","_id":"ck8i4ktx7001gsghdcltu3kpg"},{"post_id":"ck8i4ktvz0003sghd1jigkjny","tag_id":"ck8i4ktwz0013sghd79fv6k33","_id":"ck8i4ktx8001isghddjtitqju"},{"post_id":"ck8i4ktvz0003sghd1jigkjny","tag_id":"ck8i4ktx10016sghd1f84e1ol","_id":"ck8i4ktxa001lsghd818skf3o"},{"post_id":"ck8i4ktvz0003sghd1jigkjny","tag_id":"ck8i4ktx30019sghdn0lqfa8p","_id":"ck8i4ktxb001nsghdf12r60pu"},{"post_id":"ck8i4ktw50007sghdwuwl6f0h","tag_id":"ck8i4ktwg000gsghdlk6o9d9x","_id":"ck8i4ktxf001usghd0xdcqui1"},{"post_id":"ck8i4ktw50007sghdwuwl6f0h","tag_id":"ck8i4ktwl000lsghdkn9lkzox","_id":"ck8i4ktxf001vsghd7p89dqeb"},{"post_id":"ck8i4ktw50007sghdwuwl6f0h","tag_id":"ck8i4ktxa001msghdowebxdqd","_id":"ck8i4ktxg001xsghddmq02ek0"},{"post_id":"ck8i4ktw50007sghdwuwl6f0h","tag_id":"ck8i4ktxd001qsghdgab8ank3","_id":"ck8i4ktxg001ysghddtail4jz"},{"post_id":"ck8i4ktw80008sghden6or1kb","tag_id":"ck8i4ktxe001ssghd1qa2nur9","_id":"ck8i4ktxh0020sghd9h325nk8"},{"post_id":"ck8i4ktwa0009sghd3kjzl8nr","tag_id":"ck8i4ktxf001wsghdyx4boaa9","_id":"ck8i4ktxi0022sghdp67gzyrw"},{"post_id":"ck8i4ktwa0009sghd3kjzl8nr","tag_id":"ck8i4ktwp000qsghdj0sjsssv","_id":"ck8i4ktxi0023sghdek10v5t7"},{"post_id":"ck8i4ktwc000csghd6wk6oyp3","tag_id":"ck8i4ktxh0021sghdaa17mgro","_id":"ck8i4ktxj0025sghdrojigqz1"},{"post_id":"ck8i4ktwd000dsghd39y5ylv8","tag_id":"ck8i4ktxi0024sghd3dca4md8","_id":"ck8i4ktxk0028sghd746k0f5h"},{"post_id":"ck8i4ktwd000dsghd39y5ylv8","tag_id":"ck8i4ktxj0026sghd6yvmnesr","_id":"ck8i4ktxl0029sghd95sax1oc"},{"post_id":"ck8i4ktwh000hsghdfkz7dgaq","tag_id":"ck8i4ktxi0024sghd3dca4md8","_id":"ck8i4ktxm002csghdfcx9avrh"},{"post_id":"ck8i4ktwh000hsghdfkz7dgaq","tag_id":"ck8i4ktxl002asghdtr5f8rh6","_id":"ck8i4ktxm002dsghdq7evswhn"},{"post_id":"ck8i4ktwj000isghd0rhp7kum","tag_id":"ck8i4ktxi0024sghd3dca4md8","_id":"ck8i4ktxo002gsghd0lp8r91l"},{"post_id":"ck8i4ktwj000isghd0rhp7kum","tag_id":"ck8i4ktxj0026sghd6yvmnesr","_id":"ck8i4ktxo002hsghduro2d81e"},{"post_id":"ck8i4ktwm000msghdqd053jnp","tag_id":"ck8i4ktxn002fsghd1gptrqbd","_id":"ck8i4ktxp002jsghdcr0d7mp5"},{"post_id":"ck8i4ktwn000nsghde5ia4wcc","tag_id":"ck8i4ktxi0024sghd3dca4md8","_id":"ck8i4ktxr002nsghdizqktusm"},{"post_id":"ck8i4ktwn000nsghde5ia4wcc","tag_id":"ck8i4ktxl002asghdtr5f8rh6","_id":"ck8i4ktxs002osghdsntu27kn"},{"post_id":"ck8i4ktwn000nsghde5ia4wcc","tag_id":"ck8i4ktxq002lsghdqc2ovk6w","_id":"ck8i4ktxt002qsghd1muj4vol"},{"post_id":"ck8i4ktwq000rsghdggrolvlq","tag_id":"ck8i4ktxq002msghdwukgyikg","_id":"ck8i4ktxu002ssghdl8k7h600"},{"post_id":"ck8i4ktwq000rsghdggrolvlq","tag_id":"ck8i4ktxt002psghdtvcewp9v","_id":"ck8i4ktxu002tsghd34zac9p3"},{"post_id":"ck8i4ktws000tsghdkofhgd8e","tag_id":"ck8i4ktxt002rsghdywjodcvf","_id":"ck8i4ktxw002wsghd0pdh8pl1"},{"post_id":"ck8i4ktws000tsghdkofhgd8e","tag_id":"ck8i4ktxq002msghdwukgyikg","_id":"ck8i4ktxw002xsghd22i9e3o6"},{"post_id":"ck8i4ktwv000xsghd1bonr8ll","tag_id":"ck8i4ktxv002vsghd67gvlfkc","_id":"ck8i4ktxx002ysghdnwcxipwo"},{"post_id":"ck8i4kv2a002zsghdljet9r0s","tag_id":"ck8i4ktxq002msghdwukgyikg","_id":"ck8i4kv2e0032sghdu4jmf93r"},{"post_id":"ck8i4kv2a002zsghdljet9r0s","tag_id":"ck8i4kv2d0031sghdk1utkoqm","_id":"ck8i4kv2e0033sghdwi9urnau"}],"Tag":[{"name":"聚类","_id":"ck8i4ktw40006sghdcarnhg73"},{"name":"K-Means","_id":"ck8i4ktwb000bsghd908t9fey"},{"name":"国科大","_id":"ck8i4ktwg000gsghdlk6o9d9x"},{"name":"课程","_id":"ck8i4ktwl000lsghdkn9lkzox"},{"name":"leetcode","_id":"ck8i4ktwp000qsghdj0sjsssv"},{"name":"数组","_id":"ck8i4ktww000ysghdlsjen0mv"},{"name":"最小值","_id":"ck8i4ktwz0013sghd79fv6k33"},{"name":"分治","_id":"ck8i4ktx10016sghd1f84e1ol"},{"name":"二分查找","_id":"ck8i4ktx30019sghdn0lqfa8p"},{"name":"余弦相似度","_id":"ck8i4ktxa001msghdowebxdqd"},{"name":"推荐","_id":"ck8i4ktxd001qsghdgab8ank3"},{"name":"bigdatabench","_id":"ck8i4ktxe001ssghd1qa2nur9"},{"name":"贪心","_id":"ck8i4ktxf001wsghdyx4boaa9"},{"name":"ceph","_id":"ck8i4ktxh0021sghdaa17mgro"},{"name":"Linux","_id":"ck8i4ktxi0024sghd3dca4md8"},{"name":"command","_id":"ck8i4ktxj0026sghd6yvmnesr"},{"name":"运维","_id":"ck8i4ktxl002asghdtr5f8rh6"},{"name":"make","_id":"ck8i4ktxn002fsghd1gptrqbd"},{"name":"网络问题","_id":"ck8i4ktxq002lsghdqc2ovk6w"},{"name":"redis","_id":"ck8i4ktxq002msghdwukgyikg"},{"name":"benchmark","_id":"ck8i4ktxt002psghdtvcewp9v"},{"name":"shell","_id":"ck8i4ktxt002rsghdywjodcvf"},{"name":"graph","_id":"ck8i4ktxv002vsghd67gvlfkc"},{"name":"源码阅读","_id":"ck8i4kv2d0031sghdk1utkoqm"}]}}